// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SendbirdUIKit
import AVFAudio
import AVFoundation
import AVKit
import CoreGraphics
import DeveloperToolsSupport
import Foundation
import MobileCoreServices
import Photos
import PhotosUI
import QuartzCore
import SafariServices
import SendbirdChatSDK
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
extension Swift.Array where Element : SendbirdUIKit.SBUUser {
  public func sbu_getUserIds() -> [Swift.String]
  public func sbu_getUserNicknames() -> [Swift.String]
  public func sbu_updateOperatorStatus(channel: SendbirdChatSDK.BaseChannel) -> [SendbirdUIKit.SBUUser]
}
extension Swift.Array where Element : SendbirdChatSDK.User {
  public func sbu_convertUserList() -> [SendbirdUIKit.SBUUser]
}
extension Swift.Array where Element : SendbirdChatSDK.Member {
  public func sbu_convertUserList() -> [SendbirdUIKit.SBUUser]
}
extension Swift.Array where Element : SendbirdChatSDK.BaseMessage {
  public func hasStreamMessageOnly(with latestMessage: SendbirdChatSDK.BaseMessage?) -> SendbirdChatSDK.BaseMessage?
}
extension Foundation.NSArray {
  public func sbu_getUserIds() -> [Swift.String]
  public func sbu_getUserNicknames() -> [Swift.String]
  public func sbu_convertUserList() -> [SendbirdUIKit.SBUUser]
}
extension Swift.Array where Element == SendbirdChatSDK.BaseMessage {
  public func getChatInputDisableState(hasNext: Swift.Bool?) -> Swift.Bool
}
extension SendbirdChatSDK.BaseMessage {
  public var asCustomView: Any? {
    get
  }
  public var asMessageTemplate: [Swift.String : Any]? {
    get
  }
  public var hasMessageTemplate: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "`asUiSettingContainerType` has been deprecated since 3.27.2.")
  public var asUiSettingContainerType: SendbirdUIKit.SBUMessageContainerType {
    get
  }
  public func decodeCustomViewData<ViewData>() throws -> ViewData? where ViewData : Swift.Decodable
  public var isStreamMessage: Swift.Bool {
    get
  }
}
extension SendbirdChatSDK.BaseMessage {
  @available(*, deprecated, message: "Use `getChatInputDisableState(hasNext:)` in [BaseMessage]")
  public func getChatInputDisabledState(hasNext: Swift.Bool?) -> Swift.Bool
}
extension SendbirdChatSDK.BaseMessage {
  @available(*, deprecated, message: "Use `BaseMessage.suggestedReplies`")
  public var asSuggestedReplies: [Swift.String]? {
    get
  }
  @available(*, unavailable, message: "Use `BaseMessage.forms`")
  public var asForms: [SendbirdUIKit.SBUForm]? {
    get
  }
}
public protocol SBULoadingIndicatorProtocol {
  func showLoading(_ isLoading: Swift.Bool)
}
extension Foundation.Date {
  public static func sbu_from(_ baseTimestamp: Swift.Int64) -> Foundation.Date
  public func sbu_toString(dateFormat: Swift.String, localizedFormat: Swift.Bool = true) -> Swift.String
  public static func lastUpdatedTimeForChannelCell(baseTimestamp: Swift.Int64) -> Swift.String?
  public static func lastUpdatedTimeForMessageSearchResultCell(baseTimestamp: Swift.Int64) -> Swift.String?
  public static func messageCreatedTimeForParentInfo(baseTimestamp: Swift.Int64) -> Swift.String?
  public static func dateSeparatedTime(baseTimestamp: Swift.Int64) -> Swift.String?
  public static func lastUpdatedTime(baseTimestamp: Swift.Int64, dateFormat: Swift.String = SBUDateFormatSet.MMMdd, pastYearFormat: Swift.String? = nil, timeFormat: Swift.String = SBUDateFormatSet.hhmm, yesterdayFormat: Swift.String? = nil) -> Swift.String?
}
extension Foundation.Date {
  @available(*, deprecated, renamed: "SBUDateFormatSet")
  public enum SBUDateFormat {
    case EMMMyyyy
    case MMMddyyyy
    case EMMMdd
    case MMMdd
    case hhmma
    case hhmm
    case yyyyMMddhhmm
    case yyyyMMddhhmmss
    public var rawValue: Swift.String {
      get
    }
    public static func == (a: Foundation.Date.SBUDateFormat, b: Foundation.Date.SBUDateFormat) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(*, deprecated, renamed: "sbu_toString(formatString:localizedFormat:)")
  public func sbu_toString(format: Foundation.Date.SBUDateFormat, localizedFormat: Swift.Bool = true) -> Swift.String
  @available(*, deprecated, renamed: "sbu_toString(dateFormat:localizedFormat:)")
  public func sbu_toString(formatString: Swift.String, localizedFormat: Swift.Bool = true) -> Swift.String
}
extension SendbirdChatSDK.BaseMessage {
  public var isFormSubmitting: Swift.Bool {
    get
    set
  }
  public var formItemValidationStatus: [Swift.Int64 : Swift.Bool] {
    get
    set
  }
}
extension SendbirdChatSDK.MessageForm {
  public var isValidVersion: Swift.Bool {
    get
  }
}
extension SendbirdChatSDK.MessageFormItem.LayoutType {
  public var keyboardType: UIKit.UIKeyboardType {
    get
  }
  public var isTextInputType: Swift.Bool {
    get
  }
}
extension SendbirdChatSDK.MessageFormItem.ResultCount {
  public func canUpdate(_ values: [Swift.String]) -> Swift.Bool
  public func isValid(_ values: [Swift.String]) -> Swift.Bool
  public var isOnlyOne: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MessageTemplateParser : ObjectiveC.NSObject {
  public static func getMock(widthT: Swift.String, widthV: Swift.Int, heightT: Swift.String, heightV: Swift.Int, contentMode: Swift.String) -> Swift.String
  public func parserTest()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MessageTemplateTestViewController : SendbirdUIKit.SBUBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
  @_Concurrency.MainActor(unsafe) @objc override public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SendbirdChatSDK.MultipleFilesMessage {
  final public var filesCount: Swift.Int {
    get
  }
}
extension UIKit.NSLayoutConstraint {
  @_Concurrency.MainActor(unsafe) public static func sbu_activate(baseView: UIKit.UIView, constraints: [UIKit.NSLayoutConstraint?])
}
extension ObjectiveC.NSObject {
  public static var sbu_className: Swift.String {
    get
  }
  public var sbu_className: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class QuotedFileCommonContentView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var position: SendbirdUIKit.MessagePosition
  @_Concurrency.MainActor(unsafe) public var fileURL: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var stackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var fileImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var fileNameLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(with fileType: Swift.String, fileName: Swift.String, position: SendbirdUIKit.MessagePosition, highlightKeyword: Swift.String?)
  @_Concurrency.MainActor(unsafe) open func configure(with messageFileType: SendbirdUIKit.SBUMessageFileType, fileName: Swift.String, position: SendbirdUIKit.MessagePosition, highlightKeyword: Swift.String?)
  @_Concurrency.MainActor(unsafe) open func addHighlight(keyword: Swift.String, toAttributedString attributedString: Foundation.NSMutableAttributedString, highlightTextColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class QuotedFileImageContentView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var position: SendbirdUIKit.MessagePosition
  @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var fileURL: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var fileType: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var messageFileType: SendbirdUIKit.SBUMessageFileType? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func setupSizeContraint()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: SendbirdUIKit.SBUQuotedBaseMessageViewParams)
  @_Concurrency.MainActor(unsafe) open func setImage(_ image: UIKit.UIImage?, size: CoreFoundation.CGSize? = nil)
  @_Concurrency.MainActor(unsafe) open func setFileIcon()
  @_Concurrency.MainActor(unsafe) open func resizeImageView(by size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SBUActionSheetItem : SendbirdUIKit.SBUCommonItem {
  public var completionHandler: SendbirdUIKit.SBUActionSheetHandler?
  public var isTextAlignmentSet: Swift.Bool
  override public init(title: Swift.String? = nil, color: UIKit.UIColor? = SBUColorSet.onLightTextHighEmphasis, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, tintColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment? = nil, tag: Swift.Int? = nil)
  public init(title: Swift.String? = nil, color: UIKit.UIColor? = nil, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, textAlignment: UIKit.NSTextAlignment? = nil, tag: Swift.Int? = nil, completionHandler: SendbirdUIKit.SBUActionSheetHandler?)
  @objc deinit
}
public typealias SBUActionSheetHandler = () -> Swift.Void
public protocol SBUActionSheetDelegate : ObjectiveC.NSObjectProtocol {
  func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
  func didDismissActionSheet()
}
extension SendbirdUIKit.SBUActionSheetDelegate {
  public func didDismissActionSheet()
}
@objc @_inheritsConvenienceInitializers open class SBUActionSheet : ObjectiveC.NSObject, SendbirdUIKit.SBUViewLifeCycle {
  @SendbirdUIKit.SBUThemeWrapper public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  weak public var delegate: (any SendbirdUIKit.SBUActionSheetDelegate)? {
    get
  }
  public var isShowing: Swift.Bool {
    get
  }
  public var identifier: Swift.Int {
    get
  }
  public var items: [SendbirdUIKit.SBUActionSheetItem] {
    get
  }
  public var cancelItem: SendbirdUIKit.SBUActionSheetItem {
    get
  }
  public var parentView: UIKit.UIView?
  public var backgroundView: UIKit.UIButton {
    get
  }
  public var containerView: UIKit.UIView {
    get
  }
  public var itemButtons: [UIKit.UIButton] {
    get
  }
  public var cancelItemButton: UIKit.UIButton? {
    get
  }
  public var itemHeight: CoreFoundation.CGFloat
  public var containerCornerRadius: CoreFoundation.CGFloat
  @objc required override dynamic public init()
  open class func show(items: [SendbirdUIKit.SBUActionSheetItem], cancelItem: SendbirdUIKit.SBUActionSheetItem, identifier: Swift.Int = -1, oneTimetheme: SendbirdUIKit.SBUComponentTheme? = nil, delegate: (any SendbirdUIKit.SBUActionSheetDelegate)? = nil, dismissHandler: (() -> Swift.Void)? = nil)
  open class func dismiss()
  open func configureView()
  @objc open func setupViews()
  @objc open func setupStyles()
  @objc open func updateStyles()
  @objc open func setupLayouts()
  @objc open func updateLayouts()
  @objc open func setupActions()
  @objc deinit
}
extension SendbirdUIKit.SBUActionSheet {
  @objc dynamic public func dismiss()
  @objc dynamic public func onClickActionSheetButton(sender: UIKit.UIButton)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUAdminMessageCell : SendbirdUIKit.SBUBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var adminMessage: SendbirdChatSDK.AdminMessage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  @objc @available(*, deprecated, renamed: "configure(with:)")
  @_Concurrency.MainActor(unsafe) open func configure(_ message: SendbirdChatSDK.AdminMessage, hideDateView: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class SBUAdminMessageCellParams : SendbirdUIKit.SBUBaseMessageCellParams {
  public var adminMessage: SendbirdChatSDK.AdminMessage? {
    get
  }
  public init(message: SendbirdChatSDK.AdminMessage, hideDateView: Swift.Bool, isThreadMessage: Swift.Bool = false)
  @objc deinit
}
public class SBUAlertButtonItem {
  public var title: Swift.String
  public var color: UIKit.UIColor?
  public var completionHandler: SendbirdUIKit.SBUAlertButtonHandler?
  public init(title: Swift.String, color: UIKit.UIColor? = nil, completionHandler: SendbirdUIKit.SBUAlertButtonHandler? = nil)
  @objc deinit
}
public typealias SBUAlertButtonHandler = (_ info: Any?) -> Swift.Void
@available(*, deprecated, renamed: "SBUAlertButtonHandler")
public typealias AlertButtonHandler = SendbirdUIKit.SBUAlertButtonHandler
public protocol SBUAlertViewDelegate : AnyObject {
  func didDismissAlertView()
}
@objc @_inheritsConvenienceInitializers open class SBUAlertView : ObjectiveC.NSObject, SendbirdUIKit.SBUViewLifeCycle {
  @SendbirdUIKit.SBUThemeWrapper public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  weak public var delegate: (any SendbirdUIKit.SBUAlertViewDelegate)? {
    get
  }
  public var isShowing: Swift.Bool {
    get
  }
  public var confirmButtonItem: SendbirdUIKit.SBUAlertButtonItem? {
    get
  }
  public var cancelButtonItem: SendbirdUIKit.SBUAlertButtonItem? {
    get
  }
  public var parentView: UIKit.UIView?
  public var backgroundView: UIKit.UIButton {
    get
  }
  public var containerView: UIKit.UIView {
    get
  }
  public var titleLabel: UIKit.UILabel {
    get
  }
  public var messageLabel: UIKit.UILabel? {
    get
  }
  public var inputField: UIKit.UITextField? {
    get
  }
  public var separator: UIKit.UIView {
    get
  }
  public var title: Swift.String {
    get
  }
  public var message: Swift.String? {
    get
  }
  public var needInputField: Swift.Bool {
    get
  }
  public var inputText: Swift.String? {
    get
  }
  public var placeHolder: Swift.String? {
    get
  }
  public var confirmButton: UIKit.UIButton {
    get
  }
  public var cancelButton: UIKit.UIButton? {
    get
  }
  public var centerYRatio: CoreFoundation.CGFloat {
    get
  }
  public var containerCornerRadius: CoreFoundation.CGFloat
  @objc required override dynamic public init()
  open class func show(title: Swift.String, message: Swift.String? = nil, needInputField: Swift.Bool = false, inputText: Swift.String? = nil, placeHolder: Swift.String? = "", centerYRatio: CoreFoundation.CGFloat? = 1.0, oneTimetheme: SendbirdUIKit.SBUComponentTheme? = nil, confirmButtonItem: SendbirdUIKit.SBUAlertButtonItem, cancelButtonItem: SendbirdUIKit.SBUAlertButtonItem?, delegate: (any SendbirdUIKit.SBUAlertViewDelegate)? = nil, dismissHandler: (() -> Swift.Void)? = nil)
  open class func dismiss()
  open func configureView()
  @objc open func setupViews()
  @objc open func setupStyles()
  @objc open func updateStyles()
  @objc open func setupLayouts()
  @objc open func updateLayouts()
  @objc open func setupActions()
  @objc deinit
}
extension SendbirdUIKit.SBUAlertView {
  @objc dynamic public func dismiss()
  public func calculateTotalHeight() -> CoreFoundation.CGFloat
  public func getTextHeight(text: Swift.String, maxSize: CoreFoundation.CGSize, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public var insideItemWidth: CoreFoundation.CGFloat {
    get
  }
  public var titleHeight: CoreFoundation.CGFloat {
    get
  }
  public var messageHeight: CoreFoundation.CGFloat {
    get
  }
  @objc dynamic public func onClickAlertButton(sender: UIKit.UIButton)
}
@_hasMissingDesignatedInitializers public class SBUAvailable {
  public static func isSupportSuperGroupChannel() -> Swift.Bool
  public static func isSupportBroadcastChannel() -> Swift.Bool
  public static func isSupportReactions() -> Swift.Bool
  public static func isSupportReactions(for channelType: SendbirdUIKit.SBUChannelType) -> Swift.Bool
  public static func isSupportOgTag(channelType: SendbirdChatSDK.ChannelType = .group) -> Swift.Bool
  public static func isSupportMessageSearch() -> Swift.Bool
  public static var multipleFilesMessageFileCountLimit: Swift.Int {
    get
  }
  public static var uploadSizeLimitBytes: Swift.Int64 {
    get
  }
  public static var uploadSizeLimitMB: Swift.Int64 {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUBarButtonItem : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUBaseChannelCell : SendbirdUIKit.SBUTableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open func configure(channel: SendbirdChatSDK.BaseChannel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SBUBaseChannelListModuleHeaderDelegate : SendbirdUIKit.SBUCommonDelegate {
  func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
extension SendbirdUIKit.SBUBaseChannelListModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any SendbirdUIKit.SBUBaseChannelListModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public protocol SBUBaseChannelListModuleListDelegate : SendbirdUIKit.SBUCommonDelegate {
  func baseChannelListModule(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func baseChannelListModule(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  func baseChannelListModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List)
  func baseChannelListModuleDidSelectRefresh(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List)
}
public protocol SBUBaseChannelListModuleListDataSource : AnyObject {
  func baseChannelListModule(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List, channelsInTableView tableView: UIKit.UITableView) -> [SendbirdChatSDK.BaseChannel]?
}
extension SendbirdUIKit.SBUBaseChannelListModule {
  @_inheritsConvenienceInitializers @objc(SBUBaseChannelListModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var channelCell: SendbirdUIKit.SBUBaseChannelCell?
    @objc @_Concurrency.MainActor(unsafe) public var customCell: SendbirdUIKit.SBUBaseChannelCell?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any SendbirdUIKit.SBUBaseChannelListModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var baseDataSource: (any SendbirdUIKit.SBUBaseChannelListModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var baseChannelList: [SendbirdChatSDK.BaseChannel]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var isPullToRefreshEnabled: Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @objc @_Concurrency.MainActor(unsafe) open func setupPullToRefresh()
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ channelCell: SendbirdUIKit.SBUBaseChannelCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func register(channelCell: SendbirdUIKit.SBUBaseChannelCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(customCell: SendbirdUIKit.SBUBaseChannelCell?, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func pullToRefresh(_ sender: Any)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @_Concurrency.MainActor(unsafe) public func updateEmptyView(type: SendbirdUIKit.EmptyViewType)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUBaseChannelListModule.List : SendbirdUIKit.SBUEmptyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
}
extension SendbirdUIKit.SBUBaseChannelListModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
}
@objc @_inheritsConvenienceInitializers open class SBUBaseChannelListModule : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUBaseChannelListViewController : SendbirdUIKit.SBUBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) public var baseHeaderComponent: SendbirdUIKit.SBUBaseChannelListModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var baseListComponent: SendbirdUIKit.SBUBaseChannelListModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var baseViewModel: SendbirdUIKit.SBUBaseChannelListViewModel?
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func showChannel(channelURL: Swift.String, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol SBUBaseChannelListViewModelDelegate : SendbirdUIKit.SBUCommonViewModelDelegate {
}
@objc open class SBUBaseChannelListViewModel : ObjectiveC.NSObject {
  public init(delegate: (any SendbirdUIKit.SBUBaseChannelListViewModelDelegate)?)
  @objc deinit
  public func initChannelList()
  public func loadNextChannelList(reset: Swift.Bool)
  public func reset()
}
extension SendbirdUIKit.SBUBaseChannelListViewModel : SendbirdChatSDK.ConnectionDelegate {
  @objc dynamic open func didSucceedReconnection()
}
open class SBUBaseChannelModule {
  @available(*, deprecated, message: "Use `SBUBaseChannelModule.HeaderComponent.init()` instead.")
  public var headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUBaseChannelModule.ListComponent.init()` instead.")
  public var listComponent: SendbirdUIKit.SBUBaseChannelModule.List? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUBaseChannelModule.InputComponent.init()` instead.")
  public var inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.BaseChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.BaseChannelModule`")
  required public init(listComponent: SendbirdUIKit.SBUBaseChannelModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.BaseChannelModule`")
  required public init(inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input?)
  @available(*, deprecated, message: "Use `SBUModuleSet.BaseChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header?, listComponent: SendbirdUIKit.SBUBaseChannelModule.List?, inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input?)
  @objc deinit
}
public protocol SBUBaseChannelModuleHeaderDelegate : SendbirdUIKit.SBUCommonDelegate {
  func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapTitleView titleView: UIKit.UIView?)
  func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
extension SendbirdUIKit.SBUBaseChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var titleSpacer: UIKit.UIView
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelTheme?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any SendbirdUIKit.SBUBaseChannelModuleHeaderDelegate)?
    @available(*, unavailable, renamed: "SBUBaseChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUBaseChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
    @_Concurrency.MainActor(unsafe) open func updateStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
  }
}
public protocol SBUBaseChannelModuleInputDelegate : SendbirdUIKit.SBUCommonDelegate {
  func baseChannelModuleDidStartTyping(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  func baseChannelModuleDidEndTyping(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  func baseChannelModuleDidTapAdd(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didTapSend text: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage?)
  func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didTapResource type: SendbirdUIKit.MediaResourceType)
  func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didTapEdit text: Swift.String)
  func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didChangeText text: Swift.String)
  func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didUpdateFrozenState isFrozen: Swift.Bool)
}
public protocol SBUBaseChannelModuleInputDataSource : AnyObject {
  func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, channelForInputView messageInputView: UIKit.UIView?) -> SendbirdChatSDK.BaseChannel?
}
extension SendbirdUIKit.SBUBaseChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Input : UIKit.UIView, SendbirdUIKit.SBUMessageInputViewDelegate, SendbirdUIKit.SBUMessageInputViewDataSource {
    @objc @_Concurrency.MainActor(unsafe) public var inputVStackView: SendbirdUIKit.SBUStackView
    @objc @_Concurrency.MainActor(unsafe) public var messageInputView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelTheme?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any SendbirdUIKit.SBUBaseChannelModuleInputDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var baseDataSource: (any SendbirdUIKit.SBUBaseChannelModuleInputDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var baseChannel: SendbirdChatSDK.BaseChannel? {
      @objc get
    }
    @available(*, unavailable, renamed: "SBUBaseChannelModule.Input()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUBaseChannelModule.Input()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func updateMessageInputMode(_ mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func updateMessageInputModeState()
    @objc @_Concurrency.MainActor(unsafe) open func updateFrozenModeState()
    @objc @_Concurrency.MainActor(unsafe) open func pickImageFile(info: [UIKit.UIImagePickerController.InfoKey : Any])
    @objc @_Concurrency.MainActor(unsafe) open func pickVideoFile(info: [UIKit.UIImagePickerController.InfoKey : Any])
    @objc @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) open func pickImageFile(itemProvider: Foundation.NSItemProvider)
    @objc @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) open func pickGIFFile(itemProvider: Foundation.NSItemProvider)
    @objc @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) open func pickVideoFile(itemProvider: Foundation.NSItemProvider)
    @objc @_Concurrency.MainActor(unsafe) open func pickImageData(_ data: Foundation.Data, fileName: Swift.String?, mimeType: Swift.String?)
    @objc @_Concurrency.MainActor(unsafe) open func pickVideoURL(_ url: Foundation.URL)
    @objc @_Concurrency.MainActor(unsafe) open func pickDocumentFile(documentURLs: [Foundation.URL])
    @objc @_Concurrency.MainActor(unsafe) public func messageInputViewDidStartTyping()
    @objc @_Concurrency.MainActor(unsafe) public func messageInputViewDidEndTyping()
    @objc @_Concurrency.MainActor(unsafe) public func messageInputViewDidSelectAdd(_ messageInputView: SendbirdUIKit.SBUMessageInputView)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectSend text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectResource type: SendbirdUIKit.MediaResourceType)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectEdit text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeText text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldInteractWith url: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeSelection range: Foundation.NSRange)
    @objc @_Concurrency.MainActor(unsafe) public func messageInputViewDidTapVoiceMessage(_ messageInputView: SendbirdUIKit.SBUMessageInputView)
    @objc @_Concurrency.MainActor(unsafe) public func channelForMessageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView) -> SendbirdChatSDK.BaseChannel?
    @objc deinit
  }
}
public protocol SBUBaseChannelModuleListDelegate : SendbirdUIKit.SBUCommonDelegate {
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapMessage message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didLongTapMessage message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapUserProfile user: SendbirdUIKit.SBUUser)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapVoiceMessage fileMessage: SendbirdChatSDK.FileMessage, cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didScroll scrollView: UIKit.UIScrollView)
  func baseChannelModuleDidTapScrollToButton(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, animated: Swift.Bool)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didSelectScrollToBottonWithOptions options: SendbirdUIKit.SBUScrollOptions, animated: Swift.Bool)
  func baseChannelModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapRetryFailedMessage failedMessage: SendbirdChatSDK.BaseMessage)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapDeleteFailedMessage failedMessage: SendbirdChatSDK.BaseMessage)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapCopyMessage message: SendbirdChatSDK.BaseMessage)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapDeleteMessage message: SendbirdChatSDK.BaseMessage)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapEditMessage message: SendbirdChatSDK.BaseMessage)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapSaveMessage message: SendbirdChatSDK.BaseMessage)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapReplyMessage message: SendbirdChatSDK.BaseMessage)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didReactToMessage message: SendbirdChatSDK.BaseMessage, withEmoji key: Swift.String, selected: Swift.Bool)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapMoreEmojisOnMessage message: SendbirdChatSDK.BaseMessage)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didDismissMenuForCell cell: UIKit.UITableViewCell)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didFailScrollToMessageId messageId: Swift.Int64, needToSearch: Swift.Bool)
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didFailScrollToMessage message: SendbirdChatSDK.BaseMessage, needToSearch: Swift.Bool)
}
public protocol SBUBaseChannelModuleListDataSource : AnyObject {
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, channelForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.BaseChannel?
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, sentMessagesInTableView tableView: UIKit.UITableView) -> [SendbirdChatSDK.BaseMessage]
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, fullMessagesInTableView tableView: UIKit.UITableView) -> [SendbirdChatSDK.BaseMessage]
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, hasNextInTableView tableView: UIKit.UITableView) -> Swift.Bool
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, lastSeenIndexPathIn tableView: UIKit.UITableView) -> Foundation.IndexPath?
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, startingPointIn tableView: UIKit.UITableView) -> Swift.Int64?
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, parentViewControllerDisplayMenuItems menuItems: [SendbirdUIKit.SBUMenuItem]) -> UIKit.UIViewController?
  func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, pendingMessageManagerForCell cell: UIKit.UITableViewCell) -> (SendbirdUIKit.SBUPendingMessageManager?, Swift.Bool?)
}
extension SendbirdUIKit.SBUBaseChannelModule {
  @_inheritsConvenienceInitializers @objc(SBUBaseChannelModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var channelStateBanner: UIKit.UIView?
    @objc @_Concurrency.MainActor(unsafe) public var newMessageInfoView: UIKit.UIView?
    @objc @_Concurrency.MainActor(unsafe) public var scrollBottomView: UIKit.UIView?
    @objc @_Concurrency.MainActor(unsafe) public var userProfileView: UIKit.UIView?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any SendbirdUIKit.SBUBaseChannelModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var baseDataSource: (any SendbirdUIKit.SBUBaseChannelModuleListDataSource)?
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelTheme?
    @objc @_Concurrency.MainActor(unsafe) public var baseChannel: SendbirdChatSDK.BaseChannel? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var sentMessages: [SendbirdChatSDK.BaseMessage] {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var fullMessageList: [SendbirdChatSDK.BaseMessage] {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
    @_Concurrency.MainActor(unsafe) open func updateStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil, componentTheme: SendbirdUIKit.SBUComponentTheme = SBUTheme.componentTheme)
    @_Concurrency.MainActor(unsafe) public func setupScrollBottomViewStyle(scrollBottomView: UIKit.UIView, theme: SendbirdUIKit.SBUComponentTheme = SBUTheme.componentTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setScrollBottomView(hidden: Swift.Bool)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView(needsToLayout: Swift.Bool = true)
    @_Concurrency.MainActor(unsafe) public func updateEmptyView(type: SendbirdUIKit.EmptyViewType)
    @objc @_Concurrency.MainActor(unsafe) open func showMessageMenu(on message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func showFailedMessageMenu(on message: SendbirdChatSDK.BaseMessage)
    @_Concurrency.MainActor(unsafe) open func showDeleteMessageAlert(on message: SendbirdChatSDK.BaseMessage, oneTimeTheme: SendbirdUIKit.SBUComponentTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func showMessageMenuSheet(for message: SendbirdChatSDK.BaseMessage, cell: UIKit.UITableViewCell)
    @objc @_Concurrency.MainActor(unsafe) open func showMessageContextMenu(for message: SendbirdChatSDK.BaseMessage, cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) open func createMessageMenuItems(for message: SendbirdChatSDK.BaseMessage) -> [SendbirdUIKit.SBUMenuItem]
    @_Concurrency.MainActor(unsafe) open func createCopyMenuItem(for message: SendbirdChatSDK.BaseMessage) -> SendbirdUIKit.SBUMenuItem
    @_Concurrency.MainActor(unsafe) open func createDeleteMenuItem(for message: SendbirdChatSDK.BaseMessage) -> SendbirdUIKit.SBUMenuItem
    @_Concurrency.MainActor(unsafe) open func createEditMenuItem(for message: SendbirdChatSDK.BaseMessage) -> SendbirdUIKit.SBUMenuItem
    @_Concurrency.MainActor(unsafe) open func createSaveMenuItem(for message: SendbirdChatSDK.BaseMessage) -> SendbirdUIKit.SBUMenuItem
    @_Concurrency.MainActor(unsafe) open func createReplyMenuItem(for message: SendbirdChatSDK.BaseMessage) -> SendbirdUIKit.SBUMenuItem
    @objc @_Concurrency.MainActor(unsafe) open func setTapGesture(_ cell: UIKit.UITableViewCell, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setLongTapGesture(_ cell: UIKit.UITableViewCell, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setUserProfileTapGesture(_ user: SendbirdUIKit.SBUUser)
    @objc @_Concurrency.MainActor(unsafe) open func onTapScrollToBottom()
    @_Concurrency.MainActor(unsafe) @objc open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setFileMessageCellImage(_ cell: UIKit.UITableViewCell, fileMessage: SendbirdChatSDK.FileMessage)
    @objc @_Concurrency.MainActor(unsafe) public func getMessageGroupingPosition(currentIndex: Swift.Int) -> SendbirdUIKit.MessageGroupPosition
  }
}
extension SendbirdUIKit.SBUBaseChannelModule.List : SendbirdUIKit.SBUEmptyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
}
extension SendbirdUIKit.SBUBaseChannelModule.List : SendbirdUIKit.SBUUserProfileViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectClose()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectMessage(userId: Swift.String?)
}
extension SendbirdUIKit.SBUBaseChannelModule.List {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isScrollNearByBottom: Swift.Bool {
    @objc get
  }
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func scrollToMessage(id messageId: Swift.Int64, enablesScrollAnimation scrollAnimated: Swift.Bool = false, enablesMessageAnimation messageAnimated: Swift.Bool = false, position: SendbirdUIKit.SBUScrollPosition = .middle, needToSearch: Swift.Bool = true) -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func scrollToMessage(message: SendbirdChatSDK.BaseMessage, enablesScrollAnimation scrollAnimated: Swift.Bool = false, enablesMessageAnimation messageAnimated: Swift.Bool = false, position: SendbirdUIKit.SBUScrollPosition = .middle, needToSearch: Swift.Bool = true) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func checkSameDayAsNextMessage(currentIndex: Swift.Int, fullMessageList: [SendbirdChatSDK.BaseMessage]) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func checkSameDayAsPrevMessage(currentIndex: Swift.Int, fullMessageList: [SendbirdChatSDK.BaseMessage]) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func reloadCell(_ cell: SendbirdUIKit.SBUBaseMessageCell?)
}
extension SendbirdUIKit.SBUBaseChannelModule {
  public static var HeaderComponent: SendbirdUIKit.SBUBaseChannelModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUBaseChannelModule.List.Type
  public static var InputComponent: SendbirdUIKit.SBUBaseChannelModule.Input.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUBaseChannelSettingCell : SendbirdUIKit.SBUTableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var subTitleLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var typeIcon: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var rightSwitch: UIKit.UISwitch {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var separateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var switchAction: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func configure(with item: SendbirdUIKit.SBUChannelSettingItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func onChangeSwitch(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) public func changeBackSwitch()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SBUBaseChannelSettingsModuleHeaderDelegate : SendbirdUIKit.SBUCommonDelegate {
}
public protocol SBUBaseChannelSettingsModuleHeaderDataSource : AnyObject {
}
extension SendbirdUIKit.SBUBaseChannelSettingsModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme?
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelSettingsTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public protocol SBUBaseChannelSettingsModuleListDelegate : SendbirdUIKit.SBUCommonDelegate {
}
public protocol SBUBaseChannelSettingsModuleListDataSource : AnyObject {
  func baseChannelSettingsModule(_ listComponent: SendbirdUIKit.SBUBaseChannelSettingsModule.List, channelForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.BaseChannel?
  func baseChannelSettingsModuleIsOperator(_ listComponent: SendbirdUIKit.SBUBaseChannelSettingsModule.List) -> Swift.Bool
}
extension SendbirdUIKit.SBUBaseChannelSettingsModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var channelInfoView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any SendbirdUIKit.SBUBaseChannelSettingsModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var baseDataSource: (any SendbirdUIKit.SBUBaseChannelSettingsModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var baseChannel: SendbirdChatSDK.BaseChannel? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var isOperator: Swift.Bool {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) public var items: [SendbirdUIKit.SBUChannelSettingItem]
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupItems()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelSettingsTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func updateChannelInfoView(coverImage: UIKit.UIImage)
    @objc @_Concurrency.MainActor(unsafe) open func endEditingChannelInfoView()
    @objc @_Concurrency.MainActor(unsafe) open func reloadChannelInfoView()
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUBaseChannelSettingsModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers open class SBUBaseChannelSettingsModule {
  @objc deinit
}
@available(*, deprecated, renamed: "SBUBaseChannelSettingsViewController")
public typealias SBUBaseChannelSettingViewController = SendbirdUIKit.SBUBaseChannelSettingsViewController
extension SendbirdUIKit.SBUBaseChannelSettingsViewController {
  @objc @available(*, deprecated, renamed: "channelURL")
  @_Concurrency.MainActor(unsafe) dynamic public var channelUrl: Swift.String? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "headerComponent.titleView", message: "This property has been moved to the `SBUBaseChannelSettingsModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.leftBarButton", message: "This property has been moved to the `SBUBaseChannelSettingsModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.rightBarButton", message: "This property has been moved to the `SBUBaseChannelSettingsModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.tableView", message: "This property has been moved to the `SBUBaseChannelSettingsModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var tableView: UIKit.UITableView? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.channelInfoView", message: "This property has been moved to the `SBUBaseChannelSettingsModule.List`. And renamed to `channelInfoView`.")
  @_Concurrency.MainActor(unsafe) dynamic public var userInfoView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "viewModel.loadChannel(channelURL:)", message: "This function has been moved to the `SBUBaseChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadChannel(channelUrl: Swift.String?)
  @objc @available(*, deprecated, renamed: "viewModel.updateChannel(channelName:coverImage:)", message: "This function has been moved to the `SBUBaseChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func updateChannel(channelName: Swift.String? = nil, coverImage: UIKit.UIImage? = nil)
  @objc @available(*, deprecated, renamed: "showChannelEditActionSheet()")
  @_Concurrency.MainActor(unsafe) dynamic public func onClickEdit()
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUBaseChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUBaseChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUBaseChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.OpenChannel, userDidExit user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUBaseChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.OpenChannel, userDidEnter user: SendbirdChatSDK.User)
  @available(*, unavailable, renamed: "errorHandler(_:_:)")
  @_Concurrency.MainActor(unsafe) public func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
@available(*, deprecated, renamed: "SBUGroupChannelSettingsViewController")
public typealias SBUChannelSettingsViewController = SendbirdUIKit.SBUGroupChannelSettingsViewController
extension SendbirdUIKit.SBUGroupChannelSettingsViewController {
  @objc @available(*, deprecated, renamed: "viewModel.updateChannel(params:)", message: "This function has been moved to the `SBUGroupChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func updateChannel(params: SendbirdChatSDK.GroupChannelUpdateParams)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUGroupChannelPushSettingsViewModel`. and a SBUGroupChannelPushSettingsViewController has been created for channel's push settings.")
  @_Concurrency.MainActor(unsafe) dynamic public func changeNotification(isOn: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.leaveChannel()", message: "This function has been moved to the `SBUGroupChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func leaveChannel()
  @objc @available(*, deprecated, renamed: "updateChannel(channelName:coverImage:)")
  @_Concurrency.MainActor(unsafe) dynamic public func updateChannelInfo(channelName: Swift.String? = nil)
}
extension SendbirdUIKit.SBUOpenChannelSettingsViewController {
  @objc @available(*, deprecated, renamed: "viewModel.updateChannel(params:)", message: "This function has been moved to the `SBUOpenChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func updateChannel(params: SendbirdChatSDK.OpenChannelUpdateParams)
  @objc @available(*, deprecated, renamed: "viewModel.deleteChannel()", message: "This function has been moved to the `SBUOpenChannelSettingsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func deleteChannel()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUBaseChannelSettingsViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUActionSheetDelegate, PhotosUI.PHPickerViewControllerDelegate, UIKit.UIImagePickerControllerDelegate, SendbirdUIKit.SBUSelectablePhotoViewDelegate, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUBaseChannelSettingsViewModelDelegate, SendbirdUIKit.SBUAlertViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var baseHeaderComponent: SendbirdUIKit.SBUBaseChannelSettingsModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var baseListComponent: SendbirdUIKit.SBUBaseChannelSettingsModule.List?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var baseViewModel: SendbirdUIKit.SBUBaseChannelSettingsViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var channelName: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelURL: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isOperator: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let actionSheetIdEdit: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) final public let actionSheetIdPicker: Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func updateRightBarButton()
  @objc @_Concurrency.MainActor(unsafe) public func showChannelEditActionSheet()
  @objc @_Concurrency.MainActor(unsafe) public func selectChannelImage()
  @objc @_Concurrency.MainActor(unsafe) public func changeChannelName()
  @objc @_Concurrency.MainActor(unsafe) open func showChannelImagePicker(with type: SendbirdUIKit.MediaResourceType)
  @objc @_Concurrency.MainActor(unsafe) open func showCamera()
  @objc @_Concurrency.MainActor(unsafe) open func showPhotoLibraryPicker()
  @objc @_Concurrency.MainActor(unsafe) open func showLimitedPhotoLibraryPicker()
  @_Concurrency.MainActor(unsafe) open func showPermissionAlert(forType permissionType: SendbirdUIKit.SBUPermissionManager.PermissionType = .photoLibrary)
  @objc @_Concurrency.MainActor(unsafe) open func showNotifications()
  @objc @_Concurrency.MainActor(unsafe) open func showSearch()
  @objc @_Concurrency.MainActor(unsafe) open func showModerationList()
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open func didDismissActionSheet()
  @objc @_Concurrency.MainActor(unsafe) open func didDismissAlertView()
  @_Concurrency.MainActor(unsafe) @objc open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @available(iOS 14, *)
  @_Concurrency.MainActor(unsafe) open func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
  @objc @_Concurrency.MainActor(unsafe) open func didTapSendImageData(_ data: Foundation.Data, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelSettingsViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelSettingsViewModel, shouldDismissForChannelSettings channel: SendbirdChatSDK.BaseChannel?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol SBUBaseChannelSettingsViewModelDelegate : SendbirdUIKit.SBUCommonViewModelDelegate {
  func baseChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelSettingsViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  func baseChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelSettingsViewModel, shouldDismissForChannelSettings channel: SendbirdChatSDK.BaseChannel?)
}
@objc @_inheritsConvenienceInitializers open class SBUBaseChannelSettingsViewModel : ObjectiveC.NSObject {
  public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  public var channelURL: Swift.String? {
    get
  }
  public var isOperator: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  public func loadChannel(channelURL: Swift.String)
  public func loadChannel(channelURL: Swift.String, type: SendbirdChatSDK.ChannelType)
  public func updateChannel(channelName: Swift.String? = nil, coverImage: UIKit.UIImage? = nil)
}
extension SendbirdUIKit.SBUBaseChannelSettingsViewModel : SendbirdChatSDK.BaseChannelDelegate {
  @objc dynamic public func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelDidUpdateOperators(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic public func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic public func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
}
extension SendbirdUIKit.SBUBaseChannelViewController {
  @objc @available(*, deprecated, renamed: "headerComponent.titleView", message: "This property has been moved to `SBUBaseChannelModule.Header`")
  @_Concurrency.MainActor(unsafe) dynamic public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.leftBarButton", message: "This property has been moved to `SBUBaseChannelModule.Header`")
  @_Concurrency.MainActor(unsafe) dynamic public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.rightBarButton", message: "`This property has been moved to `SBUBaseChannelModule.Header`")
  @_Concurrency.MainActor(unsafe) dynamic public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "inputComponent.messageInputView", message: "This property has been moved to `SBUBaseChannelModule.Input`")
  @_Concurrency.MainActor(unsafe) dynamic public var messageInputView: SendbirdUIKit.SBUMessageInputView? {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "inputComponent.currentQuotedMessage", message: "This property has been moved to `SBUGroupChannelModule.Input`")
  @_Concurrency.MainActor(unsafe) dynamic public var currentQuotedMessage: SendbirdChatSDK.BaseMessage? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.tableView", message: "This property has been moved to `SBUBaseChannelModule.List`")
  @_Concurrency.MainActor(unsafe) dynamic public var tableView: UIKit.UITableView {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.channelStateBanner", message: "This property has been moved to `SBUBaseChannelModule.List`")
  @_Concurrency.MainActor(unsafe) dynamic public var channelStateBanner: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.emptyView", message: "This property has been moved to `SBUBaseChannelModule.List`")
  @_Concurrency.MainActor(unsafe) dynamic public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.newMessageInfoView", message: "This property has been moved to `SBUBaseChannelModule.List`")
  @_Concurrency.MainActor(unsafe) dynamic public var newMessageInfoView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.scrollBottomView", message: "This property has been moved to `SBUBaseChannelModule.List`")
  @_Concurrency.MainActor(unsafe) dynamic public var scrollBottomView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.userProfileView", message: "This property has been moved to `SBUBaseChannelModule.List`")
  @_Concurrency.MainActor(unsafe) dynamic public var userProfileView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.reloadTableView", message: "This function has been moved to `SBUBaseChannelModule.List`")
  @_Concurrency.MainActor(unsafe) dynamic public func reloadTableView()
  @objc @available(*, deprecated, renamed: "setMessageInputViewMode(_:message:)")
  @_Concurrency.MainActor(unsafe) dynamic public func setEditMode(for userMessage: SendbirdChatSDK.UserMessage?)
  @objc @available(*, deprecated, renamed: "inputComponent.updateMessageInputModeState()", message: "This function has been moved to `SBUBaseChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func updateMessageInputModeState()
  @available(*, deprecated, renamed: "viewModel.channel", message: "This property has been moved to `SBUBaseChannelViewModel`")
  @objc @_Concurrency.MainActor(unsafe) dynamic public var channel: SendbirdChatSDK.BaseChannel? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.channelURL", message: "This property has been moved to `SBUBaseChannelViewModel`")
  @_Concurrency.MainActor(unsafe) dynamic public var channelUrl: Swift.String? {
    @objc get
  }
  @available(*, deprecated, renamed: "viewModel.startingPoint", message: "This property has been moved to `SBUBaseChannelViewModel`")
  @_Concurrency.MainActor(unsafe) public var startingPoint: Swift.Int64? {
    get
  }
  @objc @available(*, deprecated, renamed: "viewModel.inEditingMessage", message: "This property has been moved to `SBUBaseChannelViewModel`")
  @_Concurrency.MainActor(unsafe) dynamic public var inEditingMessage: SendbirdChatSDK.UserMessage? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.messageListParams", message: "This property has been moved to `SBUBaseChannelViewModel`")
  @_Concurrency.MainActor(unsafe) dynamic public var messageListParams: SendbirdChatSDK.MessageListParams {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.customizedMessageListParams", message: "This property has been moved to `SBUBaseChannelViewModel`")
  @_Concurrency.MainActor(unsafe) dynamic public var customizedMessageListParams: SendbirdChatSDK.MessageListParams? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.messageList", message: "This property has been moved to `SBUBaseChannelViewModel`")
  @_Concurrency.MainActor(unsafe) dynamic public var messageList: [SendbirdChatSDK.BaseMessage] {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.fullMessageList", message: "This property has been moved to `SBUBaseChannelViewModel`")
  @_Concurrency.MainActor(unsafe) dynamic public var fullMessageList: [SendbirdChatSDK.BaseMessage] {
    @objc get
  }
  @objc @available(*, unavailable, renamed: "viewModel.loadChannel(channelURL:messageListParams:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadChannel(channelUrl: Swift.String, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @objc @available(*, deprecated, renamed: "viewModel.clearMessageList()", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func clearMessageList()
  @objc @available(*, deprecated, renamed: "viewModel.setReaction(message:emojiKey:didSelect:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func setReaction(message: SendbirdChatSDK.BaseMessage, emojiKey: Swift.String, didSelect: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.updateMessagesInList(messages:needReload:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func updateMessagesInList(messages: [SendbirdChatSDK.BaseMessage]?, needReload: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.upsertMessagesInList(messages:needUpdateNewMessage:needReload:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func upsertMessagesInList(messages: [SendbirdChatSDK.BaseMessage]?, needUpdateNewMessage: Swift.Bool = false, needReload: Swift.Bool)
  @objc @available(*, deprecated, message: "This function has been moved to `SBUBaseChannelViewModel` and replaced to `deleteMessagesInList(messageIds:excludeResendableMessages:needReload:)`.")
  @_Concurrency.MainActor(unsafe) dynamic public func deleteMessagesInList(messageIds: [Swift.Int64]?, needReload: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.deleteMessagesInList(messageIds:excludeResendableMessages:needReload:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func deleteMessagesInList(messageIds: [Swift.Int64]?, excludeResendableMessages: Swift.Bool, needReload: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.deleteResendableMessage(_:needReload:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func deleteResendableMessage(_ message: SendbirdChatSDK.BaseMessage, needReload: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.deleteResendableMessages(requestIds:needReload:)", message: "This function has been moved to `SBUBaseChannelViewModel`")
  @_Concurrency.MainActor(unsafe) dynamic public func deleteResendableMessages(requestIds: [Swift.String], needReload: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.sortAllMessageList(needReload:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func sortAllMessageList(needReload: Swift.Bool)
  @objc @available(*, deprecated, message: "This function has been moved to `SBUBaseChannelViewModel` and replaced to `sendUserMessage(text:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func sendUserMessage(text: Swift.String)
  @objc @available(*, deprecated, message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func sendUserMessage(text: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  @objc @available(*, deprecated, message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func sendUserMessage(messageParams: SendbirdChatSDK.UserMessageCreateParams, parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  @objc @available(*, deprecated, message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func sendFileMessage(fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String)
  @objc @available(*, deprecated, message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func sendFileMessage(fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  @objc @available(*, deprecated, message: "This function has been moved to `SBUBaseChannelViewModel`. Use `sendFileMessage(messageParams:parentMessage:)` of `SBUBaseChannelViewModel` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func sendFileMessage(messageParams: SendbirdChatSDK.FileMessageCreateParams, parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  @objc @available(*, deprecated, renamed: "viewModel.updateUserMessage(message:text:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func updateUserMessage(message: SendbirdChatSDK.UserMessage, text: Swift.String)
  @objc @available(*, deprecated, renamed: "viewModel.updateUserMessage(message:messageParams:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func updateUserMessage(message: SendbirdChatSDK.UserMessage, messageParams: SendbirdChatSDK.UserMessageUpdateParams)
  @objc @available(*, deprecated, renamed: "viewModel.resendMessage(failedMessage:)", message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func resendMessage(failedMessage: SendbirdChatSDK.BaseMessage)
  @objc @available(*, deprecated, renamed: "listComponent.checkSameDayAsNextMessage(currentIndex:fullMessageList:)", message: "This function has been moved to `SBUBaseChannelModule.List` and replaced to `checkSameDayAsNextMessage(currentIndex:fullMessageList:)`.")
  @_Concurrency.MainActor(unsafe) dynamic public func checkSameDayAsNextMessage(currentIndex: Swift.Int) -> Swift.Bool
  @objc @available(*, deprecated, renamed: "showChannelSettings()")
  @_Concurrency.MainActor(unsafe) dynamic public func onClickSetting()
  @available(*, deprecated, renamed: "listComponent.setScrollBottomView(hidden:)", message: "This function has been moved to `SBUBaseChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) public func setScrollBottomView(hidden: Swift.Bool?)
  @objc @available(*, deprecated, renamed: "baseChannelModuleDidTapScrollToButton(_:animated:)", message: "This function has been moved to `SBUBaseChannelModuleListDelegate`.")
  @_Concurrency.MainActor(unsafe) dynamic public func scrollToBottom(animated: Swift.Bool)
}
extension SendbirdUIKit.SBUBaseChannelViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func getAdjustedKeyboardHeight(with keyboardFrame: CoreFoundation.CGRect) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open func getTabBarHeight() -> CoreFoundation.CGFloat
}
extension SendbirdUIKit.SBUBaseChannelViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func registerKeyboardNotifications()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addGestureHideKeyboard()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dismissKeyboard()
  @_Concurrency.MainActor(unsafe) public func setKeyboardWindowFrame(origin: CoreFoundation.CGPoint, size: CoreFoundation.CGSize? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateLayoutsWithKeyboard(isHidden: Swift.Bool, notification: Foundation.Notification)
}
extension SendbirdUIKit.SBUBaseChannelViewController {
  @objc @available(*, unavailable, renamed: "viewModel.didSucceedReconnection()", message: "This function has been moved to `SBUBaseChannelViewModel`")
  @_Concurrency.MainActor(unsafe) dynamic open func didSucceedReconnection()
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDataSource`. Use `baseChannelViewModel(_:isScrollNearBottomInChannel:)` of `SBUBaseChannelViewModelDataSource` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func isScrollNearBottom() -> Swift.Bool
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate`. Use `baseChannelViewModel(_:didChangeChannel:withContext:)` of `SBUBaseChannelViewModelDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelDidChange(_ channel: SendbirdChatSDK.BaseChannel?, context: SendbirdChatSDK.MessageContext)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate`. Use `baseChannelViewModel(_:didReceiveNewMessage:forChannel:)` of `SBUBaseChannelViewModelDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelDidReceiveNewMessage(_ channel: SendbirdChatSDK.BaseChannel, message: SendbirdChatSDK.BaseMessage)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate`. Use `baseChannelViewModel(_:shouldFinishEditModeForChannel:)` of `SBUBaseChannelViewModelDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelShouldFinishEditMode(_ channel: SendbirdChatSDK.BaseChannel)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate`. Use `baseChannelViewModel(_:shouldDismissForChannel:)` of `SBUBaseChannelViewModelDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelShouldDismiss(_ channel: SendbirdChatSDK.BaseChannel?)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate`. Use `baseChannelViewModel(_:didChangeMessageList:needsToReload:initialLoad:)` of `SBUBaseChannelViewModelDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageListDidChange(_ messages: [SendbirdChatSDK.BaseMessage], needToReload: Swift.Bool, isInitialLoad: Swift.Bool)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate`. Use `baseChannelViewModel(_:shouldUpdateScrollInMessageList:forContext:keepsScroll:)` of `SBUBaseChannelViewModelDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageListShouldUpdateScroll(_ messages: [SendbirdChatSDK.BaseMessage], context: SendbirdChatSDK.MessageContext?, keepScroll: Swift.Bool)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate`. Use `baseChannelViewModel(_:didUpdateReaction:forMessage:)` of `SBUBaseChannelViewModelDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func message(_ message: SendbirdChatSDK.BaseMessage, didUpdateReaction reaction: SendbirdChatSDK.ReactionEvent)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUGroupChannelModule.List` (or `SBUOpenChannelModule.List`).")
  @_Concurrency.MainActor(unsafe) dynamic public func getMessageGroupingPosition(currentIndex: Swift.Int) -> SendbirdUIKit.MessageGroupPosition
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleListDelegate`. Use `channelModule(_:didTapMessage:forRowAt:)` of `SBUBaseChannelModuleListDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func setTapGestureHandler(_ cell: UIKit.UITableViewCell, message: SendbirdChatSDK.BaseMessage)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleListDelegate`. Use `channelModule(_:didLongTapMessage:forRowAt:)` of `SBUBaseChannelModuleListDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func setLongTapGestureHandler(_ cell: UIKit.UITableViewCell, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleListDelegate` and replaced to  `baseChannelModule(_:didTapUserProfile:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func setUserProfileTapGestureHandler(_ user: SendbirdUIKit.SBUUser)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUChannelModule.Input`. Use `pickImageFile(info:)` of `SBUChannelModule.Input` instead.")
  @_Concurrency.MainActor(unsafe) dynamic public func sendImageFileMessage(info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc @available(*, unavailable, message: "This function has been moved to `SBUChannelModule.Input`. Use `pickVideoFile(info:)` of `SBUChannelModule.Input` instead.")
  @_Concurrency.MainActor(unsafe) dynamic public func sendVideoFileMessage(info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc @available(*, unavailable, message: "This function has been moved to `SBUChannelModule.Input`. Use `pickDocumentFile(documentURLs:)` of `SBUChannelModule.Input` instead.")
  @_Concurrency.MainActor(unsafe) dynamic public func sendDocumentFileMessage(documentUrls: [Foundation.URL])
  @objc @available(*, unavailable, renamed: "showLoading(_:)")
  @_Concurrency.MainActor(unsafe) dynamic public func setLoading(_ loadingState: Swift.Bool, _ showIndicator: Swift.Bool)
  @available(*, unavailable, renamed: "errorHandler(_:_:)")
  @_Concurrency.MainActor(unsafe) public func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @available(*, unavailable, renamed: "listComponent.didSelectMessage(userId:)")
  @_Concurrency.MainActor(unsafe) dynamic open func didSelectMessage(userId: Swift.String?)
  @objc @available(*, unavailable, renamed: "listComponent.didSelectClose()")
  @_Concurrency.MainActor(unsafe) dynamic open func didSelectClose()
  @objc @available(*, unavailable, renamed: "listComponent.didSelectRetry()")
  @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
  @objc @available(*, unavailable, message: "This function has been moved to `SBUCommonViewModelDelegate`. Use `shouldUpdateLoadingState(_:)` of `SBUCommonViewModelDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @available(*, unavailable, message: "This function has been moved to `SBUCommonViewModelDelegate`. Use `shouldUpdateLoadingState(_:)` of `SBUCommonViewModelDelegate` instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleInputDelegate` and replaced to `baseChannelModule(_:didTapSend:parentMessage:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectSend text: Swift.String)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleInputDelegate` and replaced to `baseChannelModule(_:didTapResource:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectResource type: SendbirdUIKit.MediaResourceType)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleInputDelegate` and replaced to `baseChannelModule(_:didSelectEdit:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectEdit text: Swift.String)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleInputDelegate` and replaced to `baseChannelModule(_:didChangeText:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeText text: Swift.String)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleInputDelegate` and replaced to `baseChannelModule(_:willChangeMode:message:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleInputDelegate` and replaced to `baseChannelModule(_:didChangeMode:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleInputDelegate` and replaced to `baseChannelModuleDidStartTyping(_:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageInputViewDidStartTyping()
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleInputDelegate` and replaced to `baseChannelModuleDidEndTyping(_:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func messageInputViewDidEndTyping()
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.BaseChannel, didReceive message: SendbirdChatSDK.BaseMessage)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUOpenChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.BaseChannel, didUpdate message: SendbirdChatSDK.BaseMessage)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelWasChanged(_ sender: SendbirdChatSDK.BaseChannel)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelWasFrozen(_ sender: SendbirdChatSDK.BaseChannel)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelWasUnfrozen(_ sender: SendbirdChatSDK.BaseChannel)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.BaseChannel, userWasMuted user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.BaseChannel, userWasUnmuted user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelDidUpdateOperators(_ sender: SendbirdChatSDK.BaseChannel)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.OpenChannel, userDidEnter user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.OpenChannel, userDidExit user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelViewModelDelegate` and replaced to `baseChannelViewModel(_:didChangeChannel:withContext:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelWasDeleted(_ channelUrl: Swift.String, channelType: SendbirdChatSDK.ChannelType)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUBaseChannelViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUBaseChannelViewModelDelegate, SendbirdUIKit.SBUBaseChannelModuleHeaderDelegate, SendbirdUIKit.SBUBaseChannelModuleListDelegate, SendbirdUIKit.SBUBaseChannelModuleListDataSource, SendbirdUIKit.SBUBaseChannelModuleInputDelegate, SendbirdUIKit.SBUBaseChannelModuleInputDataSource, SendbirdUIKit.SBUBaseChannelViewModelDataSource, UIKit.UIGestureRecognizerDelegate, UIKit.UIViewControllerTransitioningDelegate, PhotosUI.PHPickerViewControllerDelegate, UIKit.UIImagePickerControllerDelegate, UIKit.UIDocumentPickerDelegate, UIKit.UIDocumentInteractionControllerDelegate, SendbirdUIKit.SBUSelectablePhotoViewDelegate, SendbirdUIKit.SBUFileViewControllerDelegate, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUAlertViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var baseHeaderComponent: SendbirdUIKit.SBUBaseChannelModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var baseListComponent: SendbirdUIKit.SBUBaseChannelModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var baseInputComponent: SendbirdUIKit.SBUBaseChannelModule.Input?
  @objc @_Concurrency.MainActor(unsafe) public var useRightBarButtonItem: Swift.Bool {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var baseViewModel: SendbirdUIKit.SBUBaseChannelViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var channelName: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var isKeyboardShowing: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var messageInputViewBottomConstraint: UIKit.NSLayoutConstraint?
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) public init(baseChannel: SendbirdChatSDK.BaseChannel, messageListParams: SendbirdChatSDK.MessageListParams? = nil, displaysLocalCachedListFirst: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, startingPoint: Swift.Int64? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) public init(channelURL: Swift.String, startingPoint: Swift.Int64? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil, displaysLocalCachedListFirst: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func applicationWillResignActivity()
  @objc @_Concurrency.MainActor(unsafe) open func willPresentSubview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = nil, showIndicator: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = nil, showIndicator: Swift.Bool = true, displaysLocalCachedListFirst: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) public func setupScrollBottomViewStyle(scrollBottomView: UIKit.UIView, theme: SendbirdUIKit.SBUComponentTheme = SBUTheme.componentTheme)
  @objc @_Concurrency.MainActor(unsafe) public func updateChannelTitle()
  @objc @_Concurrency.MainActor(unsafe) public func updateChannelStatus()
  @objc @_Concurrency.MainActor(unsafe) open func showChannelSettings()
  @_Concurrency.MainActor(unsafe) open func showMessageThread(channelURL: Swift.String, parentMessageId: Swift.Int64, parentMessageCreatedAt: Swift.Int64? = 0, startingPoint: Swift.Int64? = 0)
  @objc @_Concurrency.MainActor(unsafe) open func showEmojiListModal(message: SendbirdChatSDK.BaseMessage)
  @_Concurrency.MainActor(unsafe) public func scrollToMessage(id messageId: Swift.Int64, enablesScrollAnimation: Swift.Bool = false, enablesMessageAnimation: Swift.Bool = false, position: SendbirdUIKit.SBUScrollPosition = .middle, needToSearch: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func scrollToMessage(message: SendbirdChatSDK.BaseMessage, enablesScrollAnimation: Swift.Bool = false, enablesMessageAnimation: Swift.Bool = false, position: SendbirdUIKit.SBUScrollPosition = .middle, needToSearch: Swift.Bool = true)
  @objc @_Concurrency.MainActor(unsafe) public func updateNewMessageInfo(hidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func openFile(_ fileData: SendbirdUIKit.SBUFileData)
  @objc @_Concurrency.MainActor(unsafe) open func openFile(fileMessage: SendbirdChatSDK.FileMessage)
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) public func increaseNewMessageCount() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func showUserProfile(user: SendbirdUIKit.SBUUser, isOpenChannel: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) open func setMessageInputViewMode(_ mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func showVoiceMessageInput()
  @objc @_Concurrency.MainActor(unsafe) open func dismissVoiceMessageInput()
  @objc @_Concurrency.MainActor(unsafe) open func resetVoiceMessageInput(for resignActivity: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didReceiveNewMessage message: SendbirdChatSDK.BaseMessage, forChannel channel: SendbirdChatSDK.BaseChannel)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, shouldFinishEditModeForChannel channel: SendbirdChatSDK.BaseChannel)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, shouldDismissForChannel channel: SendbirdChatSDK.BaseChannel?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didChangeMessageList messages: [SendbirdChatSDK.BaseMessage], needsToReload: Swift.Bool, initialLoad: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, deletedMessages messages: [SendbirdChatSDK.BaseMessage])
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, shouldUpdateScrollInMessageList messages: [SendbirdChatSDK.BaseMessage], forContext context: SendbirdChatSDK.MessageContext?, keepsScroll: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didUpdateReaction reaction: SendbirdChatSDK.ReactionEvent, forMessage message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) public func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) public func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapMessage message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didLongTapMessage message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapVoiceMessage fileMessage: SendbirdChatSDK.FileMessage, cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapSaveMessage message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapCopyMessage message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapEditMessage message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapDeleteMessage message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapReplyMessage message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didDismissMenuForCell cell: UIKit.UITableViewCell)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapMoreEmojisOnMessage message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didFailScrollToMessageId messageId: Swift.Int64, needToSearch: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didFailScrollToMessage message: SendbirdChatSDK.BaseMessage, needToSearch: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didReactToMessage message: SendbirdChatSDK.BaseMessage, withEmoji key: Swift.String, selected: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapRetryFailedMessage failedMessage: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapDeleteFailedMessage failedMessage: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapUserProfile user: SendbirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didScroll scrollView: UIKit.UIScrollView)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModuleDidTapScrollToButton(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didSelectScrollToBottonWithOptions options: SendbirdUIKit.SBUScrollOptions, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, channelForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.BaseChannel?
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, sentMessagesInTableView tableView: UIKit.UITableView) -> [SendbirdChatSDK.BaseMessage]
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, fullMessagesInTableView tableView: UIKit.UITableView) -> [SendbirdChatSDK.BaseMessage]
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, hasNextInTableView tableView: UIKit.UITableView) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, lastSeenIndexPathIn tableView: UIKit.UITableView) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, startingPointIn tableView: UIKit.UITableView) -> Swift.Int64?
  @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, parentViewControllerDisplayMenuItems menuItems: [SendbirdUIKit.SBUMenuItem]) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, pendingMessageManagerForCell cell: UIKit.UITableViewCell) -> (SendbirdUIKit.SBUPendingMessageManager?, Swift.Bool?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didUpdateFrozenState isFrozen: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModuleDidStartTyping(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModuleDidEndTyping(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModuleDidTapAdd(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didTapSend text: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didTapResource type: SendbirdUIKit.MediaResourceType)
  @objc @_Concurrency.MainActor(unsafe) open func showDocumentPicker()
  @objc @_Concurrency.MainActor(unsafe) open func showLimitedPhotoLibraryPicker()
  @objc @_Concurrency.MainActor(unsafe) open func showPhotoLibraryPicker()
  @objc @_Concurrency.MainActor(unsafe) open func showCamera()
  @_Concurrency.MainActor(unsafe) open func showPermissionAlert(forType permissionType: SendbirdUIKit.SBUPermissionManager.PermissionType = .photoLibrary)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didTapEdit text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didChangeText text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, channelForInputView messageInputView: UIKit.UIView?) -> SendbirdChatSDK.BaseChannel?
  @objc @_Concurrency.MainActor(unsafe) open func keyboardWillShow(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) open func keyboardWillHide(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, isScrollNearBottomInChannel channel: SendbirdChatSDK.BaseChannel?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @_Concurrency.MainActor(unsafe) @objc open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @available(iOS 14, *)
  @_Concurrency.MainActor(unsafe) open func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
  @_Concurrency.MainActor(unsafe) @objc open func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor(unsafe) @objc open func documentInteractionControllerViewControllerForPreview(_ controller: UIKit.UIDocumentInteractionController) -> UIKit.UIViewController
  @objc @_Concurrency.MainActor(unsafe) open func didTapSendImageData(_ data: Foundation.Data, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func didTapSendVideoURL(_ url: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) open func didSelectDeleteImage(message: SendbirdChatSDK.FileMessage)
  @objc @_Concurrency.MainActor(unsafe) open func didDismissAlertView()
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @available(*, unavailable, message: "Please use `SBUMenuItem` and  `createMessageMenuItems(for:)` in `SBUBaseChannelModule.List` instead.")
  @_Concurrency.MainActor(unsafe) public func createMessageMenuTypes(_ cell: UIKit.UITableViewCell, message: SendbirdChatSDK.BaseMessage) -> [SendbirdUIKit.MessageMenuItem]?
  @objc @available(*, deprecated, message: "Please use `showMessageMenuSheet(for:cell:)` in `SBUBaseChannelModule.List` instead.")
  @_Concurrency.MainActor(unsafe) public func showMenuViewController(_ cell: UIKit.UITableViewCell, message: SendbirdChatSDK.BaseMessage)
  @available(*, unavailable, message: "Please use `showMessageMenuSheet(for:cell:)` and `createMessageMenuItems(for:)` in `SBUBaseChannelModule.List` instead.")
  @_Concurrency.MainActor(unsafe) public func showMenuViewController(_ cell: UIKit.UITableViewCell, message: SendbirdChatSDK.BaseMessage, types: [SendbirdUIKit.MessageMenuItem]?)
  @objc @available(*, deprecated, message: "Please use  `showMessageContextMenu(for:cell:forRowAt:)` in `SBUBaseChannelModule.List` instead.")
  @_Concurrency.MainActor(unsafe) open func showMenuModal(_ cell: UIKit.UITableViewCell, indexPath: Foundation.IndexPath, message: SendbirdChatSDK.BaseMessage)
  @available(*, deprecated, message: "Please use  `showMessageContextMenu(for:cell:forRowAt:)` in `SBUBaseChannelModule.List` instead.")
  @_Concurrency.MainActor(unsafe) public func showMenuModal(_ cell: UIKit.UITableViewCell, indexPath: Foundation.IndexPath, message: SendbirdChatSDK.BaseMessage, types: [SendbirdUIKit.MessageMenuItem]?)
  @objc @available(*, deprecated, message: "Please use `showFailedMessageMenu(on:)` in `SBUBaseChannelModule.List`")
  @_Concurrency.MainActor(unsafe) public func showFailedMessageMenu(message: SendbirdChatSDK.BaseMessage)
  @available(*, deprecated, message: "Please use `showDeleteMessageAlert(on:oneTimeTheme:)` in `SBUBaseChannelModule.List`")
  @_Concurrency.MainActor(unsafe) public func showDeleteMessageMenu(message: SendbirdChatSDK.BaseMessage, oneTimetheme: SendbirdUIKit.SBUComponentTheme? = nil)
}
public protocol SBUBaseChannelViewModelDataSource : AnyObject {
  func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, isScrollNearBottomInChannel channel: SendbirdChatSDK.BaseChannel?) -> Swift.Bool
}
public protocol SBUBaseChannelViewModelDelegate : SendbirdUIKit.SBUCommonViewModelDelegate {
  func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didReceiveNewMessage message: SendbirdChatSDK.BaseMessage, forChannel channel: SendbirdChatSDK.BaseChannel)
  func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, shouldFinishEditModeForChannel channel: SendbirdChatSDK.BaseChannel)
  func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, shouldDismissForChannel channel: SendbirdChatSDK.BaseChannel?)
  func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didChangeMessageList messages: [SendbirdChatSDK.BaseMessage], needsToReload: Swift.Bool, initialLoad: Swift.Bool)
  func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, deletedMessages messages: [SendbirdChatSDK.BaseMessage])
  func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, shouldUpdateScrollInMessageList messages: [SendbirdChatSDK.BaseMessage], forContext context: SendbirdChatSDK.MessageContext?, keepsScroll: Swift.Bool)
  func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didUpdateReaction reaction: SendbirdChatSDK.ReactionEvent, forMessage message: SendbirdChatSDK.BaseMessage)
}
@objc @_inheritsConvenienceInitializers open class SBUBaseChannelViewModel : ObjectiveC.NSObject {
  public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  public var channelURL: Swift.String? {
    get
  }
  public var startingPoint: Swift.Int64? {
    get
  }
  public var inEditingMessage: SendbirdChatSDK.UserMessage? {
    get
  }
  @SendbirdUIKit.SBUAtomic public var messageList: [SendbirdChatSDK.BaseMessage] {
    get
  }
  @SendbirdUIKit.SBUAtomic public var fullMessageList: [SendbirdChatSDK.BaseMessage] {
    get
  }
  public var isOperator: Swift.Bool {
    get
  }
  public var customizedMessageListParams: SendbirdChatSDK.MessageListParams?
  public var messageListParams: SendbirdChatSDK.MessageListParams {
    get
  }
  public var sendFileMessageCompletionHandler: SendbirdChatSDK.FileMessageHandler?
  public var sendUserMessageCompletionHandler: SendbirdChatSDK.UserMessageHandler?
  public var pendingMessageManager: SendbirdUIKit.SBUPendingMessageManager
  public var typingMessageManager: SendbirdUIKit.SBUTypingIndicatorMessageManager
  @objc override dynamic public init()
  @objc deinit
  public func loadChannel(channelURL: Swift.String, messageListParams: SendbirdChatSDK.MessageListParams? = nil, completionHandler: ((SendbirdChatSDK.BaseChannel?, SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  public func refreshChannel()
  public func loadInitialMessages(startingPoint: Swift.Int64?, showIndicator: Swift.Bool, initialMessages: [SendbirdChatSDK.BaseMessage]?)
  public func loadPrevMessages()
  public func loadNextMessages()
  public func reloadMessageList()
  open func sendUserMessage(text: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  open func sendUserMessage(text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String], parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  open func sendUserMessage(messageParams: SendbirdChatSDK.UserMessageCreateParams, parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  open func sendFileMessage(fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  open func sendVoiceMessage(voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo, parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  open func sendFileMessage(messageParams: SendbirdChatSDK.FileMessageCreateParams, parentMessage: SendbirdChatSDK.BaseMessage? = nil)
  public func updateUserMessage(message: SendbirdChatSDK.UserMessage, text: Swift.String)
  open func updateUserMessage(message: SendbirdChatSDK.UserMessage, text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
  public func updateUserMessage(message: SendbirdChatSDK.UserMessage, messageParams: SendbirdChatSDK.UserMessageUpdateParams)
  public func resendMessage(failedMessage: SendbirdChatSDK.BaseMessage)
  public func deleteMessage(message: SendbirdChatSDK.BaseMessage)
  public func updateMessagesInList(messages: [SendbirdChatSDK.BaseMessage]?, needReload: Swift.Bool)
  public func upsertMessagesInList(messages: [SendbirdChatSDK.BaseMessage]?, needUpdateNewMessage: Swift.Bool = false, needReload: Swift.Bool)
  public func deleteMessagesInList(messageIds: [Swift.Int64]?, needReload: Swift.Bool)
  public func deleteMessagesInList(messageIds: [Swift.Int64]?, excludeResendableMessages: Swift.Bool, needReload: Swift.Bool)
  public func deleteResendableMessage(_ message: SendbirdChatSDK.BaseMessage, needReload: Swift.Bool)
  public func deleteResendableMessages(requestIds: [Swift.String], needReload: Swift.Bool)
  public func sortAllMessageList(needReload: Swift.Bool)
  public func clearMessageList()
  public func setReaction(message: SendbirdChatSDK.BaseMessage, emojiKey: Swift.String, didSelect: Swift.Bool)
  public func hasNext() -> Swift.Bool
  public func hasPrevious() -> Swift.Bool
  public func getStartingPoint() -> Swift.Int64?
}
extension SendbirdUIKit.SBUBaseChannelViewModel : SendbirdChatSDK.ConnectionDelegate {
  @objc dynamic open func didSucceedReconnection()
}
extension SendbirdUIKit.SBUBaseChannelViewModel : SendbirdChatSDK.BaseChannelDelegate {
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceive message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdate message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdateThreadInfo threadInfoUpdateEvent: SendbirdChatSDK.ThreadInfoUpdateEvent)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedReaction reactionEvent: SendbirdChatSDK.ReactionEvent)
  @objc dynamic open func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelWasFrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelWasUnfrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasMuted user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnmuted user: SendbirdChatSDK.User)
  @objc dynamic open func channelDidUpdateOperators(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnbanned user: SendbirdChatSDK.User)
  @objc dynamic open func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUBaseFileContentView : SendbirdUIKit.SBUView {
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var message: SendbirdChatSDK.FileMessage!
  @_Concurrency.MainActor(unsafe) public var position: SendbirdUIKit.MessagePosition
  @_Concurrency.MainActor(unsafe) open func configure(message: SendbirdChatSDK.FileMessage, position: SendbirdUIKit.MessagePosition)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension SendbirdUIKit.SBUBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateFeedbackView(with message: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func createFeedbackView() -> SendbirdUIKit.SBUFeedbackView
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUBaseMessageCell : SendbirdUIKit.SBUTableViewCell, SendbirdUIKit.SBUMessageCellProtocol, SendbirdUIKit.SBUFeedbackViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var message: SendbirdChatSDK.BaseMessage?
  @objc @_Concurrency.MainActor(unsafe) public var position: SendbirdUIKit.MessagePosition
  @objc @_Concurrency.MainActor(unsafe) public var groupPosition: SendbirdUIKit.MessageGroupPosition
  @objc @_Concurrency.MainActor(unsafe) public var receiptState: SendbirdUIKit.SBUMessageReceiptState
  @objc @_Concurrency.MainActor(unsafe) public var messageContentView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var dateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var stackViewTopConstraint: UIKit.NSLayoutConstraint?
  @objc @_Concurrency.MainActor(unsafe) public var shouldHideFeedback: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var feedbackView: SendbirdUIKit.SBUFeedbackView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isMessyViewHierarchy: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func updateTopAnchorConstraint()
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  @_Concurrency.MainActor(unsafe) open func configure(highlightInfo: SendbirdUIKit.SBUHighlightMessageInfo?)
  @objc @available(*, deprecated, renamed: "configure(message:configuration:)")
  @_Concurrency.MainActor(unsafe) open func configure(message: SendbirdChatSDK.BaseMessage, position: SendbirdUIKit.MessagePosition, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition = .none, receiptState: SendbirdUIKit.SBUMessageReceiptState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) open func feedbackView(_ view: SendbirdUIKit.SBUFeedbackView, didAnswer answer: SendbirdUIKit.SBUFeedbackAnswer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SendbirdUIKit.SBUBaseMessageCellParams {
  @available(*, deprecated, renamed: "useQuotedMessage")
  public var usingQuotedMessage: Swift.Bool {
    get
  }
}
public class SBUBaseMessageCellParams {
  final public let message: SendbirdChatSDK.BaseMessage
  final public let hideDateView: Swift.Bool
  final public let messagePosition: SendbirdUIKit.MessagePosition
  final public let groupPosition: SendbirdUIKit.MessageGroupPosition
  final public let receiptState: SendbirdUIKit.SBUMessageReceiptState
  public var useQuotedMessage: Swift.Bool {
    get
  }
  public var useThreadInfo: Swift.Bool {
    get
  }
  public var joinedAt: Swift.Int64 {
    get
  }
  public var messageOffsetTimestamp: Swift.Int64 {
    get
  }
  public var useOnlyFromView: Swift.Bool {
    get
  }
  public var shouldHideFeedback: Swift.Bool
  public init(message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool, messagePosition: SendbirdUIKit.MessagePosition = .center, groupPosition: SendbirdUIKit.MessageGroupPosition = .none, receiptState: SendbirdUIKit.SBUMessageReceiptState = .none, isThreadMessage: Swift.Bool = false, joinedAt: Swift.Int64 = 0, shouldHideFeedback: Swift.Bool = true, messageOffsetTimestamp: Swift.Int64 = 0)
  @objc deinit
}
public protocol SBUBaseSelectUserModuleHeaderDelegate : SendbirdUIKit.SBUCommonDelegate {
}
public protocol SBUBaseSelectUserModuleHeaderDataSource : AnyObject {
  func selectedUsersForBaseSelectUserModule(_ headerComponent: SendbirdUIKit.SBUBaseSelectUserModule.Header) -> Swift.Set<SendbirdUIKit.SBUUser>?
}
extension SendbirdUIKit.SBUBaseSelectUserModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUUserListTheme?
    @_Concurrency.MainActor(unsafe) public var componentTheme: SendbirdUIKit.SBUComponentTheme?
    @objc @_Concurrency.MainActor(unsafe) public var selectedUserList: Swift.Set<SendbirdUIKit.SBUUser>? {
      @objc get
    }
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUUserListTheme? = nil, componentTheme: SendbirdUIKit.SBUComponentTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func updateRightBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func onTapRightBarButton()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  }
}
public protocol SBUBaseSelectUserModuleListDelegate : SendbirdUIKit.SBUCommonDelegate {
}
public protocol SBUBaseSelectUserModuleListDataSource : AnyObject {
  func baseSelectUserModule(_ listComponent: SendbirdUIKit.SBUBaseSelectUserModule.List, usersInTableView tableView: UIKit.UITableView) -> [SendbirdUIKit.SBUUser]?
  func baseSelectUserModule(_ listComponent: SendbirdUIKit.SBUBaseSelectUserModule.List, selectedUsersInTableView tableView: UIKit.UITableView) -> Swift.Set<SendbirdUIKit.SBUUser>?
}
extension SendbirdUIKit.SBUBaseSelectUserModule {
  @_inheritsConvenienceInitializers @objc(SBUBaseChannelSettingsModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var userCell: UIKit.UITableViewCell?
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUUserListTheme?
    @_Concurrency.MainActor(unsafe) weak public var baseDelegate: (any SendbirdUIKit.SBUBaseSelectUserModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var baseDataSource: (any SendbirdUIKit.SBUBaseSelectUserModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var userList: [SendbirdUIKit.SBUUser]? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var selectedUserList: Swift.Set<SendbirdUIKit.SBUUser>? {
      @objc get
    }
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUUserListTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func isSelectedUser(_ user: SendbirdUIKit.SBUUser) -> Swift.Bool
    @objc @_Concurrency.MainActor(unsafe) public func register(userCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @_Concurrency.MainActor(unsafe) public func updateEmptyView(type: SendbirdUIKit.EmptyViewType)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  }
}
extension SendbirdUIKit.SBUBaseSelectUserModule.List : SendbirdUIKit.SBUEmptyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
}
extension SendbirdUIKit.SBUBaseSelectUserModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@_hasMissingDesignatedInitializers open class SBUBaseSelectUserModule {
  @objc deinit
}
extension SendbirdUIKit.SBUBaseSelectUserViewController {
  @objc @available(*, deprecated, renamed: "channelURL")
  @_Concurrency.MainActor(unsafe) dynamic public var channelUrl: Swift.String? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "headerComponent.titleView", message: "This property has been moved to the `SBUBaseSelectUserModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.leftBarButton", message: "This property has been moved to the `SBUBaseSelectUserModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.rightBarButton", message: "This property has been moved to the `SBUBaseSelectUserModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.tableView", message: "This property has been moved to the `SBUBaseSelectUserModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var tableView: UIKit.UITableView? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.userCell", message: "This property has been moved to the `SBUBaseSelectUserModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var userCell: UIKit.UITableViewCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.emptyView", message: "This property has been moved to the `SBUBaseSelectUserModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "viewModel.joinedUserIds", message: "This property has been moved to the `SBUBaseSelectUserViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var joinedUserIds: Swift.Set<Swift.String> {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.userListQuery", message: "This property has been moved to the `SBUBaseSelectUserViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var userListQuery: SendbirdChatSDK.ApplicationUserListQuery? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.memberListQuery", message: "This property has been moved to the `SBUBaseSelectUserViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var memberListQuery: SendbirdChatSDK.MemberListQuery? {
    @objc get
  }
  @available(*, deprecated, renamed: "viewModel.inviteListType", message: "This property has been moved to the `SBUBaseSelectUserViewModel`.")
  @_Concurrency.MainActor(unsafe) public var inviteListType: SendbirdUIKit.ChannelInviteListType {
    get
  }
  @available(*, unavailable, message: "If you want to invite a user, use `init(channel:)` on `SBUInviteUserViewController` class, \nor if you want to register as operator a member, use `init(channel:)` on `SBURegisterOperatorViewController` class.")
  @_Concurrency.MainActor(unsafe) convenience public init(channel: SendbirdChatSDK.GroupChannel, type: SendbirdUIKit.ChannelInviteListType)
  @available(*, unavailable, message: "If you want to invite a user, use `init(channelURL:)` on `SBUInviteUserViewController` class,\nor if you want to register as operator a member, use `init(channelURL:)` on `SBURegisterOperatorViewController` class.")
  @_Concurrency.MainActor(unsafe) convenience public init(channelUrl: Swift.String, type: SendbirdUIKit.ChannelInviteListType)
  @available(*, unavailable, message: "If you want to invite a user, use `init(channel:users:)` on `SBUInviteUserViewController` class,\nor if you want to register as operator a member, use `init(channel:users:)` on `SBURegisterOperatorViewController` class.")
  @_Concurrency.MainActor(unsafe) convenience public init(channel: SendbirdChatSDK.GroupChannel, users: [SendbirdUIKit.SBUUser], type: SendbirdUIKit.ChannelInviteListType)
  @available(*, unavailable, message: "If you want to invite a user, use `init(channelURL:users:)` on `SBUInviteUserViewController` class,\nor if you want to register as operator a member, use `init(channelURL:users:)` on `SBURegisterOperatorViewController` class.")
  @_Concurrency.MainActor(unsafe) convenience public init(channelUrl: Swift.String, users: [SendbirdUIKit.SBUUser], type: SendbirdUIKit.ChannelInviteListType)
  @objc @available(*, unavailable, message: "If you want to invite a user, use `inviteSelectedUsers()` on `SBUInviteUserViewController` class,\nor if you want to register as operator a member, use `registerSelectedUsers()` on `SBURegisterOperatorViewController` class.")
  @_Concurrency.MainActor(unsafe) dynamic public func onClickInviteOrPromote()
  @objc @available(*, deprecated, renamed: "viewModel.resetUserList()", message: "This function has been moved to the `SBUBaseSelectUserViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func resetUserList()
  @objc @available(*, deprecated, renamed: "viewModel.loadChannel(channelURL:type:)", message: "This function has been moved to the `SBUBaseSelectUserViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadChannel(channelUrl: Swift.String?)
  @objc @available(*, deprecated, renamed: "viewModel.loadNextUserList(reset:users:)", message: "This function has been moved to the `SBUBaseSelectUserViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadNextUserList(reset: Swift.Bool, users: [SendbirdUIKit.SBUUser]? = nil)
  @objc @available(*, unavailable, renamed: "inviteSelectedUsers()", message: "This function set and renamed on `SBUInviteUserViewController` class.")
  @_Concurrency.MainActor(unsafe) dynamic public func inviteUsers()
  @objc @available(*, unavailable, renamed: "viewModel.invite(userIds:)", message: "This function has been moved to the `SBUInviteUserViewModel` class.")
  @_Concurrency.MainActor(unsafe) dynamic public func inviteUsers(userIds: [Swift.String])
  @objc @available(*, unavailable, renamed: "registerSelectedUsers()", message: "This function set and renamed on `SBURegisterOperatorViewController` class.")
  @_Concurrency.MainActor(unsafe) dynamic public func promoteToOperators()
  @objc @available(*, unavailable, renamed: "viewModel.registerAsOperators(userIds:)", message: "This function has been moved to the `SBURegisterOperatorViewModel` class.")
  @_Concurrency.MainActor(unsafe) dynamic public func promoteToOperators(memberIds: [Swift.String])
  @objc @available(*, deprecated, renamed: "viewModel.selectUser(user:)", message: "This function has been moved to the `SBUBaseSelectUserViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func selectUser(user: SendbirdUIKit.SBUUser)
  @objc @available(*, deprecated, renamed: "listComponent.register(userCell:nib:)", message: "This function has been moved to the `SBUBaseSelectUserModule.List`.`")
  @_Concurrency.MainActor(unsafe) dynamic public func register(userCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.reloadTableView()", message: "This function has been moved to the `SBUBaseSelectUserModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func reloadData()
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
  @available(*, unavailable, renamed: "errorHandler(_:_:)")
  @_Concurrency.MainActor(unsafe) public func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUBaseSelectUserViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUBaseSelectUserModuleHeaderDataSource, SendbirdUIKit.SBUBaseSelectUserModuleListDataSource, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUBaseSelectUserViewModelDataSource, SendbirdUIKit.SBUBaseSelectUserViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var baseHeaderComponent: SendbirdUIKit.SBUBaseSelectUserModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var baseListComponent: SendbirdUIKit.SBUBaseSelectUserModule.List?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUUserListTheme {
    get
    set
    _modify
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var componentTheme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var baseViewModel: SendbirdUIKit.SBUBaseSelectUserViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelURL: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelType: SendbirdChatSDK.ChannelType {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userList: [SendbirdUIKit.SBUUser] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var selectedUserList: Swift.Set<SendbirdUIKit.SBUUser> {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, channelType: SendbirdChatSDK.ChannelType = .group, users: [SendbirdUIKit.SBUUser]? = nil)
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func popToChannel()
  @objc @_Concurrency.MainActor(unsafe) public func popToPrevious()
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func selectedUsersForBaseSelectUserModule(_ headerComponent: SendbirdUIKit.SBUBaseSelectUserModule.Header) -> Swift.Set<SendbirdUIKit.SBUUser>?
  @objc @_Concurrency.MainActor(unsafe) open func baseSelectUserModule(_ listComponent: SendbirdUIKit.SBUBaseSelectUserModule.List, usersInTableView tableView: UIKit.UITableView) -> [SendbirdUIKit.SBUUser]?
  @objc @_Concurrency.MainActor(unsafe) open func baseSelectUserModule(_ listComponent: SendbirdUIKit.SBUBaseSelectUserModule.List, selectedUsersInTableView tableView: UIKit.UITableView) -> Swift.Set<SendbirdUIKit.SBUUser>?
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func nextUserList() -> [SendbirdUIKit.SBUUser]?
  @objc @_Concurrency.MainActor(unsafe) open func baseSelectedUserViewModel(_ viewModel: SendbirdUIKit.SBUBaseSelectUserViewModel, didChangeUserList users: [SendbirdUIKit.SBUUser]?, needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func baseSelectedUserViewModel(_ viewModel: SendbirdUIKit.SBUBaseSelectUserViewModel, didUpdateSelectedUsers selectedUsers: [SendbirdUIKit.SBUUser]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol SBUBaseSelectUserViewModelDelegate : SendbirdUIKit.SBUCommonViewModelDelegate {
  func baseSelectedUserViewModel(_ viewModel: SendbirdUIKit.SBUBaseSelectUserViewModel, didChangeUserList users: [SendbirdUIKit.SBUUser]?, needsToReload: Swift.Bool)
  func baseSelectedUserViewModel(_ viewModel: SendbirdUIKit.SBUBaseSelectUserViewModel, didUpdateSelectedUsers selectedUsers: [SendbirdUIKit.SBUUser]?)
}
public protocol SBUBaseSelectUserViewModelDataSource : AnyObject {
  func nextUserList() -> [SendbirdUIKit.SBUUser]?
}
@objc open class SBUBaseSelectUserViewModel : ObjectiveC.NSObject {
  public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  public var channelURL: Swift.String? {
    get
  }
  public var channelType: SendbirdChatSDK.ChannelType {
    get
  }
  @SendbirdUIKit.SBUAtomic public var userList: [SendbirdUIKit.SBUUser] {
    get
  }
  @SendbirdUIKit.SBUAtomic public var selectedUserList: Swift.Set<SendbirdUIKit.SBUUser> {
    get
  }
  public var userListQuery: SendbirdChatSDK.ApplicationUserListQuery?
  public var memberListQuery: SendbirdChatSDK.MemberListQuery?
  public var participantListQuery: SendbirdChatSDK.ParticipantListQuery?
  public var inviteListType: SendbirdUIKit.ChannelInviteListType {
    get
  }
  public var joinedUserIds: Swift.Set<Swift.String> {
    get
  }
  public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, channelType: SendbirdChatSDK.ChannelType = .group, users: [SendbirdUIKit.SBUUser]? = nil, inviteListType: SendbirdUIKit.ChannelInviteListType, userListQuery: SendbirdChatSDK.ApplicationUserListQuery? = nil, memberListQuery: SendbirdChatSDK.MemberListQuery? = nil, participantListQuery: SendbirdChatSDK.ParticipantListQuery? = nil, delegate: (any SendbirdUIKit.SBUBaseSelectUserViewModelDelegate)? = nil, dataSource: (any SendbirdUIKit.SBUBaseSelectUserViewModelDataSource)? = nil)
  public func loadChannel(channelURL: Swift.String, type: SendbirdChatSDK.ChannelType)
  public func loadNextUserList(reset: Swift.Bool, users: [SendbirdUIKit.SBUUser]? = nil)
  public func preLoadNextUserList(indexPath: Foundation.IndexPath)
  public func resetUserList()
  public func selectUser(user: SendbirdUIKit.SBUUser)
  @objc deinit
}
extension SendbirdUIKit.SBUBaseViewController {
  @objc @available(*, unavailable, renamed: "setupLayouts()")
  @_Concurrency.MainActor(unsafe) dynamic open func setupAutolayout()
  @objc @available(*, unavailable, renamed: "updateLayouts()")
  @_Concurrency.MainActor(unsafe) dynamic open func updateAutolayout()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUBaseViewController : UIKit.UIViewController, UIKit.UINavigationControllerDelegate, SendbirdUIKit.SBULoadingIndicatorProtocol {
  @objc @_Concurrency.MainActor(unsafe) public var needRollbackNavigationBarSetting: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
  @objc @_Concurrency.MainActor(unsafe) open func updateLayouts()
  @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func updateStyles(needsToLayout: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func setupNavigationBar(backgroundColor: UIKit.UIColor, shadowColor: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) open func onClickBack()
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @_Concurrency.MainActor(unsafe) @objc open func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func showLoading(_ isLoading: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum SBUBottomSheetSnapPoint {
  case top
  case middle
  case close
  public static func == (a: SendbirdUIKit.SBUBottomSheetSnapPoint, b: SendbirdUIKit.SBUBottomSheetSnapPoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SBUBottomSheetControllerDelegate : AnyObject {
  func bottomSheet(moveTo position: SendbirdUIKit.SBUBottomSheetSnapPoint)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBUBottomSheetController : UIKit.UIPresentationController {
  @_Concurrency.MainActor(unsafe) weak public var bottomSheetDelegate: (any SendbirdUIKit.SBUBottomSheetControllerDelegate)?
  @_Concurrency.MainActor(unsafe) public var blurEffectStyle: UIKit.UIBlurEffect.Style?
  @_Concurrency.MainActor(unsafe) public var contentHeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEnableTop: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isEnableMiddle: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var bounce: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var roundedCorners: UIKit.UIRectCorner
  @_Concurrency.MainActor(unsafe) public var currentSnapPoint: SendbirdUIKit.SBUBottomSheetSnapPoint {
    get
  }
  @_Concurrency.MainActor(unsafe) public var panGesture: UIKit.UIPanGestureRecognizer {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(presentedViewController: UIKit.UIViewController, presenting presentingViewController: UIKit.UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func dismissalTransitionWillBegin()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frameOfPresentedViewInContainerView: CoreFoundation.CGRect {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func presentationTransitionWillBegin()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func presentationTransitionDidEnd(_ completed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func containerViewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func containerViewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor(unsafe) public func dismiss()
  @objc @_Concurrency.MainActor(unsafe) public func drag(_ gesture: UIKit.UIPanGestureRecognizer)
  @_Concurrency.MainActor(unsafe) public func sendToTop()
  @_Concurrency.MainActor(unsafe) public func sendToMiddle()
  @objc deinit
}
@available(*, deprecated, message: "We can't guarantee the problems that occur with direct access to DiskCache and handling data.")
public struct DiskCache {
  public init()
  public func hasImage(key: Swift.String) -> Swift.Bool
  public func get(key: Swift.String) -> Foundation.NSData?
  public func set(key: Swift.String, data: Foundation.NSData)
  public func rename(key: Swift.String, newKey: Swift.String)
  public func remove(key: Swift.String)
  public func removeAll()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUCategoryFilterCell : UIKit.UICollectionViewCell, SendbirdUIKit.SBUViewLifeCycle {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc public func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc public func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc public func setupActions()
  @objc deinit
}
public protocol SBUChannelInfoHeaderViewDelegate : AnyObject {
  func didSelectChannelInfo()
  func didSelectChannelMembers()
  func didSelectChannelParticipants()
}
extension SendbirdUIKit.SBUChannelInfoHeaderViewDelegate {
  public func didSelectChannelInfo()
  public func didSelectChannelMembers()
  public func didSelectChannelParticipants()
}
@objc @_Concurrency.MainActor(unsafe) open class SBUChannelInfoHeaderView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var coverImage: SendbirdUIKit.SBUCoverImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var descriptionLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var infoButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public init(delegate: (any SendbirdUIKit.SBUChannelInfoHeaderViewDelegate)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "SBUChannelInfoHeaderView()")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) public func setupInfoButtonStyle()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func configure(channel: SendbirdChatSDK.BaseChannel?, description: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func loadCoverImage()
  @objc @_Concurrency.MainActor(unsafe) public func onClickChannelInfo()
  @objc @_Concurrency.MainActor(unsafe) public func onClickChannelMembers()
  @objc @_Concurrency.MainActor(unsafe) public func onClickChannelParticipants()
  @objc deinit
}
@available(*, deprecated, renamed: "SBUGroupChannelListViewController")
public typealias SBUChannelListViewController = SendbirdUIKit.SBUGroupChannelListViewController
extension SendbirdUIKit.SBUGroupChannelListViewController {
  @objc @available(*, deprecated, renamed: "headerComponent.titleView", message: "This property has been moved to the `SBUGroupChannelListModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.leftBarButton", message: "This property has been moved to the `SBUGroupChannelListModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.rightBarButton", message: "This property has been moved to the `SBUGroupChannelListModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.tableView", message: "This property has been moved to the `SBUGroupChannelListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var tableView: UIKit.UITableView? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.channelCell", message: "This property has been moved to the `SBUGroupChannelListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var channelCell: SendbirdUIKit.SBUBaseChannelCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.customCell", message: "This property has been moved to the `SBUGroupChannelListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var customCell: SendbirdUIKit.SBUBaseChannelCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.emptyView", message: "This property has been moved to the `SBUGroupChannelListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "viewModel.channelListQuery", message: "This property has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var channelListQuery: SendbirdChatSDK.GroupChannelListQuery? {
    @objc get
  }
  @objc @available(*, unavailable, message: "Since it automatically manages internally, it is no longer necessary.")
  @_Concurrency.MainActor(unsafe) dynamic public var isLoading: Swift.Bool {
    @objc get
  }
  @objc @available(*, unavailable, message: "Since it automatically manages internally, it is no longer necessary.")
  @_Concurrency.MainActor(unsafe) dynamic public var lastUpdatedTimestamp: Swift.Int64 {
    @objc get
  }
  @objc @available(*, unavailable, message: "Since it automatically manages internally, it is no longer necessary.")
  @_Concurrency.MainActor(unsafe) dynamic public var lastUpdatedToken: Swift.String? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "SBUGroupChannelListViewModel.channelLoadLimit", message: "This property has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var limit: Swift.UInt {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.channelListQuery.includeEmptyChannel", message: "This property has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var includeEmptyChannel: Swift.Bool {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.initChannelList()", message: "This function has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func initChannelList()
  @objc @available(*, deprecated, renamed: "viewModel.changePushTriggerOption(option:channel:completionHandler:)", message: "This function has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func changePushTriggerOption(option: SendbirdChatSDK.GroupChannelPushTriggerOption, channel: SendbirdChatSDK.GroupChannel, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @available(*, deprecated, renamed: "viewModel.leaveChannel(_:completionHandler:)", message: "This function has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func leaveChannel(_ channel: SendbirdChatSDK.GroupChannel, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @available(*, deprecated, renamed: "viewModel.reset()", message: "This function has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func resetChannelList()
  @objc @available(*, deprecated, renamed: "viewModel.loadNextChannelList(reset:)", message: "This function has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadNextChannelList(reset: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.sortChannelList(needReload:)", message: "This function has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func sortChannelList(needReload: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.updateChannels(_:needReload:)", message: "This function has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func updateChannels(_ channels: [SendbirdChatSDK.GroupChannel]?, needReload: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.upsertChannels(_:needReload:)", message: "This function has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func upsertChannels(_ channels: [SendbirdChatSDK.GroupChannel]?, needReload: Swift.Bool)
  @objc @available(*, deprecated, renamed: "viewModel.deleteChannels(channelURLs:needReload:)", message: "This function has been moved to the `SBUGroupChannelListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func deleteChannels(channelUrls: [Swift.String]?, needReload: Swift.Bool)
  @objc @available(*, deprecated, renamed: "listComponent.register(channelCell:nib:)", message: "This function has been moved to the `SBUGroupChannelListModule.List`.`")
  @_Concurrency.MainActor(unsafe) dynamic public func register(channelCell: SendbirdUIKit.SBUBaseChannelCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.register(customCell:nib:)", message: "This function has been moved to the `SBUGroupChannelListModule.List`.`")
  @_Concurrency.MainActor(unsafe) dynamic public func register(customCell: SendbirdUIKit.SBUBaseChannelCell?, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.reloadTableView()", message: "This function has been moved to the `SBUGroupChannelListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func reloadTableView()
  @objc @available(*, deprecated, renamed: "showLoading(_:)")
  @_Concurrency.MainActor(unsafe) dynamic public func setLoading(_ loadingState: Swift.Bool, _ showIndicator: Swift.Bool)
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUGroupChannelListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
  @objc @available(*, unavailable, message: "Since it automatically detects channel changes internally, it is no longer necessary to use this function.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "Since it automatically detects channel changes internally, it is no longer necessary to use this function.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "Since it automatically detects channel changes internally, it is no longer necessary to use this function.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelWasChanged(_ sender: SendbirdChatSDK.BaseChannel)
  @objc @available(*, unavailable, message: "Since it automatically detects channel changes internally, it is no longer necessary to use this function.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  @objc @available(*, unavailable, message: "Since it automatically detects channel changes internally, it is no longer necessary to use this function.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelWasFrozen(_ sender: SendbirdChatSDK.BaseChannel)
  @objc @available(*, unavailable, message: "Since it automatically detects channel changes internally, it is no longer necessary to use this function.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelWasUnfrozen(_ sender: SendbirdChatSDK.BaseChannel)
  @objc @available(*, unavailable, message: "Since it automatically detects channel changes internally, it is no longer necessary to use this function.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "Since it automatically detects channel changes internally, it is no longer necessary to use this function.")
  @_Concurrency.MainActor(unsafe) dynamic open func didSucceedReconnection()
  @objc @available(*, unavailable, message: "Use `SBUGroupChannelListViewModel groupChannelListViewModel(_:didChangeChannelList:needsToReload:)` instead.")
  @_Concurrency.MainActor(unsafe) dynamic public func channelListDidChange(_ channels: [SendbirdChatSDK.GroupChannel]?, needToReload: Swift.Bool)
  @objc @available(*, unavailable, message: "Use `SBUGroupChannelListViewModel groupChannelListViewModel(_:didUpdateChannel:)` instead.")
  @_Concurrency.MainActor(unsafe) dynamic public func channelDidUpdate(_ channel: SendbirdChatSDK.GroupChannel)
  @objc @available(*, unavailable, message: "Use `SBUGroupChannelListViewModel groupChannelListViewModel(_:didLeaveChannel:)` instead.")
  @_Concurrency.MainActor(unsafe) dynamic public func channelDidLeave(_ channel: SendbirdChatSDK.GroupChannel)
  @objc @available(*, unavailable, message: "Since it automatically detects channel changes internally, it is no longer necessary to use this function.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadChannelChangeLogs(hasMore: Swift.Bool, token: Swift.String?)
  @available(*, unavailable, renamed: "errorHandler(_:_:)")
  @_Concurrency.MainActor(unsafe) public func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger?)
}
extension SendbirdUIKit.SBUGroupChannelListViewModel {
  @available(*, deprecated, message: "Since it automatically manages channel list changes internally, it is no longer necessary to use this function.")
  public func updateChannels(_ channels: [SendbirdChatSDK.GroupChannel]?, needReload: Swift.Bool)
  @available(*, deprecated, message: "Since it automatically manages channel list changes internally, it is no longer necessary to use this function.")
  public func upsertChannels(_ channels: [SendbirdChatSDK.GroupChannel]?, needReload: Swift.Bool)
  @available(*, deprecated, message: "Since it automatically manages channel list changes internally, it is no longer necessary to use this function.")
  public func deleteChannels(channelURLs: [Swift.String]?, needReload: Swift.Bool)
  @available(*, deprecated, message: "Since it automatically manages channel list changes internally, it is no longer necessary to use this function.")
  public func sortChannelList(needReload: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUChannelPushSettingCell : SendbirdUIKit.SBUTableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var descriptionLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var rightSwitch: UIKit.UISwitch {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightRadioButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var separateView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var switchAction: ((Swift.Bool) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var radioButtonAction: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var isSubType: Swift.Bool {
    get
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(pushTriggerOption: SendbirdChatSDK.GroupChannelPushTriggerOption, subType: SendbirdUIKit.ChannelPushSettingsSubType? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func onChangeSwitch(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) public func onSelectRadioButton(_ sender: Any)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct SBUChannelSettingItem {
  public let title: Swift.String
  public let icon: UIKit.UIImage
  public let subTitle: Swift.String?
  public let isRightButtonHidden: Swift.Bool
  public let isRightSwitchHidden: Swift.Bool
  public let tapHandler: (() -> Swift.Void)?
  public init(title: Swift.String, subTitle: Swift.String? = nil, icon: UIKit.UIImage, isRightButtonHidden: Swift.Bool = true, isRightSwitchHidden: Swift.Bool = true, tapHandler: (() -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class SBUChannelSettingsChannelInfoView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var coverImage: SendbirdUIKit.SBUCoverImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var channelNameField: UIKit.UITextField {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var lineView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var urlTitleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var urlLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var urlLineView: UIKit.UIView {
    get
    set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var coverImageSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init()
  @available(*, unavailable, renamed: "SBUChannelSettingsChannelInfoView(frame:)")
  @_Concurrency.MainActor(unsafe) required convenience public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func configure(channel: SendbirdChatSDK.BaseChannel?)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class SBUChannelStateBanner : SendbirdUIKit.SBULabel {
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init()
  @_Concurrency.MainActor(unsafe) required public init(isThreadMessage: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUChannelTitleView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var coverImage: SendbirdUIKit.SBUCoverImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var statusField: UIKit.UITextField {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onlineStateIcon: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "SBUChannelTitleView.init(frame:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupViews()
  @_Concurrency.MainActor(unsafe) open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func configure(channel: SendbirdChatSDK.BaseChannel?, title: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func updateChannelStatus(channel: SendbirdChatSDK.BaseChannel?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
public class SBUChatNotificationChannelModule {
  @available(*, deprecated, message: "Use `SBUChatNotificationChannelModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUChatNotificationChannelModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUChatNotificationChannelModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUChatNotificationChannelModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.ChatNotificationChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUChatNotificationChannelModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.ChatNotificationChannelModule`")
  required public init(listComponent: SendbirdUIKit.SBUChatNotificationChannelModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.ChatNotificationChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUChatNotificationChannelModule.Header?, listComponent: SendbirdUIKit.SBUChatNotificationChannelModule.List?)
  @objc deinit
}
extension SendbirdUIKit.SBUChatNotificationChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class Header : UIKit.UIView {
    @available(*, unavailable, renamed: "SBUChatNotificationChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUChatNotificationChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUChatNotificationChannelModule {
  @_inheritsConvenienceInitializers @objc(SBUChatNotificationChannelModuleList) @objcMembers @_Concurrency.MainActor(unsafe) public class List : UIKit.UIView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, SendbirdUIKit.SBUEmptyViewDelegate {
    @available(*, unavailable, renamed: "SBUChatNotificationChannelModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUChatNotificationChannelModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
    @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
    @objc @_Concurrency.MainActor(unsafe) public func didSelectRetry()
  }
}
extension SendbirdUIKit.SBUChatNotificationChannelModule {
  public static var HeaderComponent: SendbirdUIKit.SBUChatNotificationChannelModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUChatNotificationChannelModule.List.Type
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class SBUChatNotificationChannelViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUCommonViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUChatNotificationChannelModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUChatNotificationChannelModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var allowsReadStatusUpdate: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelName: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.GroupChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var newNotificationsCount: Swift.Int {
    get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.GroupChannel, notificationListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = nil, displaysLocalCachedListFirst: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, notificationListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = nil, displaysLocalCachedListFirst: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func reloadChannel(channelURL: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func updateLastSeenAt(timestamp: Swift.Int64? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func didUpdateUnreadMessageCount(_ unreadMessageCount: Swift.UInt)
  @objc @_Concurrency.MainActor(unsafe) public func updateChannelTitle()
  @_Concurrency.MainActor(unsafe) open func handleWebAction(_ action: SendbirdUIKit.SBUMessageTemplate.Action, notification: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func handleCustomAction(_ action: SendbirdUIKit.SBUMessageTemplate.Action, notification: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension SendbirdUIKit.SBUCollectionViewCell : SendbirdUIKit.SBUViewLifeCycle {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func setupActions()
}
@_hasMissingDesignatedInitializers public class SBUColorSet {
  public static var primaryExtraLight: UIKit.UIColor
  public static var primaryLight: UIKit.UIColor
  public static var primaryMain: UIKit.UIColor
  public static var primaryDark: UIKit.UIColor
  public static var primaryExtraDark: UIKit.UIColor
  public static var secondaryExtraLight: UIKit.UIColor
  public static var secondaryLight: UIKit.UIColor
  public static var secondaryMain: UIKit.UIColor
  public static var secondaryDark: UIKit.UIColor
  public static var secondaryExtraDark: UIKit.UIColor
  public static var background50: UIKit.UIColor
  public static var background100: UIKit.UIColor
  public static var background200: UIKit.UIColor
  public static var background300: UIKit.UIColor
  public static var background400: UIKit.UIColor
  public static var background500: UIKit.UIColor
  public static var background600: UIKit.UIColor
  public static var background700: UIKit.UIColor
  public static var overlayDark: UIKit.UIColor
  public static var overlayLight: UIKit.UIColor
  public static var onLightTextHighEmphasis: UIKit.UIColor
  public static var onLightTextMidEmphasis: UIKit.UIColor
  public static var onLightTextLowEmphasis: UIKit.UIColor
  public static var onLightTextDisabled: UIKit.UIColor
  public static var onDarkTextHighEmphasis: UIKit.UIColor
  public static var onDarkTextMidEmphasis: UIKit.UIColor
  public static var onDarkTextLowEmphasis: UIKit.UIColor
  public static var onDarkTextDisabled: UIKit.UIColor
  public static var errorExtraLight: UIKit.UIColor
  public static var errorLight: UIKit.UIColor
  public static var errorMain: UIKit.UIColor
  public static var errorDark: UIKit.UIColor
  public static var errorExtraDark: UIKit.UIColor
  public static var informationExtraDark: UIKit.UIColor
  public static var informationDark: UIKit.UIColor
  public static var informationMain: UIKit.UIColor
  public static var informationLight: UIKit.UIColor
  public static var informationExtraLight: UIKit.UIColor
  public static var highlight: UIKit.UIColor
  @objc deinit
}
extension SendbirdUIKit.SBUColorSet {
  public static func restoreDefaultColors()
}
extension SendbirdUIKit.SBUColorSet {
  @available(*, deprecated, renamed: "primaryExtraLight")
  public static var primary100: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "primaryLight")
  public static var primary200: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "primaryMain")
  public static var primary300: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "primaryDark")
  public static var primary400: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "primaryExtraDark")
  public static var primary500: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "secondaryExtraLight")
  public static var secondary100: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "secondaryLight")
  public static var secondary200: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "secondaryMain")
  public static var secondary300: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "secondaryDark")
  public static var secondary400: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "secondaryExtraDark")
  public static var secondary500: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "errorExtraDark")
  public static var error500: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "errorDark")
  public static var error400: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "errorMain")
  public static var error300: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "errorLight")
  public static var error200: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "errorExtraLight")
  public static var error100: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "overlayDark")
  public static var overlay01: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "overlayLight")
  public static var overlay02: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "onLightTextHighEmphasis")
  public static var onlight01: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "onLightTextMidEmphasis")
  public static var onlight02: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "onLightTextLowEmphasis")
  public static var onlight03: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "onLightTextDisabled")
  public static var onlight04: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "onDarkTextHighEmphasis")
  public static var ondark01: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "onDarkTextMidEmphasis")
  public static var ondark02: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "onDarkTextLowEmphasis")
  public static var ondark03: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "onDarkTextDisabled")
  public static var ondark04: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, renamed: "informationLight")
  public static var information: UIKit.UIColor {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUCommonContentView : SendbirdUIKit.SBUBaseFileContentView {
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var fileImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var fileNameLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(message: SendbirdChatSDK.FileMessage, position: SendbirdUIKit.MessagePosition, highlightKeyword: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func addHighlight(keyword: Swift.String, toAttributedString attributedString: Foundation.NSMutableAttributedString, highlightTextColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol SBUCommonDelegate : AnyObject {
  func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
}
public class SBUCommonItem {
  public var title: Swift.String?
  public var color: UIKit.UIColor?
  public var image: UIKit.UIImage?
  public var font: UIKit.UIFont?
  public var tintColor: UIKit.UIColor?
  public var textAlignment: UIKit.NSTextAlignment
  public var tag: Swift.Int?
  public init(title: Swift.String? = nil, color: UIKit.UIColor? = SBUColorSet.onLightTextHighEmphasis, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, tintColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment = .left, tag: Swift.Int? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SBUCommonModule {
  public static var ToastView: SendbirdUIKit.SBUToastView.Type {
    get
    set
  }
  public static var ActionSheet: SendbirdUIKit.SBUActionSheet.Type {
    get
    set
  }
  public static var AlertView: SendbirdUIKit.SBUAlertView.Type {
    get
    set
  }
  public static var Loading: SendbirdUIKit.SBULoading.Type {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUCommonViewControllerSet {
  public static var FileViewController: SendbirdUIKit.SBUFileViewController.Type
  public static var SelectablePhotoViewController: SendbirdUIKit.SBUSelectablePhotoViewController.Type
  public static var MenuSheetViewController: SendbirdUIKit.SBUMenuSheetViewController.Type
  public static var ReactionsViewController: SendbirdUIKit.SBUReactionsViewController.Type
  public static var EmojiListViewController: SendbirdUIKit.SBUEmojiListViewController.Type
  @objc deinit
}
extension SendbirdUIKit.SBUConfig {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseInput : ObjectiveC.NSObject, Swift.Codable {
    @SendbirdUIKit.SBUPrioritizedConfig public var isDocumentEnabled: Swift.Bool {
      get
      set
      _modify
    }
    public var camera: SendbirdUIKit.SBUConfig.BaseInput.Camera
    public var gallery: SendbirdUIKit.SBUConfig.BaseInput.Gallery
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIKit.SBUConfig.BaseInput {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Camera : ObjectiveC.NSObject, Swift.Codable {
    @SendbirdUIKit.SBUPrioritizedConfig public var isPhotoEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var isVideoEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIKit.SBUConfig.BaseInput {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Gallery : ObjectiveC.NSObject, Swift.Codable {
    @SendbirdUIKit.SBUPrioritizedConfig public var isPhotoEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var isVideoEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIKit.SBUConfig {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Common : ObjectiveC.NSObject, Swift.Codable {
    @SendbirdUIKit.SBUPrioritizedConfig public var isUsingDefaultUserProfileEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIKit.SBUConfig {
  @_hasMissingDesignatedInitializers public class GroupChannel : Swift.Codable {
    public var channel: SendbirdUIKit.SBUConfig.GroupChannel.Channel
    public var channelList: SendbirdUIKit.SBUConfig.GroupChannel.ChannelList
    public var setting: SendbirdUIKit.SBUConfig.GroupChannel.Setting
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIKit.SBUConfig.GroupChannel {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Channel : ObjectiveC.NSObject, Swift.Codable {
    @SendbirdUIKit.SBUPrioritizedConfig public var isOGTagEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var isTypingIndicatorEnabled: Swift.Bool {
      get
      set
      _modify
    }
    public var typingIndicatorTypes: Swift.Set<SendbirdUIKit.SBUTypingIndicatorType>
    @SendbirdUIKit.SBUPrioritizedConfig public var isSuggestedRepliesEnabled: Swift.Bool {
      get
      set
      _modify
    }
    public var showSuggestedRepliesFor: SendbirdUIKit.SBUSuggestedRepliesRenderType
    public var suggestedRepliesDirection: SendbirdUIKit.SBUSuggestedRepliesDirection
    @SendbirdUIKit.SBUPrioritizedConfig public var isFormTypeMessageEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var isFeedbackEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var isReactionsEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var isMarkdownForUserMessageEnabled: Swift.Bool {
      get
      set
      _modify
    }
    public var isSuperGroupReactionsEnabled: Swift.Bool {
      get
      @available(*, unavailable, message: "Currently, this feature is turned off by default. If you wish to use this feature, contact us.")
      set
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var isMentionEnabled: Swift.Bool {
      get
      set
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var isVoiceMessageEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var replyType: SendbirdUIKit.SBUReplyType {
      get
      set
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var threadReplySelectType: SendbirdUIKit.SBUThreadReplySelectType {
      get
      set
    }
    public var input: SendbirdUIKit.SBUConfig.GroupChannel.Channel.Input
    @SendbirdUIKit.SBUPrioritizedConfig public var isMultipleFilesMessageEnabled: Swift.Bool {
      get
      set
    }
    required public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    @objc deinit
  }
}
extension SendbirdUIKit.SBUConfig.GroupChannel {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ChannelList : ObjectiveC.NSObject, Swift.Codable {
    @SendbirdUIKit.SBUPrioritizedConfig public var isTypingIndicatorEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @SendbirdUIKit.SBUPrioritizedConfig public var isMessageReceiptStatusEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIKit.SBUConfig.GroupChannel {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Setting : ObjectiveC.NSObject, Swift.Codable {
    @SendbirdUIKit.SBUPrioritizedConfig public var isMessageSearchEnabled: Swift.Bool {
      get
      set
      _modify
    }
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIKit.SBUConfig.GroupChannel.Channel {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Input : SendbirdUIKit.SBUConfig.BaseInput {
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
}
extension SendbirdUIKit.SBUConfig {
  @objc @_inheritsConvenienceInitializers public class OpenChannel : ObjectiveC.NSObject, Swift.Codable {
    public var channel: SendbirdUIKit.SBUConfig.OpenChannel.Channel
    @objc override dynamic public init()
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIKit.SBUConfig.OpenChannel {
  @_hasMissingDesignatedInitializers public class Channel : Swift.Codable {
    @SendbirdUIKit.SBUPrioritizedConfig public var isOGTagEnabled: Swift.Bool {
      get
      set
      _modify
    }
    public var input: SendbirdUIKit.SBUConfig.OpenChannel.Channel.Input
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIKit.SBUConfig.OpenChannel.Channel {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Input : SendbirdUIKit.SBUConfig.BaseInput {
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers public class SBUConfig : ObjectiveC.NSObject, Swift.Codable {
  public var common: SendbirdUIKit.SBUConfig.Common
  public var groupChannel: SendbirdUIKit.SBUConfig.GroupChannel
  public var openChannel: SendbirdUIKit.SBUConfig.OpenChannel
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension SendbirdUIKit.SBUConfig {
  public func resetCache()
}
extension SendbirdUIKit.SBUContentBaseMessageCell {
  @objc @available(*, deprecated, renamed: "useQuotedMessage")
  @_Concurrency.MainActor(unsafe) dynamic public var usingQuotedMessage: Swift.Bool {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUContentBaseMessageCell : SendbirdUIKit.SBUBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var useReaction: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var useQuotedMessage: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var useThreadInfo: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var enableEmojiLongPress: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var userNameView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var profilesStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var profileView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userNameStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentHStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentVStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var quotedMessageView: (any UIKit.UIView & SendbirdUIKit.SBUQuotedMessageViewProtocol)? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var threadHStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var threadInfoSpacing: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var threadInfoView: (any UIKit.UIView & SendbirdUIKit.SBUThreadInfoViewProtocol)? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageHStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mainContainerVStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var mainContainerView: SendbirdUIKit.SBUSelectableStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func resetMainContainerViewLayer()
  @objc @_Concurrency.MainActor(unsafe) public var reactionView: SendbirdUIKit.SBUMessageReactionView
  @objc @_Concurrency.MainActor(unsafe) public var profileContentSpacing: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let messageSpacing: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  @objc @_Concurrency.MainActor(unsafe) public func setupQuotedMessageView(joinedAt: Swift.Int64 = 0, messageOffsetTimestamp: Swift.Int64 = 0)
  @objc @_Concurrency.MainActor(unsafe) public func setupThreadInfoView()
  @objc @_Concurrency.MainActor(unsafe) public func setMessageGrouping()
  @objc @_Concurrency.MainActor(unsafe) open func updateContentsPosition()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func configureMessageProfileViews(message: SendbirdChatSDK.BaseMessage)
  @_Concurrency.MainActor(unsafe) open func configureTyperProfileViews(typingInfo: SendbirdUIKit.SBUTypingIndicatorInfo)
  @objc @_Concurrency.MainActor(unsafe) open func configureUserProfileView(message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func onLongPressContentView(sender: UIKit.UILongPressGestureRecognizer?)
  @objc @_Concurrency.MainActor(unsafe) open func onTapContentView(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func onTapUserProfileView(sender: UIKit.UITapGestureRecognizer)
  @available(*, deprecated, renamed: "configure(message:configuration:)")
  @_Concurrency.MainActor(unsafe) open func configure(_ message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool, position: SendbirdUIKit.MessagePosition, groupPosition: SendbirdUIKit.MessageGroupPosition, receiptState: SendbirdUIKit.SBUMessageReceiptState?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SendbirdUIKit.SBUCoverImageView {
  @available(*, deprecated, renamed: "setPlaceholder(type:iconSize:)", message: "renamed to 'setPlaceholder(type: .iconUSer)'")
  @_Concurrency.MainActor(unsafe) public func setPlaceholderImage(iconSize: CoreFoundation.CGSize)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class SBUCoverImageView : UIKit.UIView {
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setImage(withCoverURL coverURL: Swift.String)
  @_Concurrency.MainActor(unsafe) open func setImage(with coverURL: Swift.String, makeCircle: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func setBroadcastIcon()
  @_Concurrency.MainActor(unsafe) open func setPlaceholder(type: SendbirdUIKit.SBUIconSetType, iconSize: CoreFoundation.CGSize? = nil)
  @_Concurrency.MainActor(unsafe) open func setImage(withImage image: UIKit.UIImage, backgroundColor: UIKit.UIColor? = nil, makeCircle: Swift.Bool = false, contentMode: UIKit.UIView.ContentMode = .center)
  @_Concurrency.MainActor(unsafe) open func setImage(withUsers users: [SendbirdChatSDK.User])
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func sbu_setProfileImageView(for user: SendbirdChatSDK.User, defaultImage: UIKit.UIImage)
}
open class SBUCreateChannelModule {
  @available(*, deprecated, message: "Use `SBUCreateChannelModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUCreateChannelModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUCreateChannelModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.CreateGroupChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.CreateGroupChannelModule`")
  required public init(listComponent: SendbirdUIKit.SBUCreateChannelModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.CreateGroupChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header?, listComponent: SendbirdUIKit.SBUCreateChannelModule.List?)
  @objc deinit
}
public protocol SBUCreateChannelModuleHeaderDelegate : SendbirdUIKit.SBUBaseSelectUserModuleHeaderDelegate {
  func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
public protocol SBUCreateChannelModuleHeaderDataSource : SendbirdUIKit.SBUBaseSelectUserModuleHeaderDataSource {
}
extension SendbirdUIKit.SBUCreateChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseSelectUserModule.Header {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUCreateChannelModuleHeaderDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUCreateChannelModuleHeaderDataSource)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBUCreateChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUCreateChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUCreateChannelModuleHeaderDelegate, dataSource: any SendbirdUIKit.SBUCreateChannelModuleHeaderDataSource, theme: SendbirdUIKit.SBUUserListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func updateRightBarButton()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateTitleView()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItems()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItems()
    @_Concurrency.MainActor(unsafe) @objc override public func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override public func onTapRightBarButton()
  }
}
public protocol SBUCreateChannelModuleListDelegate : SendbirdUIKit.SBUBaseSelectUserModuleListDelegate {
  func createChannelModule(_ listComponent: SendbirdUIKit.SBUCreateChannelModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func createChannelModule(_ listComponent: SendbirdUIKit.SBUCreateChannelModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  func createChannelModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUCreateChannelModule.List)
}
public protocol SBUCreateChannelModuleListDataSource : SendbirdUIKit.SBUBaseSelectUserModuleListDataSource {
}
extension SendbirdUIKit.SBUCreateChannelModule {
  @_inheritsConvenienceInitializers @objc(SBUCreateChannelModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseSelectUserModule.List {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUCreateChannelModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUCreateChannelModuleListDataSource)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBUCreateChannelModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUCreateChannelModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUCreateChannelModuleListDelegate, dataSource: any SendbirdUIKit.SBUCreateChannelModuleListDataSource, theme: SendbirdUIKit.SBUUserListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override public func reloadTableView()
    @_Concurrency.MainActor(unsafe) @objc override open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
  }
}
extension SendbirdUIKit.SBUCreateChannelModule.List {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didSelectRetry()
}
extension SendbirdUIKit.SBUCreateChannelModule.List {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBUCreateChannelModule {
  public static var HeaderComponent: SendbirdUIKit.SBUCreateChannelModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUCreateChannelModule.List.Type
}
extension SendbirdUIKit.SBUCreateChannelModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
}
extension SendbirdUIKit.SBUCreateChannelModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserCell: SendbirdUIKit.SBUUserCell.Type
}
public protocol SBUCreateChannelTypeSelectorDelegate : AnyObject {
  func didSelectCloseSelector()
  func didSelectCreateGroupChannel()
  func didSelectCreateSuperGroupChannel()
  func didSelectCreateBroadcastChannel()
}
public protocol SBUCreateChannelTypeSelectorProtocol {
  func show()
  func dismiss()
}
@objc @_Concurrency.MainActor(unsafe) open class SBUCreateChannelTypeSelector : SendbirdUIKit.SBUView, SendbirdUIKit.SBUCreateChannelTypeSelectorProtocol {
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var navigationBar: UIKit.UINavigationBar {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var navigationItem: UIKit.UINavigationItem {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var backgroundCloseButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectorStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var createGroupChannelButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var createSuperGroupChannelButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var createBroadcastChannelButton: UIKit.UIButton {
    get
    set
  }
  @available(*, unavailable, renamed: "CreateChannelTypeSelectView.init(delegate:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "CreateChannelTypeSelectView.init(delegate:)")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) required public init(delegate: (any SendbirdUIKit.SBUCreateChannelTypeSelectorDelegate)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func show()
  @_Concurrency.MainActor(unsafe) open func dismiss()
  @objc @_Concurrency.MainActor(unsafe) open func onClickClose()
  @objc @_Concurrency.MainActor(unsafe) open func onClickCreateGroupChannel()
  @objc @_Concurrency.MainActor(unsafe) open func onClickCreateSuperGroupChannel()
  @objc @_Concurrency.MainActor(unsafe) open func onClickCreateBroadcastChannel()
  @_Concurrency.MainActor(unsafe) open func createButton(type: SendbirdUIKit.ChannelCreationType) -> SendbirdUIKit.SBULayoutableButton
  @_Concurrency.MainActor(unsafe) open func updateButton(type: SendbirdUIKit.ChannelCreationType)
  @objc deinit
}
extension SendbirdUIKit.SBUCreateChannelViewController {
  @objc @available(*, deprecated, renamed: "headerComponent.titleView", message: "This property has been moved to the SBUCreateChannelModule.Header.")
  @_Concurrency.MainActor(unsafe) dynamic public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.leftBarButton", message: "This property has been moved to the SBUCreateChannelModule.Header.")
  @_Concurrency.MainActor(unsafe) dynamic public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.rightBarButton", message: "This property has been moved to the SBUCreateChannelModule.Header.")
  @_Concurrency.MainActor(unsafe) dynamic public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.tableView", message: "This property has been moved to the SBUCreateChannelModule.List.")
  @_Concurrency.MainActor(unsafe) dynamic public var tableView: UIKit.UITableView? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.userCell", message: "This property has been moved to the SBUCreateChannelModule.List.")
  @_Concurrency.MainActor(unsafe) dynamic public var userCell: UIKit.UITableViewCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.emptyView", message: "This property has been moved to the SBUCreateChannelModule.List.")
  @_Concurrency.MainActor(unsafe) dynamic public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "viewModel.userListQuery", message: "This property has been moved to the `SBUCreateChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var userListQuery: SendbirdChatSDK.ApplicationUserListQuery? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.reloadTableView()", message: "This function has been moved to the SBUCreateChannelModule.List.")
  @_Concurrency.MainActor(unsafe) dynamic public func reloadData()
  @objc @available(*, deprecated, renamed: "viewModel.loadNextUserList(reset:users:)", message: "This function has been moved to the `SBUCreateChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadNextUserList(reset: Swift.Bool, users: [SendbirdUIKit.SBUUser]? = nil)
  @objc @available(*, deprecated, renamed: "viewModel.selectUser(user:)", message: "This function has been moved to the `SBUCreateChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func selectUser(user: SendbirdUIKit.SBUUser)
  @objc @available(*, deprecated, renamed: "viewModel.createChannel(userIds:)", message: "This function has been moved to the `SBUCreateChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func createChannel(userIds: [Swift.String])
  @objc @available(*, deprecated, renamed: "viewModel.createChannel(params:messageListParams:)", message: "This function has been moved to the `SBUCreateChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func createChannel(params: SendbirdChatSDK.GroupChannelCreateParams, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @objc @available(*, deprecated, renamed: "createChannelWithSelectedUsers()")
  @_Concurrency.MainActor(unsafe) dynamic public func onClickCreate()
  @objc @available(*, unavailable, renamed: "createChannelViewModel(_:nextUserListForChannelType:)", message: "This function has been moved to the `SBUCreateChannelViewModelDataSource`.")
  @_Concurrency.MainActor(unsafe) dynamic open func nextUserList() -> [SendbirdUIKit.SBUUser]?
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
  @objc @available(*, unavailable, message: "This function has been moved to the SBUCreateChannelModule.List.")
  @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
  @objc @available(*, deprecated, renamed: "showLoading(_:)")
  @_Concurrency.MainActor(unsafe) dynamic public func showLoading(state: Swift.Bool)
  @objc @available(*, deprecated, renamed: "listComponent.register(userCell:nib:)", message: "This function has been moved to the SBUCreateChannelModule.List.`")
  @_Concurrency.MainActor(unsafe) dynamic public func register(userCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.reloadTableView()", message: "This function has been moved to the `SBUCreateChannelViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func reloadUserList()
  @available(*, unavailable, renamed: "errorHandler(_:_:)")
  @_Concurrency.MainActor(unsafe) public func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUCreateChannelViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUCreateChannelModuleHeaderDelegate, SendbirdUIKit.SBUCreateChannelModuleHeaderDataSource, SendbirdUIKit.SBUCreateChannelModuleListDataSource, SendbirdUIKit.SBUCreateChannelModuleListDelegate, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUCreateChannelViewModelDataSource, SendbirdUIKit.SBUCreateChannelViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUCreateChannelModule.List?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUUserListTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUCreateChannelViewModel?
  @_Concurrency.MainActor(unsafe) public var channelType: SendbirdUIKit.ChannelCreationType {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userList: [SendbirdUIKit.SBUUser] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var selectedUserList: Swift.Set<SendbirdUIKit.SBUUser> {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUCreateChannelViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUCreateChannelViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) required public init(users: [SendbirdUIKit.SBUUser]? = nil, type: SendbirdUIKit.ChannelCreationType = .group)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func createViewModel(users: [SendbirdUIKit.SBUUser]? = nil, type: SendbirdUIKit.ChannelCreationType = .group)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) public func createChannelWithSelectedUsers()
  @objc @_Concurrency.MainActor(unsafe) open func dismissAndMoveToChannel(_ channel: SendbirdChatSDK.BaseChannel, messageListParams: SendbirdChatSDK.MessageListParams?)
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateChannelModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func selectedUsersForBaseSelectUserModule(_ headerComponent: SendbirdUIKit.SBUBaseSelectUserModule.Header) -> Swift.Set<SendbirdUIKit.SBUUser>?
  @objc @_Concurrency.MainActor(unsafe) open func baseSelectUserModule(_ listComponent: SendbirdUIKit.SBUBaseSelectUserModule.List, usersInTableView tableView: UIKit.UITableView) -> [SendbirdUIKit.SBUUser]?
  @objc @_Concurrency.MainActor(unsafe) open func baseSelectUserModule(_ listComponent: SendbirdUIKit.SBUBaseSelectUserModule.List, selectedUsersInTableView tableView: UIKit.UITableView) -> Swift.Set<SendbirdUIKit.SBUUser>?
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModule(_ listComponent: SendbirdUIKit.SBUCreateChannelModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModule(_ listComponent: SendbirdUIKit.SBUCreateChannelModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func createChannelModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUCreateChannelModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func createChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateChannelViewModel, nextUserListForChannelType channelType: SendbirdUIKit.ChannelCreationType) -> [SendbirdUIKit.SBUUser]?
  @_Concurrency.MainActor(unsafe) open func createChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateChannelViewModel, didChangeUsers users: [SendbirdUIKit.SBUUser], needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didUpdateSelectedUsers(_ selectedUsers: [SendbirdUIKit.SBUUser]?)
  @_Concurrency.MainActor(unsafe) open func createChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateChannelViewModel, didCreateChannel channel: SendbirdChatSDK.BaseChannel?, withMessageListParams messageListParams: SendbirdChatSDK.MessageListParams?)
  @_Concurrency.MainActor(unsafe) open func createChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateChannelViewModel, didUpdateSelectedUsers selectedUsers: [SendbirdUIKit.SBUUser])
}
public protocol SBUCreateChannelViewModelDelegate : SendbirdUIKit.SBUCommonViewModelDelegate {
  func createChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateChannelViewModel, didChangeUsers users: [SendbirdUIKit.SBUUser], needsToReload: Swift.Bool)
  func createChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateChannelViewModel, didCreateChannel channel: SendbirdChatSDK.BaseChannel?, withMessageListParams messageListParams: SendbirdChatSDK.MessageListParams?)
  func createChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateChannelViewModel, didUpdateSelectedUsers selectedUsers: [SendbirdUIKit.SBUUser])
}
public protocol SBUCreateChannelViewModelDataSource : AnyObject {
  func createChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateChannelViewModel, nextUserListForChannelType channelType: SendbirdUIKit.ChannelCreationType) -> [SendbirdUIKit.SBUUser]?
}
open class SBUCreateChannelViewModel {
  weak public var delegate: (any SendbirdUIKit.SBUCreateChannelViewModelDelegate)?
  weak public var dataSource: (any SendbirdUIKit.SBUCreateChannelViewModelDataSource)?
  public var channelType: SendbirdUIKit.ChannelCreationType {
    get
  }
  @SendbirdUIKit.SBUAtomic public var userList: [SendbirdUIKit.SBUUser] {
    get
  }
  @SendbirdUIKit.SBUAtomic public var selectedUserList: Swift.Set<SendbirdUIKit.SBUUser> {
    get
  }
  public var userListQuery: SendbirdChatSDK.ApplicationUserListQuery? {
    get
  }
  required public init(channelType: SendbirdUIKit.ChannelCreationType = .group, users: [SendbirdUIKit.SBUUser]? = nil, delegate: (any SendbirdUIKit.SBUCreateChannelViewModelDelegate)? = nil, dataSource: (any SendbirdUIKit.SBUCreateChannelViewModelDataSource)? = nil)
  public func loadNextUserList(reset: Swift.Bool, users: [SendbirdUIKit.SBUUser]? = nil)
  public func preLoadNextUserList(indexPath: Foundation.IndexPath)
  public func resetUserList()
  public func createChannel(userIds: [Swift.String])
  public func createChannel(params: SendbirdChatSDK.GroupChannelCreateParams, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  public func selectUser(user: SendbirdUIKit.SBUUser)
  @objc deinit
}
open class SBUCreateOpenChannelModule {
  @available(*, deprecated, message: "Use `SBUCreateOpenChannelModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUCreateOpenChannelModule.ProfileInputComponent` instead.")
  public var profileInputComponent: SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.CreateOpenChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.CreateOpenChannelModule`")
  required public init(profileInputComponent: SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput?)
  @available(*, deprecated, message: "Use `SBUModuleSet.CreateOpenChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header?, profileInputComponent: SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput?)
  @objc deinit
}
public protocol SBUCreateOpenChannelModuleHeaderDelegate : SendbirdUIKit.SBUCommonDelegate {
  func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
extension SendbirdUIKit.SBUCreateOpenChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUCreateOpenChannelTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUCreateOpenChannelModuleHeaderDelegate)?
    @available(*, unavailable, renamed: "SBUCreateOpenChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUCreateOpenChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUCreateOpenChannelModuleHeaderDelegate, theme: SendbirdUIKit.SBUCreateOpenChannelTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUCreateOpenChannelTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func enableRightBarButton(_ enabled: Swift.Bool)
    @objc @_Concurrency.MainActor(unsafe) public func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) public func onTapRightBarButton()
  }
}
public protocol SBUCreateOpenChannelModuleProfileInputDelegate : SendbirdUIKit.SBUCommonDelegate {
  func createOpenChannelModule(_ profileInputComponent: SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput, shouldChangeChannelName string: Swift.String)
  func createOpenChannelModuleDidSelectChannelImage(_ profileInputComponent: SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput, needRemoveItem: Swift.Bool)
}
extension SendbirdUIKit.SBUCreateOpenChannelModule {
  @_inheritsConvenienceInitializers @objc(SBUCreateOpenChannelModuleProfileInput) @_Concurrency.MainActor(unsafe) open class ProfileInput : UIKit.UIView, UIKit.UITextFieldDelegate {
    @_Concurrency.MainActor(unsafe) public var baseStackView: SendbirdUIKit.SBUStackView {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) public var channelImageView: SendbirdUIKit.SBUCoverImageView {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) public var channelNameInputField: SendbirdUIKit.SBUUnderLineTextField
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUCreateOpenChannelTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUCreateOpenChannelModuleProfileInputDelegate)?
    @_Concurrency.MainActor(unsafe) open func configure(delegate: (any SendbirdUIKit.SBUCreateOpenChannelModuleProfileInputDelegate)?, theme: SendbirdUIKit.SBUCreateOpenChannelTheme)
    @_Concurrency.MainActor(unsafe) open func setupViews()
    @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUCreateOpenChannelTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) public func getChannelName() -> Swift.String?
    @_Concurrency.MainActor(unsafe) public func getChannelCoverImage() -> UIKit.UIImage?
    @_Concurrency.MainActor(unsafe) open func updateChannelImage(_ image: UIKit.UIImage?)
    @objc @_Concurrency.MainActor(unsafe) open func showImagePicker(sender: UIKit.UITapGestureRecognizer)
    @_Concurrency.MainActor(unsafe) @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUCreateOpenChannelModule {
  public static var HeaderComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header.Type
  public static var ProfileInputComponent: SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput.Type
}
extension SendbirdUIKit.SBUCreateOpenChannelModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
}
extension SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput {
  @_Concurrency.MainActor(unsafe) public static var ChannelImageView: SendbirdUIKit.SBUCoverImageView.Type
  @_Concurrency.MainActor(unsafe) public static var ChannelNameInputField: SendbirdUIKit.SBUUnderLineTextField.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUCreateOpenChannelViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUActionSheetDelegate, PhotosUI.PHPickerViewControllerDelegate, UIKit.UIImagePickerControllerDelegate, SendbirdUIKit.SBUSelectablePhotoViewDelegate, SendbirdUIKit.SBUCreateOpenChannelModuleHeaderDelegate, SendbirdUIKit.SBUCreateOpenChannelModuleProfileInputDelegate, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUCreateOpenChannelViewModelDelegate, SendbirdUIKit.SBUAlertViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var profileInputComponent: SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUCreateOpenChannelTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUCreateOpenChannelViewModel?
  @available(*, unavailable, renamed: "SBUCreateOpenChannelViewController()")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUCreateOpenChannelViewController()")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel()
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) public func createChannel()
  @objc @_Concurrency.MainActor(unsafe) public func createChannel(channelName: Swift.String, coverImage: UIKit.UIImage?)
  @objc @_Concurrency.MainActor(unsafe) public func selectChannelImage(needRemoveItem: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func showChannelImagePicker(with type: SendbirdUIKit.MediaResourceType)
  @objc @_Concurrency.MainActor(unsafe) open func showCamera()
  @objc @_Concurrency.MainActor(unsafe) open func showPhotoLibraryPicker()
  @objc @_Concurrency.MainActor(unsafe) open func showLimitedPhotoLibraryPicker()
  @_Concurrency.MainActor(unsafe) open func showPermissionAlert(forType permissionType: SendbirdUIKit.SBUPermissionManager.PermissionType = .photoLibrary)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc @_Concurrency.MainActor(unsafe) open func dismissAndMoveToChannel(_ channel: SendbirdChatSDK.BaseChannel, messageListParams: SendbirdChatSDK.MessageListParams?)
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func createOpenChannelModule(_ headerComponent: SendbirdUIKit.SBUCreateOpenChannelModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func createOpenChannelModule(_ profileInputComponent: SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput, shouldChangeChannelName string: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func createOpenChannelModuleDidSelectChannelImage(_ profileInputComponent: SendbirdUIKit.SBUCreateOpenChannelModule.ProfileInput, needRemoveItem: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func createOpenChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateOpenChannelViewModel, didCreateChannel channel: SendbirdChatSDK.BaseChannel?)
  @objc @_Concurrency.MainActor(unsafe) open func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open func didDismissActionSheet()
  @objc @_Concurrency.MainActor(unsafe) open func didDismissAlertView()
  @objc @_Concurrency.MainActor(unsafe) open func didTapSendImageData(_ data: Foundation.Data, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @available(iOS 14, *)
  @_Concurrency.MainActor(unsafe) open func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
public protocol SBUCreateOpenChannelViewModelDelegate : SendbirdUIKit.SBUCommonViewModelDelegate {
  func createOpenChannelViewModel(_ viewModel: SendbirdUIKit.SBUCreateOpenChannelViewModel, didCreateChannel channel: SendbirdChatSDK.BaseChannel?)
}
open class SBUCreateOpenChannelViewModel {
  required public init(delegate: (any SendbirdUIKit.SBUCreateOpenChannelViewModelDelegate)?)
  open func createChannel(channelName: Swift.String, coverImage: UIKit.UIImage?)
  open func createChannel(params: SendbirdChatSDK.OpenChannelCreateParams)
  @objc deinit
}
public struct SBUDateFormatSet {
  public static var EMMMyyyy: Swift.String
  public static var MMMddyyyy: Swift.String
  public static var EMMMdd: Swift.String
  public static var MMMdd: Swift.String
  public static var hhmma: Swift.String
  public static var hhmm: Swift.String
  public static var yyyyMMdd: Swift.String
  public static var yyyyMMddhhmm: Swift.String
  public static var yyyyMMddhhmmss: Swift.String
  public static var MMMddhhmma: Swift.String
  public static var MMMddyyyyhhmma: Swift.String
  @_hasMissingDesignatedInitializers public class Channel {
    public static var lastUpdatedDateFormat: Swift.String
    public static var lastUpdatedPastYearFormat: Swift.String
    public static var lastUpdatedTimeFormat: Swift.String
    public static var lastSeenDateFormat: Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Message {
    public static var fileNameFormat: Swift.String
    @available(*, deprecated, renamed: "fileViewControllerTimeFormat")
    public static var fileViewerTimeFormat: Swift.String
    public static var fileViewControllerTimeFormat: Swift.String
    public static var sentTimeFormat: Swift.String
    public static var sentTimeFormatInOpenChannel: Swift.String
    public static var dateSeparatorDateFormat: Swift.String
    public static var dateSeparatorPastYearFormat: Swift.String
    public static var dateSeparatorTimeFormat: Swift.String
    public static var dateSeparatorYesterdayFormat: Swift.String
    @available(*, deprecated, renamed: "dateSeparatorDateFormat")
    public static var sentDateFormat: Swift.String {
      get
      set
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class MessageSearch {
    public static var lastUpdatedDateFormat: Swift.String
    public static var lastUpdatedPastYearFormat: Swift.String
    public static var lastUpdatedTimeFormat: Swift.String
    @available(*, unavailable, message: "Use `Date.lastUpdatedTimeForMessageSearchResultCell(baseTimestamp:)` instead")
    public static var sentTimeFormat: Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class MessageThread {
    public static var sentDateDateFormat: Swift.String
    public static var sentDatePastYearFormat: Swift.String
    public static var sentDateTimeFormat: Swift.String
    public static var sentDateYesterdayFormat: Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class VoiceMessage {
    public static var fileNameFormat: Swift.String
    @objc deinit
  }
}
@objc public class SBUDebouncer : ObjectiveC.NSObject {
  public static let defaultTime: Swift.Double
  public init(debounceTime: Foundation.TimeInterval = SBUDebouncer.defaultTime)
  public func add(handler: @escaping (() -> Swift.Void))
  public func updateTimer()
  public func cancel()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class SBUEmojiListViewController : SendbirdUIKit.SBUBaseViewController, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout, SendbirdUIKit.SBUBottomSheetControllerDelegate, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let layout: UIKit.UICollectionViewFlowLayout
  @objc @_Concurrency.MainActor(unsafe) final public let emojiList: [SendbirdChatSDK.Emoji]
  @objc @_Concurrency.MainActor(unsafe) final public let message: SendbirdChatSDK.BaseMessage?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var maxEmojiOneLine: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) public var emojiTapHandler: ((_ emojiKey: Swift.String, _ setSelect: Swift.Bool) -> Swift.Void)?
  @available(*, unavailable, renamed: "SBUEmojiListViewController.init(message:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) required public init(message: SendbirdChatSDK.BaseMessage)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func calculateCollectionViewContentHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func bottomSheet(moveTo position: SendbirdUIKit.SBUBottomSheetSnapPoint)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUEmojiManager {
  public static func getEmojiCategories() -> [SendbirdChatSDK.EmojiCategory]
  public static func getAllEmojis() -> [SendbirdChatSDK.Emoji]
  public static func getEmojis(emojiCategoryId: Swift.Int64) -> [SendbirdChatSDK.Emoji]
  public static func loadAllEmojis(completionHandler: @escaping (_ container: SendbirdChatSDK.EmojiContainer?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
  @objc deinit
}
public protocol SBUEmptyViewDelegate : ObjectiveC.NSObjectProtocol {
  func didSelectRetry()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUEmptyView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var type: SendbirdUIKit.EmptyViewType
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUEmptyViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var statusImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var statusLabel: UIKit.UILabel
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var retryButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isOverlay: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var emptyViewTopConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "SBUEmptyView.init(frame:)")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func updateTopAnchorConstraint(constant: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) public func reloadData(_ type: SendbirdUIKit.EmptyViewType)
  @_Concurrency.MainActor(unsafe) open func updateViews()
  @objc @_Concurrency.MainActor(unsafe) open func onClickRetry(_ sender: Any)
  @objc deinit
}
@available(*, deprecated, renamed: "UserListType")
@objc public enum MemberListType : Swift.Int {
  case none
  case createChannel
  case channelMembers
  case inviteUser
  case reaction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, renamed: "ChannelUserListType")
@objc public enum ChannelMemberListType : Swift.Int {
  case none
  case members
  case operators
  case muted
  case banned
  case participants
  @available(*, unavailable, renamed: "members")
  case channelMembers
  @available(*, unavailable, renamed: "muted")
  case mutedMembers
  @available(*, unavailable, renamed: "banned")
  case bannedMembers
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ChannelCreationType : Swift.Int {
  case open
  case group
  case supergroup
  case broadcast
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ChannelSettingItemType : Swift.Int {
  case moderations
  case notifications
  case members
  case search
  case leave
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum OpenChannelSettingItemType : Swift.Int {
  case participants
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ModerationItemType : Swift.Int {
  case operators
  case mutedMembers
  case bannedUsers
  case freezeChannel
  case mutedParticipants
  @available(*, unavailable, renamed: "bannedUsers")
  case bannedMembers
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum UserListType : Swift.Hashable {
  case none
  case createChannel
  case members
  case invite
  case reaction
  case operators
  case muted
  case banned
  case participants
  case suggestedMention(_: Swift.Bool)
  @available(*, unavailable, renamed: "members")
  case channelMembers
  @available(*, unavailable, renamed: "invite")
  case inviteUser
  @available(*, unavailable, renamed: "muted")
  case mutedMembers
  @available(*, unavailable, renamed: "banned")
  case bannedMembers
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SendbirdUIKit.UserListType, b: SendbirdUIKit.UserListType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChannelUserListType : Swift.Int {
  case none
  case members
  case operators
  case muted
  case banned
  case participants
  @available(*, unavailable, renamed: "members")
  case channelMembers
  @available(*, unavailable, renamed: "muted")
  case mutedMembers
  @available(*, unavailable, renamed: "banned")
  case bannedMembers
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ChannelInviteListType : Swift.Int {
  case none
  case users
  case operators
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ChannelPushSettingsSubType : Swift.Int, Swift.CaseIterable {
  case all
  case mention
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [SendbirdUIKit.ChannelPushSettingsSubType]
  public typealias RawValue = Swift.Int
  public static var allCases: [SendbirdUIKit.ChannelPushSettingsSubType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum EmptyViewType : Swift.Int {
  case none
  case noChannels
  case noMessages
  case noNotifications
  case noMembers
  case noMutedMembers
  case noMutedParticipants
  case noBannedUsers
  case noSearchResults
  case error
  @available(*, unavailable, renamed: "noBannedUsers")
  case noBannedMembers
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MediaResourceType : Swift.Int {
  case camera
  case library
  case document
  case unknown
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ChannelEditType : Swift.Int {
  case name
  case image
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessagePosition : Swift.Int {
  case left
  case right
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessageGroupPosition : Swift.Int {
  case none
  case top
  case middle
  case bottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, renamed: "SBUMessageFileType")
public typealias MessageFileType = SendbirdUIKit.SBUMessageFileType
@objc public enum SBUMessageFileType : Swift.Int {
  case image
  case video
  case audio
  case voice
  case pdf
  case etc
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SBUMessageReceiptState : Swift.Int {
  case none
  case delivered
  case read
  case notUsed
  @available(*, unavailable, renamed: "read")
  case readReceipt
  @available(*, unavailable, renamed: "delivered")
  case deliveryReceipt
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "Please refer to `setupMenuItems()` function in `SBUBaseChannelModule.List` or `SBUMenuSheetViewController`")
@objc public enum MessageEditItem : Swift.Int {
  case copy
  case edit
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "Please refer to `setupMenuItems()` function in `SBUBaseChannelModule.List` or `SBUMenuSheetViewController`")
public enum MessageMenuItem {
  case save
  case copy
  case edit
  case delete
  case reply
  public static func == (a: SendbirdUIKit.MessageMenuItem, b: SendbirdUIKit.MessageMenuItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum NewMessageInfoItemType : Swift.Int {
  case tooltip
  case button
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LogType : Swift.UInt8 {
  case none = 0b00000000
  case error = 0b00000001
  case warning = 0b00000010
  case info = 0b00000100
  case all = 0b00000111
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum SBUTypingIndicatorType {
  case text
  case bubble
  public static func == (a: SendbirdUIKit.SBUTypingIndicatorType, b: SendbirdUIKit.SBUTypingIndicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SBUSuggestedRepliesRenderType {
  case lastMessageOnly
  case allMessages
  public func shouldHideSuggestedReplies(message: SendbirdChatSDK.BaseMessage, fullMessageList: [SendbirdChatSDK.BaseMessage]) -> Swift.Bool
  public static func == (a: SendbirdUIKit.SBUSuggestedRepliesRenderType, b: SendbirdUIKit.SBUSuggestedRepliesRenderType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SBUSuggestedRepliesDirection {
  case vertical
  case horizontal
  public static func == (a: SendbirdUIKit.SBUSuggestedRepliesDirection, b: SendbirdUIKit.SBUSuggestedRepliesDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SBUScrollPosition {
  case bottom
  case middle
  case top
  public static func == (a: SendbirdUIKit.SBUScrollPosition, b: SendbirdUIKit.SBUScrollPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SBUChannelType {
  case group
  case superGroup
  public static func == (a: SendbirdUIKit.SBUChannelType, b: SendbirdUIKit.SBUChannelType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SBUExtendedMessagePayloadCustomViewFactoryInternal : AnyObject {
  static func makeCustomView(message: SendbirdChatSDK.BaseMessage?) -> UIKit.UIView?
  static func configure(with customView: UIKit.UIView, cell: SendbirdUIKit.SBUUserMessageCell)
}
extension SendbirdUIKit.SBUExtendedMessagePayloadCustomViewFactoryInternal {
  public static func configure(with customView: UIKit.UIView, cell: SendbirdUIKit.SBUUserMessageCell)
}
public protocol SBUExtendedMessagePayloadCustomViewFactory : SendbirdUIKit.SBUExtendedMessagePayloadCustomViewFactoryInternal {
  associatedtype ViewData : Swift.Decodable
  static func makeCustomView(_ data: Self.ViewData, message: SendbirdChatSDK.BaseMessage?) -> UIKit.UIView?
  static func errorHandler(_ error: any Swift.Error, message: SendbirdChatSDK.BaseMessage?) -> UIKit.UIView?
}
extension SendbirdUIKit.SBUExtendedMessagePayloadCustomViewFactory {
  public static func makeCustomView(message: SendbirdChatSDK.BaseMessage?) -> UIKit.UIView?
  public static func errorHandler(_ error: any Swift.Error, message: SendbirdChatSDK.BaseMessage?) -> UIKit.UIView?
}
public struct SBUExtendedMessagePayloadForUI : Swift.Decodable {
  @available(*, deprecated, message: "`containerType` has been deprecated since 3.27.2.")
  public let containerType: SendbirdUIKit.SBUMessageContainerType
  public init(from decoder: any Swift.Decoder) throws
}
@available(*, deprecated, message: "`SBUMessageContainerType` has been deprecated since 3.27.2.")
public enum SBUMessageContainerType : Swift.String, Swift.Decodable {
  case `default`
  case wide
  case full
  public init?(decodeRawValue: Swift.String)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class SBUFeedNotificationCellParams : SendbirdUIKit.SBUBaseMessageCellParams {
  public var adminMessage: SendbirdChatSDK.AdminMessage? {
    get
  }
  public var isTemplateLabelEnabled: Swift.Bool? {
    get
  }
  public var isCategoryFilterEnabled: Swift.Bool? {
    get
  }
  public init(message: SendbirdChatSDK.AdminMessage, hideDateView: Swift.Bool, isTemplateLabelEnabled: Swift.Bool?, isCategoryFilterEnabled: Swift.Bool?)
  @objc deinit
}
extension SendbirdUIKit.SBUFeedNotificationChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class CategoryFilter : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public func reloadCollectionView()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUFeedNotificationChannelModule.CategoryFilter : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension SendbirdUIKit.SBUFeedNotificationChannelModule.CategoryFilter : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBUFeedNotificationChannelModule.CategoryFilter : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
public class SBUFeedNotificationChannelModule {
  @available(*, deprecated, message: "Use `SBUFeedNotificationChannelModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUFeedNotificationChannelModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.FeedNotificationChannelModule`")
  required public init(_headerComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.FeedNotificationChannelModule`")
  required public init(_listComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.FeedNotificationChannelModule`")
  required public init(_headerComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.Header?, _listComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.List?)
  @objc deinit
}
extension SendbirdUIKit.SBUFeedNotificationChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class Header : UIKit.UIView {
    @available(*, unavailable, renamed: "SBUFeedNotificationChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUFeedNotificationChannelModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUFeedNotificationChannelModule {
  @_inheritsConvenienceInitializers @objc(SBUFeedNotificationChannelModuleList) @objcMembers @_Concurrency.MainActor(unsafe) public class List : UIKit.UIView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, SendbirdUIKit.SBUEmptyViewDelegate {
    @available(*, unavailable, renamed: "SBUFeedNotificationChannelModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUFeedNotificationChannelModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) required public init(viewParams: SendbirdUIKit.SBUFeedNotificationChannelViewParams? = nil)
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
    @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
    @objc @_Concurrency.MainActor(unsafe) public func didSelectRetry()
  }
}
extension SendbirdUIKit.SBUFeedNotificationChannelModule {
  public static var HeaderComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.Header.Type
  public static var CategoryFilterComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.CategoryFilter.Type
  public static var ListComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.List.Type
}
@objc @_Concurrency.MainActor(unsafe) open class SBUFeedNotificationChannelViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUCommonViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var categoryFilterComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.CategoryFilter?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUFeedNotificationChannelModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var allowsReadStatusUpdate: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelName: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.FeedChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var newNotificationsCount: Swift.Int {
    get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.FeedChannel, notificationListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = nil, displaysLocalCachedListFirst: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, notificationListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = nil, displaysLocalCachedListFirst: Swift.Bool = false, viewParams: SendbirdUIKit.SBUFeedNotificationChannelViewParams? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func reloadChannel(channelURL: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func updateLastSeenAt(timestamp: Swift.Int64? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func didUpdateUnreadMessageCount(_ unreadMessageCount: Swift.UInt)
  @objc @_Concurrency.MainActor(unsafe) public func updateChannelTitle()
  @_Concurrency.MainActor(unsafe) open func handleWebAction(_ action: SendbirdUIKit.SBUMessageTemplate.Action, notification: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func handleCustomAction(_ action: SendbirdUIKit.SBUMessageTemplate.Action, notification: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateLayouts()
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
}
public struct SBUFeedNotificationChannelViewParams {
  public let showEmptyViewIcon: Swift.Bool
  public init(showEmptyViewIcon: Swift.Bool)
}
public struct SBUFeedbackAnswer {
}
extension SendbirdUIKit.SBUFeedbackAnswer {
  public enum Action {
    case rating
    case modify
    public static func == (a: SendbirdUIKit.SBUFeedbackAnswer.Action, b: SendbirdUIKit.SBUFeedbackAnswer.Action) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func showCommentPopup(answer: SendbirdUIKit.SBUFeedbackAnswer, handler: @escaping ((SendbirdUIKit.SBUFeedbackAnswer) -> Swift.Void))
  public static func showModifications(theme: SendbirdUIKit.SBUChannelTheme?, answer: SendbirdUIKit.SBUFeedbackAnswer, updateHandler: @escaping ((SendbirdUIKit.SBUFeedbackAnswer) -> Swift.Void), deleteHandler: @escaping ((SendbirdUIKit.SBUFeedbackAnswer) -> Swift.Void))
}
public protocol SBUFeedbackViewDelegate : AnyObject {
  func feedbackView(_ view: SendbirdUIKit.SBUFeedbackView, didAnswer answer: SendbirdUIKit.SBUFeedbackAnswer)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUFeedbackView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var feedback: SendbirdChatSDK.Feedback? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var status: SendbirdChatSDK.Feedback.Status? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var messageId: Swift.Int64? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var params: SendbirdUIKit.SBUFeedbackViewParams? {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUFeedbackViewDelegate)?
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: SendbirdUIKit.SBUFeedbackViewParams, delegate: (any SendbirdUIKit.SBUFeedbackViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUSimpleFeedbackView : SendbirdUIKit.SBUFeedbackView {
  @_Concurrency.MainActor(unsafe) public var container: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var goodButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public var badButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func onClickLike()
  @objc @_Concurrency.MainActor(unsafe) open func onClickDislike()
  @_Concurrency.MainActor(unsafe) open func onAction(with action: SendbirdUIKit.SBUFeedbackAnswer.Action, rating: SendbirdChatSDK.Feedback.Rating)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct SBUFeedbackViewParams {
  public let messageId: Swift.Int64
  public let feedback: SendbirdChatSDK.Feedback?
  public let status: SendbirdChatSDK.Feedback.Status
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUFileMessageCell : SendbirdUIKit.SBUContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var fileMessage: SendbirdChatSDK.FileMessage? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var baseFileContentView: SendbirdUIKit.SBUBaseFileContentView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  @_Concurrency.MainActor(unsafe) override open func configure(highlightInfo: SendbirdUIKit.SBUHighlightMessageInfo?)
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, size: CoreFoundation.CGSize? = nil)
  @available(*, deprecated, renamed: "configure(with:)")
  @_Concurrency.MainActor(unsafe) open func configure(_ message: SendbirdChatSDK.FileMessage, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition, receiptState: SendbirdUIKit.SBUMessageReceiptState?, useReaction: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func resetMainContainerViewLayer()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class SBUFileMessageCellParams : SendbirdUIKit.SBUBaseMessageCellParams {
  public var fileMessage: SendbirdChatSDK.FileMessage? {
    get
  }
  final public let useReaction: Swift.Bool
  public var voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo?
  final public let enableEmojiLongPress: Swift.Bool
  public init(message: SendbirdChatSDK.FileMessage, hideDateView: Swift.Bool, useMessagePosition: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition = .none, receiptState: SendbirdUIKit.SBUMessageReceiptState = .none, useReaction: Swift.Bool = false, isThreadMessage: Swift.Bool = false, joinedAt: Swift.Int64 = 0, messageOffsetTimestamp: Swift.Int64 = 0, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo? = nil, enableEmojiLongPress: Swift.Bool = true)
  @objc deinit
}
@available(*, deprecated, renamed: "SBUFileViewController")
public typealias SBUFileViewer = SendbirdUIKit.SBUFileViewController
@available(*, deprecated, renamed: "SBUFileViewControllerDelegate")
public typealias SBUFileViewerDelegate = SendbirdUIKit.SBUFileViewControllerDelegate
public protocol SBUFileViewControllerDelegate : AnyObject {
  func didSelectDeleteImage(message: SendbirdChatSDK.FileMessage)
}
public struct SBUFileData {
}
@objc @_Concurrency.MainActor(unsafe) open class SBUFileViewController : SendbirdUIKit.SBUBaseViewController, UIKit.UIScrollViewDelegate, SendbirdUIKit.SBUAlertViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView! {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bottomView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) required convenience public init(fileMessage: SendbirdChatSDK.FileMessage, delegate: (any SendbirdUIKit.SBUFileViewControllerDelegate)?)
  @_Concurrency.MainActor(unsafe) required public init(fileData: SendbirdUIKit.SBUFileData, delegate: (any SendbirdUIKit.SBUFileViewControllerDelegate)?)
  @available(*, unavailable, renamed: "init(params:delegate:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func onClickBack()
  @objc @_Concurrency.MainActor(unsafe) open func onClickDelete(sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) open func onClickDownload(sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor(unsafe) open func onClickImage(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func showBar(_ shouldShow: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onSaveImage(_ image: UIKit.UIImage, didFinishSavingWithError error: Foundation.NSError?, contextInfo: Swift.UnsafeRawPointer)
  @_Concurrency.MainActor(unsafe) @objc public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) open func didDismissAlertView()
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @available(*, unavailable, renamed: "errorHandler(_:_:)")
  @_Concurrency.MainActor(unsafe) open func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUFontSet {
  public static var h1: UIKit.UIFont
  public static var h2: UIKit.UIFont
  public static var h3: UIKit.UIFont
  public static var body1: UIKit.UIFont
  public static var body2: UIKit.UIFont
  public static var body3: UIKit.UIFont
  public static var body4: UIKit.UIFont
  public static var button1: UIKit.UIFont
  public static var button2: UIKit.UIFont
  public static var button3: UIKit.UIFont
  public static var button4: UIKit.UIFont
  public static var caption1: UIKit.UIFont
  public static var caption2: UIKit.UIFont
  public static var caption3: UIKit.UIFont
  public static var caption4: UIKit.UIFont
  public static var subtitle1: UIKit.UIFont
  public static var subtitle2: UIKit.UIFont
  public static var subtitle3: UIKit.UIFont
  @objc deinit
}
extension SendbirdUIKit.SBUFontSet {
  @_hasMissingDesignatedInitializers public class FontFamily {
    public static var notifications: Swift.String?
    @objc deinit
  }
}
extension SendbirdUIKit.SBUFontSet {
  public static func restoreDefaultFonts()
}
@available(*, unavailable, message: "Use `SendbirdChatSDK.Form`")
public struct SBUForm : Swift.Codable {
  public typealias FormData = [Swift.String : Swift.String]
  public let formKey: Swift.String
  public let fields: [SendbirdUIKit.SBUForm.Field]
  public let data: SendbirdUIKit.SBUForm.FormData?
  public let messagesAfterSubmission: [Swift.String]?
  public var isSubmitted: Swift.Bool {
    get
  }
  public func canSubmit(with answer: SendbirdUIKit.SBUForm.Answer?) -> Swift.Bool
  public struct Field : Swift.Codable {
    public let fieldKey: Swift.String
    public let title: Swift.String
    public let inputType: Swift.String
    public let required: Swift.Bool
    public let regex: Swift.String?
    public let placeholder: Swift.String?
    public struct Updated {
      public let formKey: Swift.String
      public let fieldKey: Swift.String
      public let value: Swift.String
    }
    public enum InputTypeValue : Swift.String, Swift.Codable {
      case text
      case phone
      case email
      case password
      public var keyboardType: UIKit.UIKeyboardType {
        get
      }
      public var isSecureText: Swift.Bool {
        get
      }
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var inputTypeValue: SendbirdUIKit.SBUForm.Field.InputTypeValue {
      get
    }
    public func isValid(with value: Swift.String?, isStrict: Swift.Bool = false) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Answer {
    public let formKey: Swift.String
    public let data: SendbirdUIKit.SBUForm.FormData
    public func update(with updated: SendbirdUIKit.SBUForm.Field.Updated) -> SendbirdUIKit.SBUForm.Answer?
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SendbirdUIKit.SBUUserMessageCellParams {
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  public var formAnswers: [SendbirdUIKit.SBUForm.Answer] {
    get
  }
}
extension SendbirdUIKit.SBUUserMessageCell {
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  @_Concurrency.MainActor(unsafe) public func updateFormView(with forms: [SendbirdUIKit.SBUForm]?, answers: [SendbirdUIKit.SBUForm.Answer]) -> Swift.Bool
}
@available(*, unavailable, message: "This model is no longer used internally.")
extension SendbirdUIKit.SBUFormView {
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  @_Concurrency.MainActor(unsafe) public var answer: SendbirdUIKit.SBUForm.Answer? {
    get
  }
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  @_Concurrency.MainActor(unsafe) public func createFormFieldViews(with form: SendbirdUIKit.SBUForm?) -> [SendbirdUIKit.SBUFormFieldView]
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  @_Concurrency.MainActor(unsafe) public func formFieldView(_ view: SendbirdUIKit.SBUFormFieldView, didUpdate updated: SendbirdUIKit.SBUForm.Field.Updated)
}
@available(*, unavailable, message: "This model is no longer used internally.")
extension SendbirdUIKit.SBUFormFieldView {
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  @_Concurrency.MainActor(unsafe) public func configure(form: SendbirdUIKit.SBUForm, field: SendbirdUIKit.SBUForm.Field, value: Swift.String?, delegate: (any SendbirdUIKit.SBUFormFieldViewDelegate)? = nil)
}
extension SendbirdUIKit.SBUGroupChannelModuleListDelegate {
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  public func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSubmit answer: SendbirdUIKit.SBUForm.Answer, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  public func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didUpdate answer: SendbirdUIKit.SBUForm.Answer, messageCell: SendbirdUIKit.SBUBaseMessageCell)
}
extension SendbirdUIKit.SBUGroupChannelViewController {
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  @_Concurrency.MainActor(unsafe) public func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSubmit answer: SendbirdUIKit.SBUForm.Answer, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  @_Concurrency.MainActor(unsafe) public func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didUpdate answer: SendbirdUIKit.SBUForm.Answer, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  @_Concurrency.MainActor(unsafe) public func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, answersFor messageId: Swift.Int64?) -> [SendbirdUIKit.SBUForm.Answer]?
}
@available(*, unavailable, message: "This model is no longer used internally.")
extension SendbirdUIKit.SBUFormFieldView.StatusType {
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  public init(form: SendbirdUIKit.SBUForm, field: SendbirdUIKit.SBUForm.Field, value: Swift.String?)
}
extension SendbirdUIKit.SBUGroupChannelViewModel {
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  public func submitForm(message: SendbirdChatSDK.BaseMessage, answer: SendbirdUIKit.SBUForm.Answer)
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  public func updateForm(message: SendbirdChatSDK.BaseMessage, answer: SendbirdUIKit.SBUForm.Answer)
}
extension SendbirdUIKit.SBUGroupChannelModuleListDataSource {
  @available(*, unavailable, message: "This model is no longer used internally. Changed to use `SendbirdChatSDK.Form`.")
  public func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, answersFor messageId: Swift.Int64?) -> [SendbirdUIKit.SBUForm.Answer]?
}
@available(*, deprecated, message: "This method is deprecated in 3.27.0")
public protocol SBUFormFieldViewDelegate : AnyObject {
  func formFieldView(_ fieldView: SendbirdUIKit.SBUFormFieldView, didUpdate formField: SendbirdChatSDK.FormField)
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SBUMessageFormItemView", message: "This method is deprecated in 3.27.0")
@_Concurrency.MainActor(unsafe) public class SBUFormFieldView : SendbirdUIKit.SBUView, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var formKey: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var formField: SendbirdChatSDK.FormField? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var status: SendbirdUIKit.SBUFormFieldView.StatusType
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUFormFieldViewDelegate)?
  @_Concurrency.MainActor(unsafe) open func configure(form: SendbirdChatSDK.Form, field: SendbirdChatSDK.FormField, delegate: (any SendbirdUIKit.SBUFormFieldViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SBUMessageFormItemView", message: "This method is deprecated in 3.27.0")
@_Concurrency.MainActor(unsafe) public class SBUSimpleFormFieldView : SendbirdUIKit.SBUFormFieldView {
  @_Concurrency.MainActor(unsafe) public var stackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var titleStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var optionalTitleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var topSpaceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var inputContainer: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var inputStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var inputFieldView: UIKit.UITextField
  @_Concurrency.MainActor(unsafe) public var inputIconView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var bottomSpaceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var errorTitleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func onChangeFieldValue(textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) open func updateInputValidation()
  @_Concurrency.MainActor(unsafe) open func updateInputData()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@available(*, deprecated, message: "This method is deprecated in 3.27.0")
extension SendbirdUIKit.SBUFormFieldView {
  @available(*, deprecated, message: "This method is deprecated in 3.27.0")
  public enum StatusType {
    case done(value: Swift.String)
    case optional
    case editing(value: Swift.String?)
    case unknown
    public init(form: SendbirdChatSDK.Form, field: SendbirdChatSDK.FormField)
    public var text: Swift.String? {
      get
    }
    public var isDone: Swift.Bool {
      get
    }
    public var isOptional: Swift.Bool {
      get
    }
    public var isEditable: Swift.Bool {
      get
    }
  }
}
@available(*, deprecated, message: "This method is deprecated in 3.27.0")
public enum SBUFormFieldInputType : Swift.String, Swift.Codable {
  case text
  case phone
  case email
  case password
  public var keyboardType: UIKit.UIKeyboardType {
    get
  }
  public var isSecureText: Swift.Bool {
    get
  }
  public init(value: Swift.String?)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(*, deprecated, message: "This method is deprecated in 3.27.0")
public protocol SBUFormViewDelegate : AnyObject {
  func formView(_ view: SendbirdUIKit.SBUFormView, didSubmit form: SendbirdChatSDK.Form)
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SBUMessageFormView", message: "This method is deprecated in 3.27.0")
@_Concurrency.MainActor(unsafe) open class SBUFormView : SendbirdUIKit.SBUView, SendbirdUIKit.SBUFormFieldViewDelegate {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var form: SendbirdChatSDK.Form? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var messageId: Swift.Int64? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var params: SendbirdUIKit.SBUFormViewParams? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var fieldViews: [SendbirdUIKit.SBUFormFieldView]?
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUFormViewDelegate)?
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: SendbirdUIKit.SBUFormViewParams, delegate: (any SendbirdUIKit.SBUFormViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) open func createFieldView() -> SendbirdUIKit.SBUFormFieldView
  @_Concurrency.MainActor(unsafe) open func createFormFieldViews(with form: SendbirdChatSDK.Form?) -> [SendbirdUIKit.SBUFormFieldView]
  @_Concurrency.MainActor(unsafe) open func formFieldView(_ fieldView: SendbirdUIKit.SBUFormFieldView, didUpdate formField: SendbirdChatSDK.FormField)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SBUMessageFormView", message: "This method is deprecated in 3.27.0")
@_Concurrency.MainActor(unsafe) open class SBUSimpleFormView : SendbirdUIKit.SBUFormView {
  @_Concurrency.MainActor(unsafe) public var container: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var submitButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func onSubmit()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@available(*, deprecated, message: "This method is deprecated in 3.27.0")
public struct SBUFormViewParams {
  public let messageId: Swift.Int64
  public let form: SendbirdChatSDK.Form
}
@_hasMissingDesignatedInitializers public class SBUGlobalCustomParams {
  public static var groupChannelParamsCreateBuilder: ((_ params: SendbirdChatSDK.GroupChannelCreateParams?) -> Swift.Void)?
  public static var groupChannelParamsUpdateBuilder: ((_ params: SendbirdChatSDK.GroupChannelUpdateParams?) -> Swift.Void)?
  public static var openChannelParamsCreateBuilder: ((_ params: SendbirdChatSDK.OpenChannelCreateParams?) -> Swift.Void)?
  public static var openChannelParamsUpdateBuilder: ((_ params: SendbirdChatSDK.OpenChannelUpdateParams?) -> Swift.Void)?
  public static var userMessageParamsSendBuilder: ((_ params: SendbirdChatSDK.UserMessageCreateParams?) -> Swift.Void)?
  public static var userMessageParamsUpdateBuilder: ((_ params: SendbirdChatSDK.UserMessageUpdateParams?) -> Swift.Void)?
  public static var fileMessageParamsSendBuilder: ((_ params: SendbirdChatSDK.FileMessageCreateParams?) -> Swift.Void)?
  public static var voiceFileMessageParamsSendBuilder: ((_ params: SendbirdChatSDK.FileMessageCreateParams?) -> Swift.Void)?
  public static var multipleFilesMessageParamsSendBuilder: ((_ params: SendbirdChatSDK.MultipleFilesMessageCreateParams?) -> Swift.Void)?
  public static var messageListParamsBuilder: ((_ params: SendbirdChatSDK.MessageListParams?) -> Swift.Void)?
  @objc deinit
}
extension SendbirdUIKit.SBUGlobals {
  @available(*, deprecated, renamed: "applicationId")
  public static var ApplicationId: Swift.String? {
    get
    set
  }
  @available(*, deprecated, renamed: "accessToken")
  public static var AccessToken: Swift.String? {
    get
    set
  }
  @available(*, deprecated, renamed: "currentUser")
  public static var CurrentUser: SendbirdUIKit.SBUUser? {
    get
    set
  }
  @available(*, deprecated, renamed: "isMessageGroupingEnabled")
  public static var UsingMessageGrouping: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, renamed: "replyType")
  public static var ReplyTypeToUse: SendbirdUIKit.SBUReplyType {
    get
    set
  }
  @available(*, deprecated, renamed: "SendbirdUI.config.groupChannel.channel.replyType")
  public static var replyType: SendbirdUIKit.SBUReplyType {
    get
    set
  }
  @available(*, deprecated, renamed: "isPHPickerEnabled")
  public static var UsingPHPicker: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, renamed: "SendbirdUI.config.common.isUsingDefaultUserProfileEnabled")
  public static var UsingUserProfile: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, renamed: "SendbirdUI.config.common.isUsingDefaultUserProfileEnabled")
  public static var UsingUserProfileInOpenChannel: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, renamed: "isImageCompressionEnabled")
  public static var UsingImageCompression: Swift.Bool {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class SBUGlobals {
  public static var applicationId: Swift.String?
  public static var accessToken: Swift.String?
  public static var currentUser: SendbirdUIKit.SBUUser?
  @available(*, deprecated, renamed: "SendbirdUI.config.groupChannel.channelList.isTypingIndicatorEnabled")
  public static var isChannelListTypingIndicatorEnabled: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, renamed: "SendbirdUI.config.groupChannel.channelList.isMessageReceiptStatusEnabled")
  public static var isChannelListMessageReceiptStateEnabled: Swift.Bool {
    get
    set
  }
  public static var isMessageGroupingEnabled: Swift.Bool
  public static var reply: SendbirdUIKit.SBUReplyConfiguration
  @available(iOS 14, *)
  public static var isPHPickerEnabled: Swift.Bool
  @available(iOS 14, *)
  public static var photoLibraryAccessLevel: SendbirdUIKit.SBUPhotoAccessLevel
  @available(*, deprecated, renamed: "SendbirdUI.config.common.isUsingDefaultUserProfileEnabled")
  public static var isUserProfileEnabled: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, renamed: "SendbirdUI.config.common.isUsingDefaultUserProfileEnabled")
  public static var isOpenChannelUserProfileEnabled: Swift.Bool {
    get
    set
  }
  public static var isImageCompressionEnabled: Swift.Bool
  public static var imageCompressionRate: CoreFoundation.CGFloat
  public static var imageResizingSize: CoreFoundation.CGSize
  public static var userMentionConfig: SendbirdUIKit.SBUUserMentionConfiguration?
  @available(*, deprecated, renamed: "SendbirdUI.config.groupChannel.channel.isMentionEnabled")
  public static var isUserMentionEnabled: Swift.Bool {
    get
    set
  }
  public static var messageCellConfiguration: SendbirdUIKit.SBUMessageCellConfiguration {
    get
  }
  public static var isUserIdUsedForNickname: Swift.Bool
  public static var voiceMessageConfig: SendbirdUIKit.SBUVoiceMessageConfiguration {
    get
  }
  public static var isAVPlayerAlwaysEnabled: Swift.Bool
  public static var isTintColorEnabledForCustomizedIcon: Swift.Bool
  public static var isCustomizedIconResizable: Swift.Bool
  public static var scrollPostionConfiguration: SendbirdUIKit.SBUScrollPostionConfiguration
  public static var wsHost: Swift.String?
  public static var apiHost: Swift.String?
  public static var emojiCategoryFilter: (_ message: SendbirdChatSDK.BaseMessage) -> [Swift.Int64]?
  public static var loadingIndicator: SendbirdUIKit.SBUGlobals.LoadingIndicator
  @objc deinit
}
extension SendbirdUIKit.SBUGlobals {
  @_hasMissingDesignatedInitializers public class LoadingIndicator {
    public var groupChannel: SendbirdUIKit.SBUGlobals.LoadingIndicator.GroupChannel
    public var groupChannelList: SendbirdUIKit.SBUGlobals.LoadingIndicator.GroupChannelList
    @_hasMissingDesignatedInitializers public class GroupChannelList {
      public var cachedChannels: Swift.Bool
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class GroupChannel {
      public var cachedMessages: Swift.Bool
      @objc deinit
    }
    @objc deinit
  }
}
@available(*, deprecated, renamed: "SBUGroupChannelCell")
public typealias SBUChannelCell = SendbirdUIKit.SBUGroupChannelCell
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUGroupChannelCell : SendbirdUIKit.SBUBaseChannelCell {
  @objc @_Concurrency.MainActor(unsafe) public var coverImage: SendbirdUIKit.SBUCoverImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var broadcastIcon: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var memberCountLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var freezeState: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var notificationState: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var lastUpdatedTimeLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var unreadMentionLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var unreadCount: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var separatorLine: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let titleSpacer: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let messageSpacer: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let coverImageSize: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public let unreadCountSize: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public let infoIconSize: CoreFoundation.CGFloat
  @objc @available(*, deprecated, renamed: "coverImageSize")
  @_Concurrency.MainActor(unsafe) public var kCoverImageSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "unreadCountSize")
  @_Concurrency.MainActor(unsafe) public var kUnreadCountSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "infoIconSize")
  @_Concurrency.MainActor(unsafe) public var kInfoIconSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @available(*, unavailable, renamed: "sideMarging")
  @_Concurrency.MainActor(unsafe) public var kSideMarging: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var infoStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUGroupChannelCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func configure(channel: SendbirdChatSDK.BaseChannel)
  @objc @_Concurrency.MainActor(unsafe) open func updateMessageLabel()
  @objc @_Concurrency.MainActor(unsafe) open func updateStateImageView()
  @objc @_Concurrency.MainActor(unsafe) public func buildLastUpdatedDate() -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SendbirdUIKit.SBUGroupChannelListModule {
  @_hasMissingDesignatedInitializers open class Common {
    @objc deinit
  }
}
open class SBUGroupChannelListModule {
  @available(*, deprecated, message: "Use `SBUGroupChannelListModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUGroupChannelListModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUGroupChannelListModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUGroupChannelListModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelListModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelListModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelListModule`")
  required public init(listComponent: SendbirdUIKit.SBUGroupChannelListModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelListModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelListModule.Header?, listComponent: SendbirdUIKit.SBUGroupChannelListModule.List?)
  @objc deinit
}
public protocol SBUGroupChannelListModuleHeaderDelegate : SendbirdUIKit.SBUBaseChannelListModuleHeaderDelegate {
}
extension SendbirdUIKit.SBUGroupChannelListModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseChannelListModule.Header {
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUGroupChannelListTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUGroupChannelListModuleHeaderDelegate)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBUGroupChannelListModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUGroupChannelListModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUGroupChannelListModuleHeaderDelegate, theme: SendbirdUIKit.SBUGroupChannelListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUGroupChannelListTheme? = nil)
  }
}
public protocol SBUGroupChannelListModuleListDelegate : SendbirdUIKit.SBUBaseChannelListModuleListDelegate {
  func groupChannelListModule(_ listComponent: SendbirdUIKit.SBUGroupChannelListModule.List, didSelectLeave channel: SendbirdChatSDK.GroupChannel)
  func groupChannelListModule(_ listComponent: SendbirdUIKit.SBUGroupChannelListModule.List, didChangePushTriggerOption option: SendbirdChatSDK.GroupChannelPushTriggerOption, channel: SendbirdChatSDK.GroupChannel)
}
public protocol SBUGroupChannelListModuleListDataSource : SendbirdUIKit.SBUBaseChannelListModuleListDataSource {
}
extension SendbirdUIKit.SBUGroupChannelListModule {
  @_inheritsConvenienceInitializers @objc(SBUGroupChannelListModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseChannelListModule.List {
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUGroupChannelListTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUGroupChannelListModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUGroupChannelListModuleListDataSource)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) public var channelList: [SendbirdChatSDK.GroupChannel]? {
      @objc get
    }
    @available(*, unavailable, renamed: "SBUGroupChannelListModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUGroupChannelListModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUGroupChannelListModuleListDelegate, dataSource: any SendbirdUIKit.SBUGroupChannelListModuleListDataSource, theme: SendbirdUIKit.SBUGroupChannelListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUGroupChannelListTheme? = nil)
    @_Concurrency.MainActor(unsafe) @objc override open func reloadTableView()
    @objc @_Concurrency.MainActor(unsafe) public func leaveContextualAction(with indexPath: Foundation.IndexPath) -> UIKit.UIContextualAction?
    @objc @_Concurrency.MainActor(unsafe) public func alarmContextualAction(with indexPath: Foundation.IndexPath) -> UIKit.UIContextualAction?
  }
}
extension SendbirdUIKit.SBUGroupChannelListModule.List {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
}
extension SendbirdUIKit.SBUGroupChannelListModule {
  public static var HeaderComponent: SendbirdUIKit.SBUGroupChannelListModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUGroupChannelListModule.List.Type
  public static var CommonComponent: SendbirdUIKit.SBUGroupChannelListModule.Common.Type
}
extension SendbirdUIKit.SBUGroupChannelListModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
}
extension SendbirdUIKit.SBUGroupChannelListModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var ChannelCell: SendbirdUIKit.SBUBaseChannelCell.Type
}
extension SendbirdUIKit.SBUGroupChannelListModule.Common {
  public static var CreateChannelTypeSelector: SendbirdUIKit.SBUCreateChannelTypeSelector.Type
}
extension SendbirdUIKit.SBUModuleSet {
  public typealias GroupChannelList = SendbirdUIKit.SBUGroupChannelListModule
  public typealias Header = SendbirdUIKit.SBUGroupChannelListModule.Header
  public typealias List = SendbirdUIKit.SBUGroupChannelListModule.List
  public typealias Common = SendbirdUIKit.SBUGroupChannelListModule.Common
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUGroupChannelListViewController : SendbirdUIKit.SBUBaseChannelListViewController, SendbirdUIKit.SBUGroupChannelListModuleHeaderDelegate, SendbirdUIKit.SBUGroupChannelListModuleListDelegate, SendbirdUIKit.SBUGroupChannelListModuleListDataSource, SendbirdUIKit.SBUCreateChannelTypeSelectorDelegate, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUGroupChannelListViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUGroupChannelListModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUGroupChannelListModule.List? {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUGroupChannelListTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var createChannelTypeSelector: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUGroupChannelListViewModel? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelList: [SendbirdChatSDK.GroupChannel] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var enableCreateChannelTypeSelector: Swift.Bool
  @available(*, unavailable, renamed: "SBUGroupChannelListViewController()")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUGroupChannelListViewController()")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) required public init(channelListQuery: SendbirdChatSDK.GroupChannelListQuery? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(channelListQuery: SendbirdChatSDK.GroupChannelListQuery?)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func loadChannelTypeSelector()
  @_Concurrency.MainActor(unsafe) @objc override open func showChannel(channelURL: Swift.String, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func showCreateChannelOrTypeSelector()
  @objc @_Concurrency.MainActor(unsafe) open func showCreateChannelTypeSelector()
  @_Concurrency.MainActor(unsafe) open func showCreateChannel(type: SendbirdUIKit.ChannelCreationType = .group)
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List)
  @objc @_Concurrency.MainActor(unsafe) public func baseChannelListModuleDidSelectRefresh(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelListModule(_ listComponent: SendbirdUIKit.SBUGroupChannelListModule.List, didSelectLeave channel: SendbirdChatSDK.GroupChannel)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelListModule(_ listComponent: SendbirdUIKit.SBUGroupChannelListModule.List, didChangePushTriggerOption option: SendbirdChatSDK.GroupChannelPushTriggerOption, channel: SendbirdChatSDK.GroupChannel)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List, channelsInTableView tableView: UIKit.UITableView) -> [SendbirdChatSDK.BaseChannel]?
  @objc @_Concurrency.MainActor(unsafe) open func didSelectCloseSelector()
  @objc @_Concurrency.MainActor(unsafe) open func didSelectCreateGroupChannel()
  @objc @_Concurrency.MainActor(unsafe) open func didSelectCreateSuperGroupChannel()
  @objc @_Concurrency.MainActor(unsafe) open func didSelectCreateBroadcastChannel()
  @objc @_Concurrency.MainActor(unsafe) open func connectionStateDidChange(_ isConnected: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelListViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelListViewModel, didChangeChannelList channels: [SendbirdChatSDK.GroupChannel]?, needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelListViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelListViewModel, didUpdateChannel channel: SendbirdChatSDK.GroupChannel)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelListViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelListViewModel, didLeaveChannel channel: SendbirdChatSDK.GroupChannel)
}
public protocol SBUGroupChannelListViewModelDelegate : SendbirdUIKit.SBUBaseChannelListViewModelDelegate {
  func groupChannelListViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelListViewModel, didChangeChannelList channels: [SendbirdChatSDK.GroupChannel]?, needsToReload: Swift.Bool)
  func groupChannelListViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelListViewModel, didUpdateChannel channel: SendbirdChatSDK.GroupChannel)
  func groupChannelListViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelListViewModel, didLeaveChannel channel: SendbirdChatSDK.GroupChannel)
}
@objc open class SBUGroupChannelListViewModel : SendbirdUIKit.SBUBaseChannelListViewModel {
  public var channelList: [SendbirdChatSDK.GroupChannel] {
    get
  }
  public var channelCollection: SendbirdChatSDK.GroupChannelCollection? {
    get
  }
  public var channelListQuery: SendbirdChatSDK.GroupChannelListQuery? {
    get
  }
  required public init(delegate: (any SendbirdUIKit.SBUGroupChannelListViewModelDelegate)? = nil, channelListQuery: SendbirdChatSDK.GroupChannelListQuery? = nil)
  @objc deinit
  override public func initChannelList()
  override public func loadNextChannelList(reset: Swift.Bool)
  override public func reset()
  public func leaveChannel(_ channel: SendbirdChatSDK.GroupChannel)
  public func changePushTriggerOption(option: SendbirdChatSDK.GroupChannelPushTriggerOption, channel: SendbirdChatSDK.GroupChannel)
}
extension SendbirdUIKit.SBUGroupChannelListViewModel : SendbirdChatSDK.GroupChannelCollectionDelegate {
  @objc dynamic open func channelCollection(_ collection: SendbirdChatSDK.GroupChannelCollection, context: SendbirdChatSDK.ChannelContext, deletedChannelURLs: [Swift.String])
  @objc dynamic open func channelCollection(_ collection: SendbirdChatSDK.GroupChannelCollection, context: SendbirdChatSDK.ChannelContext, addedChannels channels: [SendbirdChatSDK.GroupChannel])
  @objc dynamic open func channelCollection(_ collection: SendbirdChatSDK.GroupChannelCollection, context: SendbirdChatSDK.ChannelContext, updatedChannels channels: [SendbirdChatSDK.GroupChannel])
}
extension SendbirdUIKit.SBUGroupChannelListViewModel : SendbirdChatSDK.GroupChannelDelegate {
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
  @objc dynamic open func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  @objc dynamic open func channelWasFrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelWasUnfrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
}
open class SBUGroupChannelModule {
  @available(*, deprecated, message: "Use `SBUGroupChannelModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUGroupChannelModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUGroupChannelModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUGroupChannelModule.List? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUGroupChannelModule.InputComponent` instead.")
  public var inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelModule`")
  required public init(listComponent: SendbirdUIKit.SBUGroupChannelModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelModule`")
  required public init(inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelModule.Header?, listComponent: SendbirdUIKit.SBUGroupChannelModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelModule.Header?, inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelModule`")
  required public init(listComponent: SendbirdUIKit.SBUGroupChannelModule.List?, inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelModule.Header?, listComponent: SendbirdUIKit.SBUGroupChannelModule.List?, inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input?)
  @objc deinit
}
public protocol SBUGroupChannelModuleHeaderDelegate : SendbirdUIKit.SBUBaseChannelModuleHeaderDelegate {
}
extension SendbirdUIKit.SBUGroupChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseChannelModule.Header {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUGroupChannelModuleHeaderDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUGroupChannelModuleHeaderDelegate, theme: SendbirdUIKit.SBUChannelTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapRightBarButton()
    @objc deinit
  }
}
public protocol SBUGroupChannelModuleInputDelegate : SendbirdUIKit.SBUBaseChannelModuleInputDelegate {
  func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, didPickFileData fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage?)
  func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, didPickMultipleFiles fileInfoList: [SendbirdChatSDK.UploadableFileInfo]?, parentMessage: SendbirdChatSDK.BaseMessage?)
  func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, didTapSend text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String], parentMessage: SendbirdChatSDK.BaseMessage?)
  func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, didTapEdit text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
  func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
  func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, shouldLoadSuggestedMentions filterText: Swift.String)
  func groupChannelModuleShouldStopSuggestingMention(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input)
  func groupChannelModuleDidTapVoiceMessage(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input)
}
public protocol SBUGroupChannelModuleInputDataSource : SendbirdUIKit.SBUBaseChannelModuleInputDataSource {
}
extension SendbirdUIKit.SBUGroupChannelModule {
  @_inheritsConvenienceInitializers @objc(SBUGroupChannelModuleInput) @objcMembers @_Concurrency.MainActor(unsafe) open class Input : SendbirdUIKit.SBUBaseChannelModule.Input, SendbirdUIKit.SBUMentionManagerDelegate, SendbirdUIKit.SBUSuggestedMentionListDelegate {
    @objc @_Concurrency.MainActor(unsafe) public var suggestedMentionList: SendbirdUIKit.SBUSuggestedMentionList?
    @objc @_Concurrency.MainActor(unsafe) public var currentQuotedMessage: SendbirdChatSDK.BaseMessage? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.GroupChannel? {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUGroupChannelModuleInputDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUGroupChannelModuleInputDataSource)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var mentionManagerDataSource: (any SendbirdUIKit.SBUMentionManagerDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var mentionManager: SendbirdUIKit.SBUMentionManager?
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUGroupChannelModuleInputDelegate, dataSource: any SendbirdUIKit.SBUGroupChannelModuleInputDataSource, mentionManagerDataSource: (any SendbirdUIKit.SBUMentionManagerDataSource)? = nil, theme: SendbirdUIKit.SBUChannelTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override open func pickImageFile(info: [UIKit.UIImagePickerController.InfoKey : Any])
    @_Concurrency.MainActor(unsafe) @objc override open func pickVideoFile(info: [UIKit.UIImagePickerController.InfoKey : Any])
    @objc @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) open func pickMultipleImageFiles(itemProviders: [Foundation.NSItemProvider])
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) @objc override open func pickImageFile(itemProvider: Foundation.NSItemProvider)
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) @objc override open func pickGIFFile(itemProvider: Foundation.NSItemProvider)
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) @objc override open func pickVideoFile(itemProvider: Foundation.NSItemProvider)
    @_Concurrency.MainActor(unsafe) @objc override open func pickDocumentFile(documentURLs: [Foundation.URL])
    @_Concurrency.MainActor(unsafe) @objc override open func pickImageData(_ data: Foundation.Data, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
    @_Concurrency.MainActor(unsafe) @objc override open func pickVideoURL(_ url: Foundation.URL)
    @_Concurrency.MainActor(unsafe) @objc override open func updateMessageInputMode(_ mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage? = nil)
    @_Concurrency.MainActor(unsafe) @objc override open func updateMessageInputModeState()
    @_Concurrency.MainActor(unsafe) @objc override open func updateFrozenModeState()
    @objc @_Concurrency.MainActor(unsafe) open func updateBroadcastModeState()
    @objc @_Concurrency.MainActor(unsafe) open func updateMutedModeState()
    @objc @_Concurrency.MainActor(unsafe) open func updateNotificationModeState()
    @objc @_Concurrency.MainActor(unsafe) open func setupMentionManager()
    @objc @_Concurrency.MainActor(unsafe) open func handlePendingMentionSuggestion(with members: [SendbirdUIKit.SBUUser]?)
    @objc @_Concurrency.MainActor(unsafe) open func updateSuggestedMentionList(with members: [SendbirdUIKit.SBUUser])
    @objc @_Concurrency.MainActor(unsafe) open func presentSuggestedMentionList()
    @objc @_Concurrency.MainActor(unsafe) open func dismissSuggestedMentionList()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldInteractWith url: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeSelection range: Foundation.NSRange)
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectSend text: Swift.String)
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
    @objc @_Concurrency.MainActor(unsafe) open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?, mentionManager: SendbirdUIKit.SBUMentionManager)
    @objc @_Concurrency.MainActor(unsafe) open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectSend text: Foundation.NSAttributedString, mentionManager: SendbirdUIKit.SBUMentionManager)
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectEdit text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectEdit text: Foundation.NSAttributedString, mentionManager: SendbirdUIKit.SBUMentionManager)
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputViewDidTapVoiceMessage(_ messageInputView: SendbirdUIKit.SBUMessageInputView)
    @objc @_Concurrency.MainActor(unsafe) open func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, didChangeSuggestedMention members: [SendbirdUIKit.SBUUser], filteredText: Swift.String?, isTriggered: Swift.Bool)
    @objc @_Concurrency.MainActor(unsafe) open func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, didInsertMentionsTo textView: UIKit.UITextView)
    @objc @_Concurrency.MainActor(unsafe) open func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, shouldLoadSuggestedMentions keyword: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) open func suggestedUserList(_ list: SendbirdUIKit.SBUSuggestedMentionList, didSelectUser user: SendbirdUIKit.SBUUser)
    @objc deinit
  }
}
public protocol SBUGroupChannelModuleListDelegate : SendbirdUIKit.SBUBaseChannelModuleListDelegate {
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didTapQuotedMessageView quotedMessageView: SendbirdUIKit.SBUQuotedBaseMessageView)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didTapEmoji emojiKey: Swift.String, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didLongTapEmoji emojiKey: Swift.String, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didTapMoreEmojiForCell messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didTapMentionUser user: SendbirdUIKit.SBUUser)
  func groupChannelModuleDidTapThreadInfoView(_ threadInfoView: SendbirdUIKit.SBUThreadInfoView)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSelect suggestedReplyOptionView: SendbirdUIKit.SBUSuggestedReplyOptionView)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSelectFileAt index: Swift.Int, multipleFilesMessageCell: SendbirdUIKit.SBUMultipleFilesMessageCell, forRowAt cellIndexPath: Foundation.IndexPath)
  @available(*, deprecated, message: "This method is deprecated in 3.27.0.")
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSubmit form: SendbirdChatSDK.Form, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSubmitMessageForm messageForm: SendbirdChatSDK.MessageForm, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didUpdate feedbackAnswer: SendbirdUIKit.SBUFeedbackAnswer, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleTemplateAction action: SendbirdUIKit.SBUMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleTemplatePreDefinedAction action: SendbirdUIKit.SBUMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleTemplateCustomAction action: SendbirdUIKit.SBUMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleUncachedTemplateKeys templateKeys: [Swift.String], messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleUncachedTemplateImages cacheData: [Swift.String : Swift.String], messageCell: SendbirdUIKit.SBUBaseMessageCell)
}
public protocol SBUGroupChannelModuleListDataSource : SendbirdUIKit.SBUBaseChannelModuleListDataSource {
  func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, highlightInfoInTableView tableView: UIKit.UITableView) -> SendbirdUIKit.SBUHighlightMessageInfo?
}
extension SendbirdUIKit.SBUGroupChannelModule {
  @_inheritsConvenienceInitializers @objc(SBUGroupChannelModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseChannelModule.List, SendbirdUIKit.SBUVoicePlayerDelegate {
    @objc @_Concurrency.MainActor(unsafe) public var adminMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var userMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var fileMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var multipleFilesMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var typingIndicatorMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var messageTemplateCell: SendbirdUIKit.SBUMessageTemplateCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var unknownMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var customMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @_Concurrency.MainActor(unsafe) public var highlightInfo: SendbirdUIKit.SBUHighlightMessageInfo? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var isHighlightInfoAnimated: Swift.Bool
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUGroupChannelModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUGroupChannelModuleListDataSource)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.GroupChannel? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var voicePlayer: SendbirdUIKit.SBUVoicePlayer?
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUGroupChannelModuleListDelegate, dataSource: any SendbirdUIKit.SBUGroupChannelModuleListDataSource, theme: SendbirdUIKit.SBUChannelTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
    @_Concurrency.MainActor(unsafe) override open func updateStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil, componentTheme: SendbirdUIKit.SBUComponentTheme = SBUTheme.componentTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setScrollBottomView(hidden: Swift.Bool)
    @_Concurrency.MainActor(unsafe) @objc override open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
    @objc @available(*, deprecated, renamed: "calculateMessageMenuCGPoint(indexPath:position:)")
    @_Concurrency.MainActor(unsafe) public func calculatorMenuPoint(indexPath: Foundation.IndexPath, position: SendbirdUIKit.MessagePosition) -> CoreFoundation.CGPoint
    @objc @_Concurrency.MainActor(unsafe) open func calculateMessageMenuCGPoint(indexPath: Foundation.IndexPath, position: SendbirdUIKit.MessagePosition) -> CoreFoundation.CGPoint
    @_Concurrency.MainActor(unsafe) override open func createMessageMenuItems(for message: SendbirdChatSDK.BaseMessage) -> [SendbirdUIKit.SBUMenuItem]
    @_Concurrency.MainActor(unsafe) @objc override open func showMessageContextMenu(for message: SendbirdChatSDK.BaseMessage, cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setMessageCellGestures(_ cell: SendbirdUIKit.SBUBaseMessageCell, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc override public func reloadTableView(needsToLayout: Swift.Bool = true)
    @objc @_Concurrency.MainActor(unsafe) open func register(adminMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(userMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(fileMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(multipleFilesMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(typingIndicatorMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(messageTemplateCell: SendbirdUIKit.SBUMessageTemplateCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(unknownMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(customMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ messageCell: SendbirdUIKit.SBUBaseMessageCell, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
    @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func register(messageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func generateCellIdentifier(by message: SendbirdChatSDK.BaseMessage) -> Swift.String
    @objc @_Concurrency.MainActor(unsafe) open func setMessageCellAnimation(_ messageCell: SendbirdUIKit.SBUBaseMessageCell, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUGroupChannelModule.List : SendbirdUIKit.SBUQuotedMessageViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didTapQuotedMessageView(_ quotedMessageView: SendbirdUIKit.SBUQuotedBaseMessageView)
}
extension SendbirdUIKit.SBUGroupChannelModule.List : SendbirdUIKit.SBUThreadInfoViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func threadInfoViewDidTap(_ threadInfoView: SendbirdUIKit.SBUThreadInfoView)
}
extension SendbirdUIKit.SBUGroupChannelModule.List {
  @_Concurrency.MainActor(unsafe) public func voicePlayerDidReceiveError(_ player: SendbirdUIKit.SBUVoicePlayer, errorStatus: SendbirdUIKit.SBUVoicePlayerErrorStatus)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidStart(_ player: SendbirdUIKit.SBUVoicePlayer)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidPause(_ player: SendbirdUIKit.SBUVoicePlayer, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidStop(_ player: SendbirdUIKit.SBUVoicePlayer)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidReset(_ player: SendbirdUIKit.SBUVoicePlayer)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidUpdatePlayTime(_ player: SendbirdUIKit.SBUVoicePlayer, time: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func updateStreamMessage(_ message: SendbirdChatSDK.BaseMessage)
}
extension SendbirdUIKit.SBUGroupChannelModule {
  public static var HeaderComponent: SendbirdUIKit.SBUGroupChannelModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUGroupChannelModule.List.Type
  public static var InputComponent: SendbirdUIKit.SBUGroupChannelModule.Input.Type
}
extension SendbirdUIKit.SBUGroupChannelModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUChannelTitleView.Type
}
extension SendbirdUIKit.SBUGroupChannelModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var AdminMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var FileMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var MultipleFilesMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TypingIndicatorMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UnknownMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var CustomMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type?
  @objc @_Concurrency.MainActor(unsafe) public static var ChannelStateBanner: SendbirdUIKit.SBUChannelStateBanner.Type
  @objc @_Concurrency.MainActor(unsafe) public static var ScrollBottomView: SendbirdUIKit.SBUScrollBottomView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var NewMessageInfo: SendbirdUIKit.SBUNewMessageInfo.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserProfileView: SendbirdUIKit.SBUUserProfileView.Type
}
extension SendbirdUIKit.SBUGroupChannelModule.Input {
  @objc @_Concurrency.MainActor(unsafe) public static var MessageInputView: SendbirdUIKit.SBUMessageInputView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var VoiceMessageInputView: SendbirdUIKit.SBUVoiceMessageInputView.Type
}
open class SBUGroupChannelPushSettingsModule {
  @available(*, deprecated, message: "Use `SBUGroupChannelPushSettingsModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUGroupChannelPushSettingsModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelPushSettingsModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelPushSettingsModule`")
  required public init(listComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelPushSettingsModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header?, listComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.List?)
  @objc deinit
}
public protocol SBUGroupChannelPushSettingsModuleHeaderDelegate : SendbirdUIKit.SBUCommonDelegate {
  func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
extension SendbirdUIKit.SBUGroupChannelPushSettingsModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme?
    @_Concurrency.MainActor(unsafe) public var componentTheme: SendbirdUIKit.SBUComponentTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUGroupChannelPushSettingsModuleHeaderDelegate)?
    @available(*, unavailable, renamed: "SBUGroupChannelPushSettingsModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUGroupChannelPushSettingsModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUGroupChannelPushSettingsModuleHeaderDelegate, theme: SendbirdUIKit.SBUChannelSettingsTheme, componentTheme: SendbirdUIKit.SBUComponentTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelSettingsTheme? = nil, componentTheme: SendbirdUIKit.SBUComponentTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) public func onTapRightBarButton()
  }
}
public protocol SBUGroupChannelPushSettingsModuleListDelegate : SendbirdUIKit.SBUCommonDelegate {
  func groupChannelPushSettingsModule(_ listComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.List, didChangeNotification pushTriggerOption: SendbirdChatSDK.GroupChannelPushTriggerOption)
}
public protocol SBUGroupChannelPushSettingsModuleListDataSource : AnyObject {
  func groupChannelPushSettingsModule(_ listComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.List, pushTriggerOptionForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.GroupChannelPushTriggerOption?
}
extension SendbirdUIKit.SBUGroupChannelPushSettingsModule {
  @_inheritsConvenienceInitializers @objc(SBUGroupChannelPushSettingsModuleList) @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme?
    @_Concurrency.MainActor(unsafe) public var pushTriggerOption: SendbirdChatSDK.GroupChannelPushTriggerOption {
      get
    }
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUGroupChannelPushSettingsModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUGroupChannelPushSettingsModuleListDataSource)?
    @_Concurrency.MainActor(unsafe) open func configure(delegate: (any SendbirdUIKit.SBUGroupChannelPushSettingsModuleListDelegate)?, dataSource: (any SendbirdUIKit.SBUGroupChannelPushSettingsModuleListDataSource)?, theme: SendbirdUIKit.SBUChannelSettingsTheme)
    @_Concurrency.MainActor(unsafe) open func setupViews()
    @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelSettingsTheme? = nil)
    @_Concurrency.MainActor(unsafe) open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUGroupChannelPushSettingsModule.List : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBUGroupChannelPushSettingsModule {
  public static var HeaderComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.List.Type
}
extension SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
}
extension SendbirdUIKit.SBUGroupChannelPushSettingsModule.List {
  @_Concurrency.MainActor(unsafe) public static var ChannelPushSettingCell: SendbirdUIKit.SBUChannelPushSettingCell.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUGroupChannelPushSettingsViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUGroupChannelPushSettingsViewModelDelegate, SendbirdUIKit.SBUGroupChannelPushSettingsModuleHeaderDelegate, SendbirdUIKit.SBUGroupChannelPushSettingsModuleListDelegate, SendbirdUIKit.SBUGroupChannelPushSettingsModuleListDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.List?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme {
    get
    set
    _modify
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var componentTheme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUGroupChannelPushSettingsViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelURL: Swift.String? {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUGroupChannelPushSettingsViewController(channelURL:type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUGroupChannelPushSettingsViewController.init(channelURL:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.BaseChannel)
  @objc @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelPushSettingsViewModel, didChangeNotification pushTriggerOption: SendbirdChatSDK.GroupChannelPushTriggerOption)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelSettingsViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelSettingsViewModel, shouldDismissForChannelSettings channel: SendbirdChatSDK.BaseChannel?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsModule(_ listComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.List, didChangeNotification pushTriggerOption: SendbirdChatSDK.GroupChannelPushTriggerOption)
  @_Concurrency.MainActor(unsafe) open func groupChannelPushSettingsModule(_ listComponent: SendbirdUIKit.SBUGroupChannelPushSettingsModule.List, pushTriggerOptionForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.GroupChannelPushTriggerOption?
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
}
public protocol SBUGroupChannelPushSettingsViewModelDelegate : SendbirdUIKit.SBUBaseChannelSettingsViewModelDelegate {
  func groupChannelPushSettingsViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelPushSettingsViewModel, didChangeNotification pushTriggerOption: SendbirdChatSDK.GroupChannelPushTriggerOption)
}
@objc open class SBUGroupChannelPushSettingsViewModel : SendbirdUIKit.SBUBaseChannelSettingsViewModel {
  public var currentTriggerOption: SendbirdChatSDK.GroupChannelPushTriggerOption {
    get
  }
  weak public var delegate: (any SendbirdUIKit.SBUGroupChannelPushSettingsViewModelDelegate)? {
    get
    set
  }
  required public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, delegate: (any SendbirdUIKit.SBUGroupChannelPushSettingsViewModelDelegate)? = nil)
  override public func loadChannel(channelURL: Swift.String?)
  open func changeNotification(_ pushTriggerOption: SendbirdChatSDK.GroupChannelPushTriggerOption)
  public func updateChannelPushTriggerOption()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUGroupChannelSettingCell : SendbirdUIKit.SBUBaseChannelSettingCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
open class SBUGroupChannelSettingsModule {
  @available(*, deprecated, message: "Use `SBUGroupChannelSettingsModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUGroupChannelSettingsModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelSettingsModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelSettingsModule`")
  required public init(listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupChannelSettingsModule`")
  required public init(headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header?, listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List?)
  @objc deinit
}
public protocol SBUGroupChannelSettingsModuleHeaderDelegate : SendbirdUIKit.SBUBaseChannelSettingsModuleHeaderDelegate {
  func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
public protocol SBUGroupChannelSettingsModuleHeaderDataSource : SendbirdUIKit.SBUBaseChannelSettingsModuleHeaderDataSource {
  func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, channelNameForTitleView titleView: UIKit.UIView?) -> Swift.String?
}
extension SendbirdUIKit.SBUGroupChannelSettingsModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseChannelSettingsModule.Header {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUGroupChannelSettingsModuleHeaderDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUGroupChannelSettingsModuleHeaderDataSource)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBUGroupChannelSettingsModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUGroupChannelSettingsModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUGroupChannelSettingsModuleHeaderDelegate, dataSource: any SendbirdUIKit.SBUGroupChannelSettingsModuleHeaderDataSource, theme: SendbirdUIKit.SBUChannelSettingsTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateTitleView()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItems()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItems()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapRightBarButton()
  }
}
public protocol SBUGroupChannelSettingsModuleListDelegate : SendbirdUIKit.SBUBaseChannelSettingsModuleListDelegate {
  func groupChannelSettingsModule(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func groupChannelSettingsModuleDidSelectModerations(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
  func groupChannelSettingsModuleDidSelectNotifications(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
  func groupChannelSettingsModuleDidSelectMembers(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
  func groupChannelSettingsModuleDidSelectSearch(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
  func groupChannelSettingsModuleDidSelectLeave(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
}
public protocol SBUGroupChannelSettingsModuleListDataSource : SendbirdUIKit.SBUBaseChannelSettingsModuleListDataSource {
}
extension SendbirdUIKit.SBUGroupChannelSettingsModule {
  @_inheritsConvenienceInitializers @objc(SBUGroupChannelSettingsModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseChannelSettingsModule.List {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUGroupChannelSettingsModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUGroupChannelSettingsModuleListDataSource)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) weak public var channel: SendbirdChatSDK.GroupChannel? {
      @objc get
    }
    @available(*, unavailable, renamed: "SBUGroupChannelSettingsModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUGroupChannelSettingsModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUGroupChannelSettingsModuleListDelegate, dataSource: any SendbirdUIKit.SBUGroupChannelSettingsModuleListDataSource, theme: SendbirdUIKit.SBUChannelSettingsTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupItems()
    @_Concurrency.MainActor(unsafe) open func createModerationsItem() -> SendbirdUIKit.SBUChannelSettingItem
    @_Concurrency.MainActor(unsafe) open func createNotificationItem() -> SendbirdUIKit.SBUChannelSettingItem
    @_Concurrency.MainActor(unsafe) open func createMembersItem() -> SendbirdUIKit.SBUChannelSettingItem
    @_Concurrency.MainActor(unsafe) open func createSearchItem() -> SendbirdUIKit.SBUChannelSettingItem
    @_Concurrency.MainActor(unsafe) open func createLeaveItem() -> SendbirdUIKit.SBUChannelSettingItem
    @_Concurrency.MainActor(unsafe) @objc override open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open var headerWrapper: UIKit.UIView?
    @_Concurrency.MainActor(unsafe) @objc override open func reloadTableView()
  }
}
extension SendbirdUIKit.SBUGroupChannelSettingsModule.List {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBUGroupChannelSettingsModule {
  public static var HeaderComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List.Type
}
extension SendbirdUIKit.SBUGroupChannelSettingsModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
}
extension SendbirdUIKit.SBUGroupChannelSettingsModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var ChannelInfoView: SendbirdUIKit.SBUChannelSettingsChannelInfoView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var SettingCell: SendbirdUIKit.SBUGroupChannelSettingCell.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUGroupChannelSettingsViewController : SendbirdUIKit.SBUBaseChannelSettingsViewController, SendbirdUIKit.SBUGroupChannelSettingsModuleHeaderDelegate, SendbirdUIKit.SBUGroupChannelSettingsModuleHeaderDataSource, SendbirdUIKit.SBUGroupChannelSettingsModuleListDelegate, SendbirdUIKit.SBUGroupChannelSettingsModuleListDataSource, SendbirdUIKit.SBUGroupChannelSettingsViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUGroupChannelSettingsViewModel? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override public var channel: SendbirdChatSDK.GroupChannel? {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUGroupChannelSettingsViewController(channelURL:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUGroupChannelSettingsViewController(channelURL:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.GroupChannel)
  @objc @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) open func showMemberList()
  @_Concurrency.MainActor(unsafe) @objc override open func showSearch()
  @_Concurrency.MainActor(unsafe) @objc override open func showModerationList()
  @_Concurrency.MainActor(unsafe) @objc override open func showNotifications()
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.Header, channelNameForTitleView titleView: UIKit.UIView?) -> Swift.String?
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModule(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModuleDidSelectModerations(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModuleDidSelectNotifications(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModuleDidSelectMembers(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModuleDidSelectSearch(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsModuleDidSelectLeave(_ listComponent: SendbirdUIKit.SBUGroupChannelSettingsModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelSettingsModule(_ listComponent: SendbirdUIKit.SBUBaseChannelSettingsModule.List, channelForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.BaseChannel?
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelSettingsModuleIsOperator(_ listComponent: SendbirdUIKit.SBUBaseChannelSettingsModule.List) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelSettingsViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelSettingsViewModel, didLeaveChannel channel: SendbirdChatSDK.GroupChannel)
  @objc deinit
}
public protocol SBUGroupChannelSettingsViewModelDelegate : SendbirdUIKit.SBUBaseChannelSettingsViewModelDelegate {
  func groupChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelSettingsViewModel, didLeaveChannel channel: SendbirdChatSDK.GroupChannel)
}
@available(*, deprecated, renamed: "SBUGroupChannelSettingsViewModel")
public typealias SBUChannelSettingsViewModel = SendbirdUIKit.SBUGroupChannelSettingsViewModel
@objc open class SBUGroupChannelSettingsViewModel : SendbirdUIKit.SBUBaseChannelSettingsViewModel {
  weak public var delegate: (any SendbirdUIKit.SBUGroupChannelSettingsViewModelDelegate)? {
    get
    set
  }
  required public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, delegate: (any SendbirdUIKit.SBUGroupChannelSettingsViewModelDelegate)? = nil)
  @objc deinit
  override public func loadChannel(channelURL: Swift.String?)
  override public func updateChannel(channelName: Swift.String? = nil, coverImage: UIKit.UIImage? = nil)
  public func updateChannel(params: SendbirdChatSDK.GroupChannelUpdateParams)
  public func leaveChannel()
}
extension SendbirdUIKit.SBUGroupChannelSettingsViewModel : SendbirdChatSDK.GroupChannelDelegate {
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
}
@available(*, deprecated, renamed: "SBUGroupChannelViewController")
public typealias SBUChannelViewController = SendbirdUIKit.SBUGroupChannelViewController
@available(*, deprecated, renamed: "SBUGroupChannelViewModelDataSource")
public typealias SBUChannelViewModelDataSource = SendbirdUIKit.SBUGroupChannelViewModelDataSource
@available(*, deprecated, renamed: "SBUGroupChannelViewModelDelegate")
public typealias SBUChannelViewModelDelegate = SendbirdUIKit.SBUGroupChannelViewModelDelegate
@available(*, deprecated, renamed: "SBUGroupChannelViewModel")
public typealias SBUChannelViewModel = SendbirdUIKit.SBUGroupChannelViewModel
extension SendbirdUIKit.SBUGroupChannelViewController {
  @objc @available(*, deprecated, renamed: "listComponent.adminMessageCell", message: "This property has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var adminMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.userMessageCell", message: "This property has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var userMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.fileMessageCell", message: "This property has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var fileMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.customMessageCell", message: "This property has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var customMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.unknownMessageCell", message: "This property has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var unknownMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.register(adminMessageCell:nib:)", message: "This function has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func register(adminMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.register(userMessageCell:nib:)", message: "This function has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func register(userMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.register(fileMessageCell:nib:)", message: "Use `This function has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func register(fileMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.register(customMessageCell:nib:)", message: "This function has been moved to `SBUGroupChannelModule.List`")
  @_Concurrency.MainActor(unsafe) dynamic public func register(customMessageCell: SendbirdUIKit.SBUBaseMessageCell?, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.generateCellIdentifier(by:)", message: "This function has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic open func generateCellIdentifier(by message: SendbirdChatSDK.BaseMessage) -> Swift.String
  @objc @available(*, deprecated, message: "This function has been moved to `SBUGroupChannelModuleListDelegate`. Use `channelModule(_:didTapEmoji:messageCell:)` of `SBUGroupChannelModuleListDelegate`  instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func setEmojiTapGestureHandler(_ cell: SendbirdUIKit.SBUBaseMessageCell, emojiKey: Swift.String)
  @objc @available(*, deprecated, message: "This function has been moved to `SBUGroupChannelModuleListDelegate`. Use `channelModule(_:didLongTapEmoji:messageCell:)` of `SBUGroupChannelModuleListDelegate`  instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func setEmojiLongTapGestureHandler(_ cell: SendbirdUIKit.SBUBaseMessageCell, emojiKey: Swift.String)
  @objc @available(*, deprecated, renamed: "listComponent.setMessageCellGestures(_:message:indexPath:)", message: "This function has been moved to `SBUGroupChannelModule.List` and replaced to `setMessageCellGestures(_:message:indexPath:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func setUserMessageCellGestures(_ cell: SendbirdUIKit.SBUUserMessageCell, userMessage: SendbirdChatSDK.UserMessage, indexPath: Foundation.IndexPath)
  @objc @available(*, deprecated, renamed: "listComponent.setMessageCellGestures(_:message:indexPath:)", message: "This function has been moved to `SBUGroupChannelModule.List` and replaced to `setMessageCellGestures(_:message:indexPath:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func setFileMessageCellGestures(_ cell: SendbirdUIKit.SBUFileMessageCell, fileMessage: SendbirdChatSDK.FileMessage, indexPath: Foundation.IndexPath)
  @objc @available(*, deprecated, renamed: "listComponent.setMessageCellGestures(_:message:indexPath:)", message: "This function has been moved to `SBUGroupChannelModule.List` and replaced to `setMessageCellGestures(_:message:indexPath:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func setUnkownMessageCellGestures(_ cell: SendbirdUIKit.SBUUnknownMessageCell, unknownMessage: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBUGroupChannelViewController {
  @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleListDelegate` and replaced to  `baseChannelModuleDidTapScrollToButton(_:animated:).`")
  @objc @_Concurrency.MainActor(unsafe) dynamic open func onClickScrollBottom(sender: UIKit.UIButton?)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUGroupChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUGroupChannelViewModelDelegate` and replaced to  `baseChannelViewModel(_:didChangeChannel:withContext:)`")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.BaseChannel, updatedReaction reactionEvent: SendbirdChatSDK.ReactionEvent)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUGroupChannelViewModelDelegate` and replaced to  `baseChannelViewModel(_:didChangeChannel:withContext:)`")
  @_Concurrency.MainActor(unsafe) dynamic open func channelDidUpdateReadReceipt(_ sender: SendbirdChatSDK.GroupChannel)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUGroupChannelViewModelDelegate` and replaced to  `baseChannelViewModel(_:didChangeChannel:withContext:)`")
  @_Concurrency.MainActor(unsafe) dynamic open func channelDidUpdateDeliveryReceipt(_ sender: SendbirdChatSDK.GroupChannel)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUGroupChannelViewModelDelegate` and replaced to  `baseChannelViewModel(_:didChangeChannel:withContext:)`")
  @_Concurrency.MainActor(unsafe) dynamic open func channelDidUpdateTypingStatus(_ sender: SendbirdChatSDK.GroupChannel)
  @objc @available(*, unavailable, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) dynamic public var preSendMessages: [Swift.String : SendbirdChatSDK.BaseMessage] {
    @objc get
  }
  @objc @available(*, unavailable, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) dynamic public var resendableMessages: [Swift.String : SendbirdChatSDK.BaseMessage] {
    @objc get
  }
  @objc @available(*, unavailable, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) dynamic public var preSendFileData: [Swift.String : [Swift.String : Swift.AnyObject]] {
    @objc get
  }
  @objc @available(*, unavailable, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) dynamic public var resendableFileData: [Swift.String : [Swift.String : Swift.AnyObject]] {
    @objc get
  }
  @objc @available(*, unavailable, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) dynamic public var fileTransferProgress: [Swift.String : CoreFoundation.CGFloat] {
    @objc get
  }
  @objc @available(*, unavailable, renamed: "setEmojiTapGestureHandler(_:emojiKey:)", message: "deprecated in 1.2.2")
  @_Concurrency.MainActor(unsafe) dynamic open func setTapEmojiGestureHandler(_ cell: SendbirdUIKit.SBUBaseMessageCell, emojiKey: Swift.String)
  @objc @available(*, unavailable, renamed: "setEmojiLongTapGestureHandler(_:emojiKey:)", message: "deprecated in 1.2.2")
  @_Concurrency.MainActor(unsafe) dynamic open func setLongTapEmojiGestureHandler(_ cell: SendbirdUIKit.SBUBaseMessageCell, emojiKey: Swift.String)
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class SBUGroupChannelViewController : SendbirdUIKit.SBUBaseChannelViewController, SendbirdUIKit.SBUGroupChannelViewModelDelegate, SendbirdUIKit.SBUGroupChannelModuleHeaderDelegate, SendbirdUIKit.SBUGroupChannelModuleListDelegate, SendbirdUIKit.SBUGroupChannelModuleListDataSource, SendbirdUIKit.SBUGroupChannelModuleInputDelegate, SendbirdUIKit.SBUGroupChannelModuleInputDataSource, SendbirdUIKit.SBUGroupChannelViewModelDataSource, SendbirdUIKit.SBUMentionManagerDataSource, SendbirdUIKit.SBUMessageThreadViewControllerDelegate, SendbirdUIKit.SBUVoiceMessageInputViewDelegate, SendbirdUIKit.SBUReactionsViewControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUGroupChannelModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUGroupChannelModule.List? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var voiceMessageInputView: SendbirdUIKit.SBUVoiceMessageInputView
  @_Concurrency.MainActor(unsafe) public var highlightInfo: SendbirdUIKit.SBUHighlightMessageInfo?
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUGroupChannelViewModel? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var channel: SendbirdChatSDK.GroupChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var newMessagesCount: Swift.Int {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func multipleFilesMessageFileSizeErrorHandler(_ message: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.GroupChannel, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendbirdChatSDK.GroupChannel, messageListParams: SendbirdChatSDK.MessageListParams? = nil, displaysLocalCachedListFirst: Swift.Bool)
  @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, startingPoint: Swift.Int64? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) required override public init(channelURL: Swift.String, startingPoint: Swift.Int64? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil, displaysLocalCachedListFirst: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func applicationWillResignActivity()
  @_Concurrency.MainActor(unsafe) @objc override open func willPresentSubview()
  @objc deinit
  @_Concurrency.MainActor(unsafe) override open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = .max, showIndicator: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) override open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = .max, showIndicator: Swift.Bool = true, displaysLocalCachedListFirst: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles(needsToLayout: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override public func increaseNewMessageCount() -> Swift.Bool
  @objc @available(*, deprecated, message: "Please use `calculateMessageMenuCGPoint(indexPath:position:)` in `SBUGroupChannelModule.List`")
  @_Concurrency.MainActor(unsafe) public func calculatorMenuPoint(indexPath: Foundation.IndexPath, position: SendbirdUIKit.MessagePosition) -> CoreFoundation.CGPoint
  @available(*, deprecated, message: "Please use `showMessageContextMenu(message:cell:forRowAt:)` in `SBUGroupChannelModule.List`")
  @_Concurrency.MainActor(unsafe) @objc override open func showMenuModal(_ cell: UIKit.UITableViewCell, indexPath: Foundation.IndexPath, message: SendbirdChatSDK.BaseMessage)
  @available(*, deprecated, message: "Please use `showMessageContextMenu(message:cell:forRowAt:)` in `SBUGroupChannelModule.List`")
  @_Concurrency.MainActor(unsafe) override public func showMenuModal(_ cell: UIKit.UITableViewCell, indexPath: Foundation.IndexPath, message: SendbirdChatSDK.BaseMessage, types: [SendbirdUIKit.MessageMenuItem]?)
  @_Concurrency.MainActor(unsafe) @objc override open func showChannelSettings()
  @_Concurrency.MainActor(unsafe) override open func showMessageThread(channelURL: Swift.String, parentMessageId: Swift.Int64, parentMessageCreatedAt: Swift.Int64? = 0, startingPoint: Swift.Int64? = 0)
  @_Concurrency.MainActor(unsafe) @objc override open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @available(iOS 14, *)
  @_Concurrency.MainActor(unsafe) override open func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
  @_Concurrency.MainActor(unsafe) @objc override open func showPhotoLibraryPicker()
  @_Concurrency.MainActor(unsafe) @objc override open func showVoiceMessageInput()
  @_Concurrency.MainActor(unsafe) @objc override open func dismissVoiceMessageInput()
  @_Concurrency.MainActor(unsafe) @objc override open func resetVoiceMessageInput(for resignActivity: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, deletedMessages messages: [SendbirdChatSDK.BaseMessage])
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelViewModel, didReceiveSuggestedMentions members: [SendbirdUIKit.SBUUser]?)
  @objc @_Concurrency.MainActor(unsafe) public func groupChannelViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelViewModel, didFinishUploadingFileAt index: Swift.Int, multipleFilesMessageRequestId requestId: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelViewModel, didReceiveStreamMessage message: SendbirdChatSDK.BaseMessage, forChannel channel: SendbirdChatSDK.GroupChannel)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSelectFileAt index: Swift.Int, multipleFilesMessageCell: SendbirdUIKit.SBUMultipleFilesMessageCell, forRowAt cellIndexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didTapEmoji emojiKey: Swift.String, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didLongTapEmoji emojiKey: Swift.String, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didTapMoreEmojiForCell messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didTapQuotedMessageView quotedMessageView: SendbirdUIKit.SBUQuotedBaseMessageView)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didTapMentionUser user: SendbirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModuleDidTapThreadInfoView(_ threadInfoView: SendbirdUIKit.SBUThreadInfoView)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSelect suggestedReplyOptionView: SendbirdUIKit.SBUSuggestedReplyOptionView)
  @objc @available(*, deprecated, message: "This method is deprecated in 3.27.0.")
  @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSubmit form: SendbirdChatSDK.Form, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didSubmitMessageForm form: SendbirdChatSDK.MessageForm, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, didUpdate feedbackAnswer: SendbirdUIKit.SBUFeedbackAnswer, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleTemplateAction action: SendbirdUIKit.SBUMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleTemplateCustomAction action: SendbirdUIKit.SBUMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleTemplatePreDefinedAction action: SendbirdUIKit.SBUMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleUncachedTemplateKeys templateKeys: [Swift.String], messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, shouldHandleUncachedTemplateImages cacheData: [Swift.String : Swift.String], messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapVoiceMessage fileMessage: SendbirdChatSDK.FileMessage, cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModuleDidTapScrollToButton(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didSelectScrollToBottonWithOptions options: SendbirdUIKit.SBUScrollOptions, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didScroll scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ listComponent: SendbirdUIKit.SBUGroupChannelModule.List, highlightInfoInTableView tableView: UIKit.UITableView) -> SendbirdUIKit.SBUHighlightMessageInfo?
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didUpdateFrozenState isFrozen: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, didPickFileData fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, didPickMultipleFiles fileInfoList: [SendbirdChatSDK.UploadableFileInfo]?, parentMessage: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, didTapSend text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String], parentMessage: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, didTapEdit text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModule(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input, shouldLoadSuggestedMentions filterText: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModuleShouldStopSuggestingMention(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelModuleDidTapVoiceMessage(_ inputComponent: SendbirdUIKit.SBUGroupChannelModule.Input)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModuleDidStartTyping(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModuleDidEndTyping(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didChangeText text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func groupChannelViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelViewModel, startingPointIndexPathsForChannel channel: SendbirdChatSDK.GroupChannel?) -> [Foundation.IndexPath]?
  @objc @_Concurrency.MainActor(unsafe) open func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, suggestedMentionUsersWith filterText: Swift.String) -> [SendbirdUIKit.SBUUser]
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadViewController(_ viewController: SendbirdUIKit.SBUMessageThreadViewController, shouldMoveToParentMessage parentMessage: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadViewController(_ viewController: SendbirdUIKit.SBUMessageThreadViewController, shouldSyncVoiceFileInfos voiceFileInfos: [Swift.String : SendbirdUIKit.SBUVoiceFileInfo]?)
  @objc @_Concurrency.MainActor(unsafe) open func voiceMessageInputViewDidTapCacel(_ inputView: SendbirdUIKit.SBUVoiceMessageInputView)
  @objc @_Concurrency.MainActor(unsafe) open func voiceMessageInputView(_ inputView: SendbirdUIKit.SBUVoiceMessageInputView, willStartToRecord voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
  @objc @_Concurrency.MainActor(unsafe) open func voiceMessageInputView(_ inputView: SendbirdUIKit.SBUVoiceMessageInputView, didTapSend voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
  @objc @_Concurrency.MainActor(unsafe) open func reactionsViewController(_ viewController: SendbirdUIKit.SBUReactionsViewController, didTapUserProfile user: SendbirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func reactionsViewController(_ viewController: SendbirdUIKit.SBUReactionsViewController, tableView: UIKit.UITableView, didSelect user: SendbirdUIKit.SBUUser, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func handleWebAction(_ action: SendbirdUIKit.SBUMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func handleCustomAction(_ action: SendbirdUIKit.SBUMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
}
public protocol SBUGroupChannelViewModelDataSource : SendbirdUIKit.SBUBaseChannelViewModelDataSource {
  func groupChannelViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelViewModel, startingPointIndexPathsForChannel channel: SendbirdChatSDK.GroupChannel?) -> [Foundation.IndexPath]?
}
public protocol SBUGroupChannelViewModelDelegate : SendbirdUIKit.SBUBaseChannelViewModelDelegate {
  func groupChannelViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelViewModel, didReceiveSuggestedMentions members: [SendbirdUIKit.SBUUser]?)
  func groupChannelViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelViewModel, didFinishUploadingFileAt index: Swift.Int, multipleFilesMessageRequestId requestId: Swift.String)
  func groupChannelViewModel(_ viewModel: SendbirdUIKit.SBUGroupChannelViewModel, didReceiveStreamMessage message: SendbirdChatSDK.BaseMessage, forChannel channel: SendbirdChatSDK.GroupChannel)
}
@objc open class SBUGroupChannelViewModel : SendbirdUIKit.SBUBaseChannelViewModel {
  weak public var delegate: (any SendbirdUIKit.SBUGroupChannelViewModelDelegate)? {
    get
    set
  }
  weak public var dataSource: (any SendbirdUIKit.SBUGroupChannelViewModelDataSource)? {
    get
    set
  }
  public var sendMultipleFilesMessageCompletionHandler: SendbirdChatSDK.MultipleFilesMessageHandler?
  required public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = .max, delegate: (any SendbirdUIKit.SBUGroupChannelViewModelDelegate)? = nil, dataSource: (any SendbirdUIKit.SBUGroupChannelViewModelDataSource)? = nil, displaysLocalCachedListFirst: Swift.Bool = false)
  @objc deinit
  override public func loadChannel(channelURL: Swift.String, messageListParams: SendbirdChatSDK.MessageListParams? = nil, completionHandler: ((SendbirdChatSDK.BaseChannel?, SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  override public func refreshChannel()
  open func sendMultipleFilesMessage(fileInfoList: [SendbirdChatSDK.UploadableFileInfo])
  open func updateMultipleFilesMessageCell(requestId: Swift.String, index: Swift.Int)
  override public func loadInitialMessages(startingPoint: Swift.Int64?, showIndicator: Swift.Bool, initialMessages: [SendbirdChatSDK.BaseMessage]?)
  override public func loadPrevMessages()
  override public func loadNextMessages()
  override public func deleteResendableMessage(_ message: SendbirdChatSDK.BaseMessage, needReload: Swift.Bool)
  public func markAsRead()
  public func startTypingMessage()
  public func endTypingMessage()
  public func loadSuggestedMentions(with filterText: Swift.String)
  public func cancelLoadingSuggestedMentions()
  override public func hasNext() -> Swift.Bool
  override public func hasPrevious() -> Swift.Bool
  override public func getStartingPoint() -> Swift.Int64?
}
extension SendbirdUIKit.SBUGroupChannelViewModel : SendbirdChatSDK.MessageCollectionDelegate {
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, channel: SendbirdChatSDK.GroupChannel, addedMessages messages: [SendbirdChatSDK.BaseMessage])
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, channel: SendbirdChatSDK.GroupChannel, updatedMessages messages: [SendbirdChatSDK.BaseMessage])
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, channel: SendbirdChatSDK.GroupChannel, deletedMessages messages: [SendbirdChatSDK.BaseMessage])
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, updatedChannel channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, deletedChannel channelURL: Swift.String)
  @objc dynamic open func didDetectHugeGap(_ collection: SendbirdChatSDK.MessageCollection)
  @available(*, deprecated, message: "This method is deprecated in 3.27.0.")
  public func submitForm(message: SendbirdChatSDK.BaseMessage, form: SendbirdChatSDK.Form)
  public func submitMessageForm(message: SendbirdChatSDK.BaseMessage)
  public func submitFeedback(message: SendbirdChatSDK.BaseMessage, answer: SendbirdUIKit.SBUFeedbackAnswer, completionHandler: ((SendbirdChatSDK.Feedback?) -> Swift.Void)? = nil)
  public func updateFeedback(message: SendbirdChatSDK.BaseMessage, answer: SendbirdUIKit.SBUFeedbackAnswer, completionHandler: ((SendbirdChatSDK.Feedback?) -> Swift.Void)? = nil)
  public func deleteFeedback(message: SendbirdChatSDK.BaseMessage, completionHandler: (() -> Swift.Void)? = nil)
}
extension SendbirdUIKit.SBUGroupChannelViewModel {
  @objc override dynamic open func didSucceedReconnection()
}
extension SendbirdUIKit.SBUGroupChannelViewModel : SendbirdChatSDK.GroupChannelDelegate {
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceive message: SendbirdChatSDK.BaseMessage)
}
public struct SBUHighlightMessageInfo {
  public let keyword: Swift.String?
  public let messageId: Swift.Int64
  public let updatedAt: Swift.Int64
  public var animated: Swift.Bool
  public init(keyword: Swift.String?, messageId: Swift.Int64, updatedAt: Swift.Int64, animated: Swift.Bool = false)
  @available(*, deprecated, renamed: "init(keyword:messageId:updatedAt:)")
  public init(messageId: Swift.Int64, updatedAt: Swift.Int64)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUHorizontalSuggestedReplyOptionView : SendbirdUIKit.SBUSuggestedReplyOptionView {
  @_Concurrency.MainActor(unsafe) final public let button: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public var contentPadding: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) override open func configure(with optionText: Swift.String, delegate: (any SendbirdUIKit.SBUSuggestedReplyOptionViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func onSelectOption()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUHorizontalSuggestedReplyView : SendbirdUIKit.SBUSuggestedReplyView, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) public var contentInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) public var itemSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var layout: UIKit.UICollectionViewFlowLayout {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUSuggestedReplyViewParams, delegate: (any SendbirdUIKit.SBUSuggestedReplyViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HorizontalSuggestedReplyViewCell : SendbirdUIKit.SBUCollectionViewCell {
  @_Concurrency.MainActor(unsafe) public static var cellHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var optionView: SendbirdUIKit.SBUHorizontalSuggestedReplyOptionView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUIconSet {
  public static var iconAdd: UIKit.UIImage {
    get
    set
  }
  public static var iconBack: UIKit.UIImage {
    get
    set
  }
  public static var iconBan: UIKit.UIImage {
    get
    set
  }
  public static var iconBroadcast: UIKit.UIImage {
    get
    set
  }
  public static var iconCamera: UIKit.UIImage {
    get
    set
  }
  public static var iconChat: UIKit.UIImage {
    get
    set
  }
  public static var iconChannels: UIKit.UIImage {
    get
    set
  }
  public static var iconCheckboxChecked: UIKit.UIImage {
    get
    set
  }
  public static var iconCheckboxUnchecked: UIKit.UIImage {
    get
    set
  }
  public static var iconChevronDown: UIKit.UIImage {
    get
    set
  }
  public static var iconChevronRight: UIKit.UIImage {
    get
    set
  }
  public static var iconClose: UIKit.UIImage {
    get
    set
  }
  public static var iconCopy: UIKit.UIImage {
    get
    set
  }
  public static var iconCreate: UIKit.UIImage {
    get
    set
  }
  public static var iconDelete: UIKit.UIImage {
    get
    set
  }
  public static var iconDocument: UIKit.UIImage {
    get
    set
  }
  public static var iconDone: UIKit.UIImage {
    get
    set
  }
  public static var iconDoneAll: UIKit.UIImage {
    get
    set
  }
  public static var iconDownload: UIKit.UIImage {
    get
    set
  }
  public static var iconEdit: UIKit.UIImage {
    get
    set
  }
  public static var iconEmojiMore: UIKit.UIImage {
    get
    set
  }
  public static var iconEmpty: UIKit.UIImage {
    get
    set
  }
  public static var iconError: UIKit.UIImage {
    get
    set
  }
  public static var iconFileAudio: UIKit.UIImage {
    get
    set
  }
  public static var iconFileDocument: UIKit.UIImage {
    get
    set
  }
  public static var iconFreeze: UIKit.UIImage {
    get
    set
  }
  public static var iconGif: UIKit.UIImage {
    get
    set
  }
  public static var iconInfo: UIKit.UIImage {
    get
    set
  }
  public static var iconLeave: UIKit.UIImage {
    get
    set
  }
  public static var iconMembers: UIKit.UIImage {
    get
    set
  }
  public static var iconMessage: UIKit.UIImage {
    get
    set
  }
  public static var iconModerations: UIKit.UIImage {
    get
    set
  }
  public static var iconMore: UIKit.UIImage {
    get
    set
  }
  public static var iconMute: UIKit.UIImage {
    get
    set
  }
  public static var iconNotificationFilled: UIKit.UIImage {
    get
    set
  }
  public static var iconNotificationOffFilled: UIKit.UIImage {
    get
    set
  }
  public static var iconNotifications: UIKit.UIImage {
    get
    set
  }
  public static var iconOperator: UIKit.UIImage {
    get
    set
  }
  public static var iconPhoto: UIKit.UIImage {
    get
    set
  }
  public static var iconPlay: UIKit.UIImage {
    get
    set
  }
  public static var iconPlus: UIKit.UIImage {
    get
    set
  }
  public static var iconQuestion: UIKit.UIImage {
    get
    set
  }
  public static var iconRefresh: UIKit.UIImage {
    get
    set
  }
  public static var iconRemove: UIKit.UIImage {
    get
    set
  }
  public static var iconSearch: UIKit.UIImage {
    get
    set
  }
  public static var iconSend: UIKit.UIImage {
    get
    set
  }
  public static var iconSpinner: UIKit.UIImage {
    get
    set
  }
  public static var iconSupergroup: UIKit.UIImage {
    get
    set
  }
  public static var iconThumbnailNone: UIKit.UIImage {
    get
    set
  }
  public static var iconUser: UIKit.UIImage {
    get
    set
  }
  public static var iconReply: UIKit.UIImage {
    get
    set
  }
  public static var iconReplied: UIKit.UIImage {
    get
    set
  }
  public static var iconThread: UIKit.UIImage {
    get
    set
  }
  public static var iconRadioButtonOn: UIKit.UIImage {
    get
    set
  }
  public static var iconRadioButtonOff: UIKit.UIImage {
    get
    set
  }
  public static var iconVoiceMessageOn: UIKit.UIImage {
    get
    set
  }
  public static var iconPause: UIKit.UIImage {
    get
    set
  }
  public static var iconRecording: UIKit.UIImage {
    get
    set
  }
  public static var iconStop: UIKit.UIImage {
    get
    set
  }
  public static var iconGood: UIKit.UIImage {
    get
    set
  }
  public static var iconBad: UIKit.UIImage {
    get
    set
  }
  public static func restoreDefaultIcons()
  @objc deinit
}
public enum SBUIconSetType : Swift.String, Swift.Hashable {
  case iconAdd
  case iconBack
  case iconBan
  case iconBroadcast
  case iconCamera
  case iconChat
  case iconChannels
  case iconCheckboxChecked
  case iconCheckboxUnchecked
  case iconChevronDown
  case iconChevronRight
  case iconClose
  case iconCopy
  case iconCreate
  case iconDocument
  case iconDelete
  case iconDone
  case iconDoneAll
  case iconDownload
  case iconEdit
  case iconEmojiMore
  case iconEmpty
  case iconError
  case iconFileAudio
  case iconFileDocument
  case iconFreeze
  case iconGif
  case iconInfo
  case iconLeave
  case iconMembers
  case iconMessage
  case iconModerations
  case iconMore
  case iconMute
  case iconNotificationFilled
  case iconNotificationOffFilled
  case iconNotifications
  case iconOperator
  case iconPhoto
  case iconPlay
  case iconPlus
  case iconQuestion
  case iconRefresh
  case iconRemove
  case iconReply
  case iconReplied
  case iconSearch
  case iconSend
  case iconSpinner
  case iconSupergroup
  case iconThumbnailNone
  case iconUser
  case iconRadioButtonOn
  case iconRadioButtonOff
  case iconThread
  case iconVoiceMessageOn
  case iconPause
  case iconRecording
  case iconStop
  case iconGood
  case iconBad
  public struct Metric {
    public static let defaultIconSizeVerySmall: CoreFoundation.CGSize
    public static let defaultIconSizeSmall: CoreFoundation.CGSize
    public static let defaultIconSizeMedium: CoreFoundation.CGSize
    public static let defaultIconSize: CoreFoundation.CGSize
    public static let defaultIconSizeLarge: CoreFoundation.CGSize
    public static let defaultIconSizeVeryLarge: CoreFoundation.CGSize
    public static let quotedMessageIconSize: CoreFoundation.CGSize
    public static let iconActionSheetItem: CoreFoundation.CGSize
    public static let iconEmojiSmall: CoreFoundation.CGSize
    public static let iconEmojiLarge: CoreFoundation.CGSize
    public static let iconEmptyView: CoreFoundation.CGSize
    public static let iconGifPlay: CoreFoundation.CGSize
    public static let iconSpinnerLarge: CoreFoundation.CGSize
    public static let iconSpinnerSizeForTemplate: CoreFoundation.CGSize
    public static let iconUserProfile: CoreFoundation.CGSize
    public static let iconUserProfileInChat: CoreFoundation.CGSize
    public static let iconChevronDown: CoreFoundation.CGSize
    public static let iconVoiceMessageSize: CoreFoundation.CGSize
  }
  public func image(with tintColor: UIKit.UIColor? = nil, to size: CoreFoundation.CGSize, tintAndResize: Swift.Bool = true) -> UIKit.UIImage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUImageContentView : SendbirdUIKit.SBUBaseFileContentView {
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var widthConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func setupSizeContraint()
  @_Concurrency.MainActor(unsafe) override open func configure(message: SendbirdChatSDK.FileMessage, position: SendbirdUIKit.MessagePosition)
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, size: CoreFoundation.CGSize? = nil)
  @_Concurrency.MainActor(unsafe) public func setFileIcon()
  @_Concurrency.MainActor(unsafe) open func resizeImageView(by size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
open class SBUInviteUserModule {
  @available(*, deprecated, message: "Use `SBUInviteUserModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUInviteUserModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUInviteUserModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUInviteUserModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.InviteUserModule")
  required public init(headerComponent: SendbirdUIKit.SBUInviteUserModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.InviteUserModule")
  required public init(listComponent: SendbirdUIKit.SBUInviteUserModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.InviteUserModule")
  required public init(headerComponent: SendbirdUIKit.SBUInviteUserModule.Header?, listComponent: SendbirdUIKit.SBUInviteUserModule.List?)
  @objc deinit
}
public protocol SBUInviteUserModuleHeaderDelegate : SendbirdUIKit.SBUBaseSelectUserModuleHeaderDelegate {
  func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
public protocol SBUInviteUserModuleHeaderDataSource : SendbirdUIKit.SBUBaseSelectUserModuleHeaderDataSource {
}
extension SendbirdUIKit.SBUInviteUserModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseSelectUserModule.Header {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUInviteUserModuleHeaderDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUInviteUserModuleHeaderDataSource)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBUInviteUserModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUInviteUserModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUInviteUserModuleHeaderDelegate, dataSource: any SendbirdUIKit.SBUInviteUserModuleHeaderDataSource, theme: SendbirdUIKit.SBUUserListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func updateRightBarButton()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateTitleView()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItems()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItems()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapRightBarButton()
  }
}
public protocol SBUInviteUserModuleListDelegate : SendbirdUIKit.SBUBaseSelectUserModuleListDelegate {
  func inviteUserModule(_ listComponent: SendbirdUIKit.SBUInviteUserModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func inviteUserModule(_ listComponent: SendbirdUIKit.SBUInviteUserModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  func inviteUserModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUInviteUserModule.List)
}
public protocol SBUInviteUserModuleListDataSource : SendbirdUIKit.SBUBaseSelectUserModuleListDataSource {
}
extension SendbirdUIKit.SBUInviteUserModule {
  @_inheritsConvenienceInitializers @objc(SBUInviteUserModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseSelectUserModule.List {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUInviteUserModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUInviteUserModuleListDataSource)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBUInviteUserModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUInviteUserModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUInviteUserModuleListDelegate, dataSource: any SendbirdUIKit.SBUInviteUserModuleListDataSource, theme: SendbirdUIKit.SBUUserListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override public func reloadTableView()
    @_Concurrency.MainActor(unsafe) @objc override open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  }
}
extension SendbirdUIKit.SBUInviteUserModule.List {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didSelectRetry()
}
extension SendbirdUIKit.SBUInviteUserModule {
  public static var HeaderComponent: SendbirdUIKit.SBUInviteUserModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUInviteUserModule.List.Type
}
extension SendbirdUIKit.SBUInviteUserModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
}
extension SendbirdUIKit.SBUInviteUserModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserCell: SendbirdUIKit.SBUUserCell.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUInviteUserViewController : SendbirdUIKit.SBUBaseSelectUserViewController, SendbirdUIKit.SBUInviteUserViewModelDataSource, SendbirdUIKit.SBUInviteUserModuleListDataSource, SendbirdUIKit.SBUInviteUserModuleHeaderDataSource, SendbirdUIKit.SBUInviteUserModuleHeaderDelegate, SendbirdUIKit.SBUInviteUserModuleListDelegate, SendbirdUIKit.SBUInviteUserViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUInviteUserModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUInviteUserModule.List? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUInviteUserViewModel? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "SBUInviteUserViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUInviteUserViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.GroupChannel, users: [SendbirdUIKit.SBUUser]? = nil)
  @objc @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, users: [SendbirdUIKit.SBUUser]? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, channelType: SendbirdChatSDK.ChannelType = .group, users: [SendbirdUIKit.SBUUser]? = nil)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) public func inviteSelectedUsers()
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModule(_ headerComponent: SendbirdUIKit.SBUInviteUserModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModule(_ listComponent: SendbirdUIKit.SBUInviteUserModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModule(_ listComponent: SendbirdUIKit.SBUInviteUserModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUInviteUserModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func inviteUserViewModel(_ viewModel: SendbirdUIKit.SBUInviteUserViewModel, didInviteUserIds userIds: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc override open func baseSelectedUserViewModel(_ viewModel: SendbirdUIKit.SBUBaseSelectUserViewModel, didUpdateSelectedUsers selectedUsers: [SendbirdUIKit.SBUUser]?)
}
public protocol SBUInviteUserViewModelDelegate : SendbirdUIKit.SBUBaseSelectUserViewModelDelegate {
  func inviteUserViewModel(_ viewModel: SendbirdUIKit.SBUInviteUserViewModel, didInviteUserIds userIds: [Swift.String])
}
public protocol SBUInviteUserViewModelDataSource : SendbirdUIKit.SBUBaseSelectUserViewModelDataSource {
}
@objc open class SBUInviteUserViewModel : SendbirdUIKit.SBUBaseSelectUserViewModel {
  weak public var delegate: (any SendbirdUIKit.SBUInviteUserViewModelDelegate)? {
    get
    set
  }
  weak public var dataSource: (any SendbirdUIKit.SBUInviteUserViewModelDataSource)? {
    get
    set
  }
  required public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, channelType: SendbirdChatSDK.ChannelType = .group, users: [SendbirdUIKit.SBUUser]? = nil, userListQuery: SendbirdChatSDK.ApplicationUserListQuery? = nil, memberListQuery: SendbirdChatSDK.MemberListQuery? = nil, delegate: (any SendbirdUIKit.SBUInviteUserViewModelDelegate)? = nil, dataSource: (any SendbirdUIKit.SBUInviteUserViewModelDataSource)? = nil)
  public func inviteUsers()
  public func invite(users: [SendbirdUIKit.SBUUser])
  public func invite(userIds: [Swift.String])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBULabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "init(frame:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension SendbirdUIKit.SBULabel : SendbirdUIKit.SBUViewLifeCycle {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupActions()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SBULayoutableButton : UIKit.UIButton {
  public enum LabelAlignment : Swift.Int {
    case right, left, under, top
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum VerticalAlignment : Swift.String {
    case center, top, bottom, unset
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum HorizontalAlignment : Swift.String {
    case center, left, right, unset
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var imageToTitleSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var labelAlignment: SendbirdUIKit.SBULayoutableButton.LabelAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageVerticalAlignment: SendbirdUIKit.SBULayoutableButton.VerticalAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageHorizontalAlignment: SendbirdUIKit.SBULayoutableButton.HorizontalAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var contentEdgeInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var imageEdgeInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var titleEdgeInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public init(gap: CoreFoundation.CGFloat, labelAlignment: SendbirdUIKit.SBULayoutableButton.LabelAlignment)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBULinkClickableTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var selectedTextRange: UIKit.UITextRange? {
    @objc get
    @objc set
  }
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SBULoadingDataSource : AnyObject {
  func shouldPassTouchHit(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class SBULoading : ObjectiveC.NSObject, SendbirdUIKit.SBUViewLifeCycle {
  @SendbirdUIKit.SBUThemeWrapper public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  public var parentView: UIKit.UIView?
  public var backgroundView: SendbirdUIKit.SBULoadingDimView {
    get
  }
  public var containerView: UIKit.UIView {
    get
  }
  public var indicatorImageView: UIKit.UIImageView {
    get
  }
  public var indicatorAnimation: QuartzCore.CAAnimation
  public var containerSize: CoreFoundation.CGFloat
  public var containerCornerRadius: CoreFoundation.CGFloat
  public var indicatorImageSize: CoreFoundation.CGFloat
  @objc required override dynamic public init()
  public static func start()
  public static func stop()
  public static var isShowing: Swift.Bool {
    get
  }
  public static func setDataSource(dataSource: any SendbirdUIKit.SBULoadingDataSource)
  public static func removeDataSource()
  open func configureView()
  @objc open func setupViews()
  @objc open func setupStyles()
  @objc open func updateStyles()
  @objc open func setupLayouts()
  @objc open func updateLayouts()
  @objc open func setupActions()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBULoadingDimView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class SBUMediaView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init()
  @objc deinit
}
@available(*, deprecated, renamed: "SBUUserListViewController")
public typealias SBUMemberListViewController = SendbirdUIKit.SBUUserListViewController
extension SendbirdUIKit.SBUUserListViewController {
  @objc @available(*, deprecated, renamed: "channelURL")
  @_Concurrency.MainActor(unsafe) dynamic public var channelUrl: Swift.String? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "headerComponent.titleView", message: "This property has been moved to the `SBUUserListModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.leftBarButton", message: "This property has been moved to the `SBUUserListModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.rightBarButton", message: "This property has been moved to the `SBUUserListModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.tableView", message: "This property has been moved to the `SBUUserListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var tableView: UIKit.UITableView? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.userCell", message: "This property has been moved to the `SBUUserListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var userCell: UIKit.UITableViewCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.emptyView", message: "This property has been moved to the `SBUUserListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "viewModel.memberListQuery", message: "This property has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var memberListQuery: SendbirdChatSDK.MemberListQuery? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.operatorListQuery", message: "This property has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var operatorListQuery: SendbirdChatSDK.OperatorListQuery? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.mutedMemberListQuery", message: "This property has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var mutedMemberListQuery: SendbirdChatSDK.MemberListQuery? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.bannedUserListQuery", message: "This property has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var bannedMemberListQuery: SendbirdChatSDK.BannedUserListQuery? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.participantListQuery", message: "This property has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var participantListQuery: SendbirdChatSDK.ParticipantListQuery? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "userList")
  @_Concurrency.MainActor(unsafe) dynamic public var memberList: [SendbirdUIKit.SBUUser] {
    @objc get
  }
  @available(*, deprecated, renamed: "userListType")
  @_Concurrency.MainActor(unsafe) public var memberListType: SendbirdUIKit.ChannelUserListType {
    get
  }
  @objc @available(*, deprecated, renamed: "init(channel:userListType:)")
  @_Concurrency.MainActor(unsafe) convenience dynamic public init(channel: SendbirdChatSDK.BaseChannel, type: SendbirdUIKit.ChannelMemberListType)
  @objc @available(*, deprecated, renamed: "init(channel:users:userListType:)")
  @_Concurrency.MainActor(unsafe) convenience dynamic public init(channel: SendbirdChatSDK.BaseChannel, members: [SendbirdUIKit.SBUUser], type: SendbirdUIKit.ChannelMemberListType)
  @objc @available(*, deprecated, renamed: "viewModel.loadChannel(channelURL:type:)", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadChannel(channelUrl: Swift.String?)
  @objc @available(*, deprecated, renamed: "viewModel.loadNextUserList(reset:users:)", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadNextMemberList(reset: Swift.Bool, members: [SendbirdUIKit.SBUUser]? = nil)
  @objc @available(*, deprecated, renamed: "viewModel.loadNextUserList(reset:)", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadMembers()
  @objc @available(*, unavailable, renamed: "userListViewModel(_:nextUserListForChannel:)", message: "This function has been moved to the `SBUUserListViewModelDataSource`.")
  @_Concurrency.MainActor(unsafe) dynamic open func nextMemberList() -> [SendbirdUIKit.SBUUser]?
  @objc @available(*, deprecated, renamed: "viewModel.registerAsOperator(user:)", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func promoteToOperator(member: SendbirdUIKit.SBUUser)
  @objc @available(*, deprecated, renamed: "viewModel.unregisterOperator(user:)", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func dismissOperator(member: SendbirdUIKit.SBUUser)
  @objc @available(*, deprecated, renamed: "viewModel.mute(user:)", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func mute(member: SendbirdUIKit.SBUUser)
  @objc @available(*, deprecated, renamed: "viewModel.unmute(user:)", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func unmute(member: SendbirdUIKit.SBUUser)
  @objc @available(*, deprecated, renamed: "viewModel.ban(user:)", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func ban(member: SendbirdUIKit.SBUUser)
  @objc @available(*, deprecated, renamed: "viewModel.unban(user:)", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func unban(member: SendbirdUIKit.SBUUser)
  @objc @available(*, deprecated, renamed: "viewModel.resetUserList()", message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func resetMemberList()
  @objc @available(*, deprecated, renamed: "listComponent.register(userCell:nib:)", message: "This function has been moved to the `SBUUserListModule.List`.`")
  @_Concurrency.MainActor(unsafe) dynamic public func register(userCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.reloadTableView()", message: "This function has been moved to the `SBUUserListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func reloadData()
  @available(*, unavailable, renamed: "showInviteUser()")
  @objc @_Concurrency.MainActor(unsafe) dynamic open func onClickInviteUser()
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUUserListModule.List` and replaced to `setMoreMenuTapAction(_:)`")
  @_Concurrency.MainActor(unsafe) dynamic open func setMoreMenuActionHandler(_ member: SendbirdUIKit.SBUUser)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUUserListModule.List`. and replaced to `setUserProfileTapAction(_:)`")
  @_Concurrency.MainActor(unsafe) dynamic open func setUserProfileTapGestureHandler(_ user: SendbirdUIKit.SBUUser)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUUserListModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channelDidUpdateOperators(_ sender: SendbirdChatSDK.BaseChannel)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.OpenChannel, userDidExit user: SendbirdChatSDK.User)
  @objc @available(*, unavailable, message: "This function has been moved to the `SBUUserListViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func channel(_ sender: SendbirdChatSDK.OpenChannel, userDidEnter user: SendbirdChatSDK.User)
  @objc @available(*, deprecated, renamed: "init(channelURL:channelType:userListType:)")
  @_Concurrency.MainActor(unsafe) convenience dynamic public init(channelUrl: Swift.String, type: SendbirdUIKit.ChannelMemberListType = .members)
  @objc @available(*, deprecated, renamed: "init(channelURL:channelType:users:userListType:)")
  @_Concurrency.MainActor(unsafe) convenience dynamic public init(channelUrl: Swift.String, members: [SendbirdUIKit.SBUUser], type: SendbirdUIKit.ChannelMemberListType = .members)
  @objc @available(*, deprecated, renamed: "resetUserList()")
  @_Concurrency.MainActor(unsafe) dynamic public func reloadMemberList()
  @available(*, unavailable, renamed: "errorHandler(_:_:)")
  @_Concurrency.MainActor(unsafe) public func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
public class SBUMention : Swift.Equatable {
  public var range: Foundation.NSRange
  public var user: SendbirdUIKit.SBUUser {
    get
  }
  public init(range: Foundation.NSRange, user: SendbirdUIKit.SBUUser)
  public static func == (lhs: SendbirdUIKit.SBUMention, rhs: SendbirdUIKit.SBUMention) -> Swift.Bool
  @objc deinit
}
public class SBUMentionConfiguration {
  public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMentionLimitGuideCell : SendbirdUIKit.SBUTableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let limitGuideLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SBUMentionManagerDelegate : AnyObject {
  func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, didChangeSuggestedMention users: [SendbirdUIKit.SBUUser], filteredText: Swift.String?, isTriggered: Swift.Bool)
  func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, didInsertMentionsTo textView: UIKit.UITextView)
  func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, shouldLoadSuggestedMentions filterText: Swift.String)
}
public protocol SBUMentionManagerDataSource : AnyObject {
  func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, suggestedMentionUsersWith filterText: Swift.String) -> [SendbirdUIKit.SBUUser]
}
@objc @_inheritsConvenienceInitializers public class SBUMentionManager : ObjectiveC.NSObject {
  public var mentionedList: [SendbirdUIKit.SBUMention] {
    get
  }
  final public let trigger: Swift.String
  public var defaultTextAttributes: [Foundation.NSAttributedString.Key : Any]
  public var mentionTextAttributes: [Foundation.NSAttributedString.Key : Any]
  @objc override dynamic public init()
  public func configure(delegate: (any SendbirdUIKit.SBUMentionManagerDelegate)? = nil, dataSource: (any SendbirdUIKit.SBUMentionManagerDataSource)? = nil, defaultTextAttributes: [Foundation.NSAttributedString.Key : Any]? = nil, mentionTextAttributes: [Foundation.NSAttributedString.Key : Any]? = nil)
  @discardableResult
  public func addMention(at textView: UIKit.UITextView, user: SendbirdUIKit.SBUUser) -> Swift.Bool
  public func clearMentions(_ mentions: [SendbirdUIKit.SBUMention], with replaceText: Swift.String = "", on textView: UIKit.UITextView, at range: Foundation.NSRange)
  public func shouldChangeText(on textView: UIKit.UITextView, in range: Foundation.NSRange, replacementText: Swift.String) -> Swift.Bool
  public func needToSkipSelection(_ textView: UIKit.UITextView) -> Swift.Bool
  public func findMentions(with range: Foundation.NSRange) -> [SendbirdUIKit.SBUMention]
  public func handlePendingMentionSuggestion()
  public func handleMentionSuggestion(on textView: UIKit.UITextView, range: Foundation.NSRange)
  public var suggestedMentionUsers: [SendbirdUIKit.SBUUser] {
    get
  }
  public func suggestedMentionUsers(with filterText: Swift.String) -> [SendbirdUIKit.SBUUser]
  public func generateMentionedMessage(with mentionedMessageTemplate: Swift.String, mentionedUsers: [SendbirdUIKit.SBUUser]) -> Foundation.NSAttributedString
  public func generateTemplate(with attributedText: Foundation.NSAttributedString, mentions: [SendbirdUIKit.SBUMention]) -> Swift.String
  public func reset()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMenuCell : SendbirdUIKit.SBUTableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var containerView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var lineView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var tapHandler: ((@escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open func configure(with item: SendbirdUIKit.SBUMenuItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class SBUMenuSheetViewController : SendbirdUIKit.SBUBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let layout: UIKit.UICollectionViewFlowLayout
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let message: SendbirdChatSDK.BaseMessage?
  @_Concurrency.MainActor(unsafe) final public let items: [SendbirdUIKit.SBUMenuItem]
  @objc @_Concurrency.MainActor(unsafe) final public let emojiList: [SendbirdChatSDK.Emoji]
  @objc @_Concurrency.MainActor(unsafe) public var useReaction: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let maxEmojiOneLine: Swift.Int
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var emojiTapHandler: ((_ emojiKey: Swift.String, _ setSelect: Swift.Bool) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var moreEmojiTapHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var dismissHandler: (() -> Swift.Void)?
  @available(*, unavailable, renamed: "SBUMenuViewController.init()")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) required public init(message: SendbirdChatSDK.BaseMessage, items: [SendbirdUIKit.SBUMenuItem], useReaction: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@available(*, deprecated, renamed: "SBUMenuHandler")
public typealias SBUMenunHandler = SendbirdUIKit.SBUMenuHandler
public typealias SBUMenuHandler = () -> Swift.Void
public class SBUMenuItem : SendbirdUIKit.SBUCommonItem {
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var transitionsWhenSelected: Swift.Bool
  public init(title: Swift.String? = nil, color: UIKit.UIColor? = SBUColorSet.onLightTextHighEmphasis, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, tintColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment = .left, tag: Swift.Int? = nil, completionHandler: SendbirdUIKit.SBUMenuHandler? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUMessageCellConfiguration {
  public var groupChannel: SendbirdUIKit.SBUMessageCellConfiguration.GroupChannel
  public var openChannel: SendbirdUIKit.SBUMessageCellConfiguration.OpenChannel
  @_hasMissingDesignatedInitializers public class BaseChannel {
    public var messageCellMaxWidth: CoreFoundation.CGFloat
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GroupChannel : SendbirdUIKit.SBUMessageCellConfiguration.BaseChannel {
    public var thumbnailSize: CoreFoundation.CGSize
    public var voiceMessageSize: CoreFoundation.CGSize
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OpenChannel : SendbirdUIKit.SBUMessageCellConfiguration.BaseChannel {
    public var thumbnailSize: CoreFoundation.CGSize
    @objc deinit
  }
  @objc deinit
}
public protocol SBUMessageCellProtocol {
  func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  func configure(highlightInfo: SendbirdUIKit.SBUHighlightMessageInfo?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMessageDateView : SendbirdUIKit.SBUView {
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var dateLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var padding: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func configure(timestamp: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBUMesageFormChipView : SendbirdUIKit.SBUView, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) public var chips: [Swift.String]
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBUMessageFormChipsItemView : SendbirdUIKit.SBUMessageFormItemView {
  @_Concurrency.MainActor(unsafe) public var stackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var titleStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var topSpaceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let chipView: SendbirdUIKit.SBUMesageFormChipView
  @_Concurrency.MainActor(unsafe) public var bottomSpaceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var errorTitleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var chips: [Swift.String] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBUMessageFormFallbackView : SendbirdUIKit.SBUMessageFormView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol SBUMessageFormItemViewDelegate : AnyObject {
  func messageFormItemView(_ itemView: SendbirdUIKit.SBUMessageFormItemView, didUpdate formItem: SendbirdChatSDK.MessageFormItem)
  func messageFormItemView(_ itemView: SendbirdUIKit.SBUMessageFormItemView, didCheckedValidation formItem: SendbirdChatSDK.MessageFormItem)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMessageFormItemView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var formId: Swift.Int64? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var formItem: SendbirdChatSDK.MessageFormItem? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var didValidation: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var status: SendbirdUIKit.SBUMessageFormItemView.StatusType
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageFormItemViewDelegate)?
  @_Concurrency.MainActor(unsafe) open func configure(form: SendbirdChatSDK.MessageForm, item: SendbirdChatSDK.MessageFormItem, didValidation: Swift.Bool, delegate: (any SendbirdUIKit.SBUMessageFormItemViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension SendbirdUIKit.SBUMessageFormItemView {
  @_Concurrency.MainActor(unsafe) public var titleAttributedString: Foundation.NSAttributedString {
    get
  }
}
extension SendbirdUIKit.SBUMessageFormItemView {
  public enum InputErrorType {
    case required
    case invalid
    case none
    public static func == (a: SendbirdUIKit.SBUMessageFormItemView.InputErrorType, b: SendbirdUIKit.SBUMessageFormItemView.InputErrorType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SendbirdUIKit.SBUMessageFormItemView {
  public enum StatusType {
    case done(values: [Swift.String])
    case optional
    case editing(values: [Swift.String]?)
    case unknown
    public init(form: SendbirdChatSDK.MessageForm, item: SendbirdChatSDK.MessageFormItem)
    public var text: Swift.String? {
      get
    }
    public var isDone: Swift.Bool {
      get
    }
    public var didSubmit: Swift.Bool {
      get
    }
    public var isOptional: Swift.Bool {
      get
    }
    public var isEditable: Swift.Bool {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBUMessageFormMultiTextItemView : SendbirdUIKit.SBUMessageFormItemView, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) public var stackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var titleStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var topSpaceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var inputContainer: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var inputStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var valueStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var inputTextView: SendbirdUIKit.SBUTextView
  @_Concurrency.MainActor(unsafe) public var inputTextLabel: SendbirdUIKit.SBUPaddingLabel
  @_Concurrency.MainActor(unsafe) public var iconContainer: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var inputIconView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var bottomSpaceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var errorTitleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) public func updateInputData()
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBUMessageFormSingleTextItemView : SendbirdUIKit.SBUMessageFormItemView, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) public var stackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var titleStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var topSpaceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var inputContainer: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var inputStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var valueStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) public var inputTextField: UIKit.UITextField
  @_Concurrency.MainActor(unsafe) public var inputTextLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var iconContainer: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var inputIconView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var bottomSpaceView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var errorTitleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupActions()
  @_Concurrency.MainActor(unsafe) public func updateInputData()
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol SBUMessageFormViewDelegate : AnyObject {
  func messageFormView(_ view: SendbirdUIKit.SBUMessageFormView, didSubmit form: SendbirdChatSDK.MessageForm)
  func messageFormView(_ view: SendbirdUIKit.SBUMessageFormView, didUpdateValidationStatus: [Swift.Int64 : Swift.Bool])
  func messageFormView(_ view: SendbirdUIKit.SBUMessageFormView, didUpdateViewFrame: CoreFoundation.CGRect)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMessageFormView : SendbirdUIKit.SBUView, SendbirdUIKit.SBUMessageFormItemViewDelegate {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var messageForm: SendbirdChatSDK.MessageForm? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var messageId: Swift.Int64? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var params: SendbirdUIKit.SBUMessageFormViewParams? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var itemViews: [SendbirdUIKit.SBUMessageFormItemView]?
  @_Concurrency.MainActor(unsafe) public var itemValidationStatus: [Swift.Int64 : Swift.Bool]
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageFormViewDelegate)?
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: SendbirdUIKit.SBUMessageFormViewParams, delegate: (any SendbirdUIKit.SBUMessageFormViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) open func createItemView(_ item: SendbirdChatSDK.MessageFormItem) -> SendbirdUIKit.SBUMessageFormItemView?
  @_Concurrency.MainActor(unsafe) open func createFormItemViews(with form: SendbirdChatSDK.MessageForm?) -> [SendbirdUIKit.SBUMessageFormItemView]
  @_Concurrency.MainActor(unsafe) open func messageFormItemView(_ itemView: SendbirdUIKit.SBUMessageFormItemView, didUpdate formItem: SendbirdChatSDK.MessageFormItem)
  @_Concurrency.MainActor(unsafe) open func messageFormItemView(_ itemView: SendbirdUIKit.SBUMessageFormItemView, didCheckedValidation formItem: SendbirdChatSDK.MessageFormItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func onSubmit() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBUSimpleMessageFormView : SendbirdUIKit.SBUMessageFormView {
  @_Concurrency.MainActor(unsafe) public var container: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var submitButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override public func onSubmit() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct SBUMessageFormViewParams {
  public let messageId: Swift.Int64
  public let messageForm: SendbirdChatSDK.MessageForm
  public let isSubmitting: Swift.Bool
  public let itemValidationStatus: [Swift.Int64 : Swift.Bool]
}
@objc public enum SBUMessageInputMode : Swift.Int {
  case none
  case edit
  case quoteReply
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SBUMessageInputViewDelegate : AnyObject {
  func messageInputViewDidSelectAdd(_ messageInputView: SendbirdUIKit.SBUMessageInputView)
  func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectSend text: Swift.String)
  func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectResource type: SendbirdUIKit.MediaResourceType)
  func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectEdit text: Swift.String)
  func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeText text: Swift.String)
  func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  func messageInputViewDidStartTyping()
  func messageInputViewDidEndTyping()
  func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldInteractWith url: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeSelection range: Foundation.NSRange)
  func messageInputViewDidTapVoiceMessage(_ messageInputView: SendbirdUIKit.SBUMessageInputView)
}
extension SendbirdUIKit.SBUMessageInputViewDelegate {
  public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectSend text: Swift.String)
  public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectResource type: SendbirdUIKit.MediaResourceType)
  public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectEdit text: Swift.String)
  public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeText text: Swift.String)
  public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
  public func messageInputViewDidStartTyping()
  public func messageInputViewDidEndTyping()
  public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldInteractWith url: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  public func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeSelection range: Foundation.NSRange)
}
public protocol SBUMessageInputViewDataSource : AnyObject {
  func channelForMessageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView) -> SendbirdChatSDK.BaseChannel?
}
@objc @_Concurrency.MainActor(unsafe) open class SBUMessageInputView : SendbirdUIKit.SBUView, SendbirdUIKit.SBUActionSheetDelegate, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) public var addButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textView: UIKit.UITextView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var sendButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var voiceMessageButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var editView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var saveButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var inputHStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var quoteMessageView: SendbirdUIKit.SBUQuoteMessageInputView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leadingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var trailingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var textViewMinHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var textViewMaxHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var showsSendButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showsVoiceMessageButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var textViewLeadingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var textViewTrailingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var layoutInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) public var defaultAttributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var mentionedAttributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageInputViewDelegate)?
  @_Concurrency.MainActor(unsafe) weak public var datasource: (any SendbirdUIKit.SBUMessageInputViewDataSource)?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageInputTheme {
    get
    set
    _modify
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendbirdUIKit.SBUMessageInputTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public init(isOverlay: Swift.Bool)
  @_Concurrency.MainActor(unsafe) required public init(isThreadMessage: Swift.Bool = false)
  @available(*, unavailable, renamed: "SBUMessageInputView()")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var mode: SendbirdUIKit.SBUMessageInputMode {
    get
  }
  @_Concurrency.MainActor(unsafe) open func setMode(_ mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage? = nil)
  @_Concurrency.MainActor(unsafe) public func startQuoteReplyMode(message: SendbirdChatSDK.BaseMessage)
  @_Concurrency.MainActor(unsafe) public func endQuoteReplyMode()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func startEditMode(text: Swift.String)
  @_Concurrency.MainActor(unsafe) public func endEditMode()
  @_Concurrency.MainActor(unsafe) public func setFrozenModeState(_ isFrozen: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setMutedModeState(_ isMuted: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setInputState(_ isEnabled: Swift.Bool, placeholder: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setErrorState()
  @_Concurrency.MainActor(unsafe) public func endTypingMode()
  @_Concurrency.MainActor(unsafe) public func setupTextViewHeight(textView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func updateTextViewHeight()
  @_Concurrency.MainActor(unsafe) public func updatePlaceholderText()
  @_Concurrency.MainActor(unsafe) public func onTapAddButton()
  @objc @_Concurrency.MainActor(unsafe) open func onTapAddButton(_ sender: Any)
  @_Concurrency.MainActor(unsafe) open func generateResourceItems() -> [SendbirdUIKit.SBUActionSheetItem]
  @objc @_Concurrency.MainActor(unsafe) open func onTapSendButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onTapVoiceMessageButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onTapCancelButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onTapSaveButton(_ sender: Any)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) open func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func didDismissActionSheet()
  @available(*, deprecated, renamed: "onTapAddButton")
  @objc @_Concurrency.MainActor(unsafe) open func onClickAddButton(_ sender: Any)
  @available(*, deprecated, renamed: "onTapSendButton")
  @objc @_Concurrency.MainActor(unsafe) open func onClickSendButton(_ sender: Any)
  @available(*, deprecated, renamed: "onTapCancelButton")
  @objc @_Concurrency.MainActor(unsafe) open func onClickCancelButton(_ sender: Any)
  @available(*, deprecated, renamed: "onTapSaveButton")
  @objc @_Concurrency.MainActor(unsafe) open func onClickSaveButton(_ sender: Any)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMessageProfileView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public static let imageSize: CoreFoundation.CGFloat
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var urlString: Swift.String
  @_Concurrency.MainActor(unsafe) public var numberLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(urlString: Swift.String = "")
  @_Concurrency.MainActor(unsafe) public var imageDownloadTask: Foundation.URLSessionTask?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(urlString: Swift.String, imageSize: CoreFoundation.CGFloat? = SBUMessageProfileView.imageSize)
  @_Concurrency.MainActor(unsafe) public func configureTyperProfileImageView()
  @_Concurrency.MainActor(unsafe) public func configureNumberLabel(_ numberOfTypers: Swift.Int)
  @objc deinit
}
public class SBUMessageReactionViewParams {
  public init(maxWidth: CoreFoundation.CGFloat, useReaction: Swift.Bool, reactions: [SendbirdChatSDK.Reaction], enableEmojiLongPress: Swift.Bool, message: SendbirdChatSDK.BaseMessage? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMessageReactionView : SendbirdUIKit.SBUView, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let layout: UIKit.UICollectionViewFlowLayout
  @_Concurrency.MainActor(unsafe) public var message: SendbirdChatSDK.BaseMessage?
  @_Concurrency.MainActor(unsafe) public var emojiList: [SendbirdChatSDK.Emoji]
  @_Concurrency.MainActor(unsafe) public var reactions: [SendbirdChatSDK.Reaction]
  @_Concurrency.MainActor(unsafe) public var maxWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var enableEmojiLongPress: Swift.Bool
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var collectionViewHeightConstraint: UIKit.NSLayoutConstraint? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var collectionViewMinWidthContraint: UIKit.NSLayoutConstraint? {
    get
  }
  @_Concurrency.MainActor(unsafe) final public let collectionViewInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "MessageReactionView()")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) public func hasMoreEmoji(at indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func configure(maxWidth: CoreFoundation.CGFloat, useReaction: Swift.Bool, reactions: [SendbirdChatSDK.Reaction], enableEmojiLongPress: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func configure(configuration: SendbirdUIKit.SBUMessageReactionViewParams)
  @_Concurrency.MainActor(unsafe) open func getCellSize(count: Swift.Int) -> CoreFoundation.CGSize
  @objc @_Concurrency.MainActor(unsafe) open func onTapMoreEmoji(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, shouldSelectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public func hasMoreEmoji() -> Swift.Bool
  @objc deinit
}
open class SBUMessageSearchModule {
  @available(*, deprecated, message: "Use `SBUMessageSearchModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUMessageSearchModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUMessageSearchModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageSearchModule")
  required public init(headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageSearchModule")
  required public init(listComponent: SendbirdUIKit.SBUMessageSearchModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageSearchModule")
  required public init(headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header?, listComponent: SendbirdUIKit.SBUMessageSearchModule.List?)
  @objc deinit
}
public protocol SBUMessageSearchModuleHeaderDelegate : SendbirdUIKit.SBUCommonDelegate {
  func messageSearchModule(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func messageSearchModule(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func messageSearchModule(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func messageSearchModule(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header, didTapSearch keyword: Swift.String)
  func messageSearchModuleDidTapCancel(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header)
}
extension SendbirdUIKit.SBUMessageSearchModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageSearchTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageSearchModuleHeaderDelegate)?
    @available(*, unavailable, renamed: "SBUMessageSearchModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUMessageSearchModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUMessageSearchModuleHeaderDelegate, theme: SendbirdUIKit.SBUMessageSearchTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUMessageSearchTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func updateSearchBarStyle(with searchBar: UIKit.UISearchBar)
    @objc @_Concurrency.MainActor(unsafe) public func enableCancelButton()
    @objc @_Concurrency.MainActor(unsafe) public func cancelSearch()
    @objc @_Concurrency.MainActor(unsafe) public func registerKeyboardNotifications()
    @objc @_Concurrency.MainActor(unsafe) public func unregisterKeyboardNotifications()
  }
}
extension SendbirdUIKit.SBUMessageSearchModule.Header : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func searchBarTextDidEndEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
}
public protocol SBUMessageSearchModuleListDelegate : SendbirdUIKit.SBUCommonDelegate {
  func messageSearchModule(_ listComponent: SendbirdUIKit.SBUMessageSearchModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func messageSearchModule(_ listComponent: SendbirdUIKit.SBUMessageSearchModule.List, didDetectPreloadingPosition index: Foundation.IndexPath)
  func messageSearchModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUMessageSearchModule.List)
}
public protocol SBUMessageSearchModuleListDataSource : AnyObject {
  func messageSearchModule(_ listComponent: SendbirdUIKit.SBUMessageSearchModule.List, searchResultsInTableView tableView: UIKit.UITableView) -> [SendbirdChatSDK.BaseMessage]
}
extension SendbirdUIKit.SBUMessageSearchModule {
  @_inheritsConvenienceInitializers @objc(SBUMessageSearchModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var resultCell: SendbirdUIKit.SBUMessageSearchResultCell?
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageSearchTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageSearchModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUMessageSearchModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var resultList: [SendbirdChatSDK.BaseMessage] {
      @objc get
    }
    @available(*, unavailable, renamed: "SBUMessageSearchModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUMessageSearchModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUMessageSearchModuleListDelegate, dataSource: any SendbirdUIKit.SBUMessageSearchModuleListDataSource, theme: SendbirdUIKit.SBUMessageSearchTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUMessageSearchTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(resultCell: SendbirdUIKit.SBUMessageSearchResultCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @_Concurrency.MainActor(unsafe) public func updateEmptyView(type: SendbirdUIKit.EmptyViewType)
    @objc @_Concurrency.MainActor(unsafe) open func message(at indexPath: Foundation.IndexPath) -> SendbirdChatSDK.BaseMessage?
  }
}
extension SendbirdUIKit.SBUMessageSearchModule.List : SendbirdUIKit.SBUEmptyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
}
extension SendbirdUIKit.SBUMessageSearchModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
extension SendbirdUIKit.SBUMessageSearchModule {
  public static var HeaderComponent: SendbirdUIKit.SBUMessageSearchModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUMessageSearchModule.List.Type
}
extension SendbirdUIKit.SBUMessageSearchModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type?
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUSearchBar.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
}
extension SendbirdUIKit.SBUMessageSearchModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var MessageSearchResultCell: SendbirdUIKit.SBUMessageSearchResultCell.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMessageSearchResultCell : SendbirdUIKit.SBUTableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var coverImage: SendbirdUIKit.SBUCoverImageView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileMessageLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileMessageIcon: UIKit.UIImageView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileStackView: UIKit.UIStackView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var createdAtLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var separatorLine: UIKit.UIView {
    get
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageSearchResultCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func configure(message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) public func setupFileIcon()
}
extension SendbirdUIKit.SBUMessageSearchViewController {
  @objc @available(*, unavailable, renamed: "headerComponent.titleView", message: "This property has been moved to the `SBUMessageSearchModule.Header`. And renamed to `titleView`.")
  @_Concurrency.MainActor(unsafe) dynamic public var searchBar: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "listComponent.tableView", message: "This property has been moved to the `SBUMessageSearchModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var tableView: UIKit.UITableView? {
    @objc get
  }
  @objc @available(*, unavailable, renamed: "listComponent.messageSearchResultCell", message: "This property has been moved to the `SBUMessageSearchModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var messageSearchResultCell: SendbirdUIKit.SBUMessageSearchResultCell? {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "listComponent.emptyView", message: "This property has been moved to the `SBUMessageSearchModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "viewModel.messageListParams", message: "This property has been moved to the `SBUMessageSearchViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public var messageListParams: SendbirdChatSDK.MessageListParams? {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "This property has been removed. If you want to customization, you can use `customMessageSearchQueryParams`.")
  @_Concurrency.MainActor(unsafe) public var customMessageSearchQueryBuilder: ((SendbirdUIKit.MessageSearchQueryBuilder) -> Swift.Void)? {
    get
    set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.updateSearchBarStyle(with:)", message: "This function has been moved to the `SBUMessageSearchModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public func setupSearchBarStyle(searchBar: UIKit.UISearchBar)
  @objc @available(*, deprecated, renamed: "listComponent.message(at:)", message: "This property has been moved to the `SBUMessageSearchViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic open func message(at indexPath: Foundation.IndexPath) -> SendbirdChatSDK.BaseMessage?
  @objc @available(*, deprecated, renamed: "listComponent.register(resultCell:nib:)", message: "This function has been moved to the `SBUMessageSearchModule.List`.`")
  @_Concurrency.MainActor(unsafe) dynamic public func register(messageSearchResultCell: SendbirdUIKit.SBUMessageSearchResultCell, nib: UIKit.UINib? = nil)
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
  @available(*, unavailable, renamed: "errorHandler(_:_:)")
  @_Concurrency.MainActor(unsafe) public func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger?)
}
@_hasMissingDesignatedInitializers public class MessageSearchQueryBuilder {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUMessageSearchViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUMessageSearchModuleHeaderDelegate, SendbirdUIKit.SBUMessageSearchModuleListDelegate, SendbirdUIKit.SBUMessageSearchModuleListDataSource, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUEmptyViewDelegate, SendbirdUIKit.SBUMessageSearchViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUMessageSearchModule.List?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageSearchTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUMessageSearchViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var searchResultList: [SendbirdChatSDK.BaseMessage] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var customMessageSearchQueryParams: SendbirdChatSDK.MessageSearchQueryParams?
  @available(*, unavailable, renamed: "SBUMessageSearchViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUMessageSearchViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.BaseChannel)
  @objc @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(channel: SendbirdChatSDK.BaseChannel)
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(channelURL: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) public func search(keyword: Swift.String)
  @_Concurrency.MainActor(unsafe) public func enterChannel(with message: SendbirdChatSDK.BaseMessage, highlightInfo: SendbirdUIKit.SBUHighlightMessageInfo?, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func messageSearchModule(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func messageSearchModule(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func messageSearchModule(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func messageSearchModule(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header, didTapSearch keyword: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func messageSearchModuleDidTapCancel(_ headerComponent: SendbirdUIKit.SBUMessageSearchModule.Header)
  @objc @_Concurrency.MainActor(unsafe) open func messageSearchModule(_ listComponent: SendbirdUIKit.SBUMessageSearchModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func messageSearchModule(_ listComponent: SendbirdUIKit.SBUMessageSearchModule.List, didDetectPreloadingPosition index: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func messageSearchModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUMessageSearchModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func messageSearchModule(_ listComponent: SendbirdUIKit.SBUMessageSearchModule.List, searchResultsInTableView tableView: UIKit.UITableView) -> [SendbirdChatSDK.BaseMessage]
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didSelectRetry()
  @_Concurrency.MainActor(unsafe) open func searchViewModel(_ viewModel: SendbirdUIKit.SBUMessageSearchViewModel, didChangeSearchResults results: [SendbirdChatSDK.BaseMessage], needsToReload: Swift.Bool)
}
public protocol SBUMessageSearchViewModelDelegate : SendbirdUIKit.SBUCommonViewModelDelegate {
  func searchViewModel(_ viewModel: SendbirdUIKit.SBUMessageSearchViewModel, didChangeSearchResults results: [SendbirdChatSDK.BaseMessage], needsToReload: Swift.Bool)
}
open class SBUMessageSearchViewModel {
  public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  public var channelURL: Swift.String? {
    get
  }
  @SendbirdUIKit.SBUAtomic public var searchResultList: [SendbirdChatSDK.BaseMessage] {
    get
  }
  public var messageListParams: SendbirdChatSDK.MessageListParams?
  public var messageSearchQuery: SendbirdChatSDK.MessageSearchQuery? {
    get
  }
  required public init(channel: SendbirdChatSDK.BaseChannel, params: SendbirdChatSDK.MessageSearchQueryParams? = nil, delegate: (any SendbirdUIKit.SBUMessageSearchViewModelDelegate)? = nil)
  required public init(channelURL: Swift.String, params: SendbirdChatSDK.MessageSearchQueryParams? = nil, delegate: (any SendbirdUIKit.SBUMessageSearchViewModelDelegate)? = nil)
  public func loadChannel(channelURL: Swift.String)
  open func search(keyword: Swift.String)
  public func search(keyword: Swift.String, query: SendbirdChatSDK.MessageSearchQuery)
  public func loadMore()
  @objc deinit
}
open class SBUMessageStateViewParams {
  final public let timestamp: Swift.Int64
  final public let sendingState: SendbirdChatSDK.MessageSendingStatus
  final public let receiptState: SendbirdUIKit.SBUMessageReceiptState
  final public let position: SendbirdUIKit.MessagePosition
  final public let isQuotedReplyMessage: Swift.Bool
  public init(timestamp: Swift.Int64, sendingState: SendbirdChatSDK.MessageSendingStatus, receiptState: SendbirdUIKit.SBUMessageReceiptState, position: SendbirdUIKit.MessagePosition, isQuotedReplyMessage: Swift.Bool = false)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class SBUMessageStateView : SendbirdUIKit.SBUView {
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var stackView: SendbirdUIKit.SBUStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var stateImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var timeLabel: UIKit.UILabel
  @available(*, deprecated, renamed: "SBUDateFormatSet.Message.sentTimeFormat")
  @_Concurrency.MainActor(unsafe) public var timeFormat: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var timeLabelCustomSize: CoreFoundation.CGSize?
  @_Concurrency.MainActor(unsafe) public init(sendingState: SendbirdChatSDK.MessageSendingStatus, receiptState: SendbirdUIKit.SBUMessageReceiptState, isQuotedReplyMessage: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public init(isQuotedReplyMessage: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: SendbirdUIKit.SBUMessageStateViewParams)
  @available(*, deprecated, renamed: "configure(with:)")
  @_Concurrency.MainActor(unsafe) open func configure(timestamp: Swift.Int64, sendingState: SendbirdChatSDK.MessageSendingStatus, receiptState: SendbirdUIKit.SBUMessageReceiptState?, position: SendbirdUIKit.MessagePosition)
  @objc deinit
}
extension SendbirdUIKit.SBUMessageTemplate {
  public class Action : Swift.Decodable {
    final public let type: SendbirdUIKit.SBUMessageTemplate.ActionType
    final public let data: Swift.String
    final public let alterData: Swift.String?
    required public init(from decoder: any Swift.Decoder) throws
    public var urlFromActionDatas: Foundation.URL? {
      get
    }
    @objc deinit
  }
  public enum ActionType : Swift.String, Swift.Decodable {
    case web, custom, uikit
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SendbirdUIKit.SBUMessageTemplate {
  public struct Container {
    public let type: SendbirdUIKit.SBUMessageTemplate.Container.ContainerType
    public let containerOptions: SendbirdUIKit.SBUMessageTemplate.Container.ContainerOptions
  }
}
extension SendbirdUIKit.SBUMessageTemplate.Container {
  public enum ContainerType : Swift.String {
    case `default`
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct ContainerOptions {
    public let profile: Swift.Bool
    public let time: Swift.Bool
    public let nickname: Swift.Bool
  }
}
extension SendbirdUIKit.SBUMessageTemplate.Container.ContainerType {
  public var isValid: Swift.Bool {
    get
  }
  public static func isValidType(with template: [Swift.String : Any]) -> Swift.Bool
}
extension SendbirdUIKit.SBUMessageTemplate.Container.ContainerOptions : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SBUMessageTemplate {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMessageTemplateCell : SendbirdUIKit.SBUBaseMessageCell, SendbirdUIKit.SBUSuggestedReplyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var profileView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userNameView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func createProfileView() -> SendbirdUIKit.SBUMessageProfileView
  @objc @_Concurrency.MainActor(unsafe) open func createUserNameView() -> SendbirdUIKit.SBUUserNameView
  @objc @_Concurrency.MainActor(unsafe) open func createStateView() -> SendbirdUIKit.SBUMessageStateView
  @objc @_Concurrency.MainActor(unsafe) public var messageTemplateContainer: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var suggestedReplyView: SendbirdUIKit.SBUSuggestedReplyView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var shouldHideSuggestedReplies: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  @objc @_Concurrency.MainActor(unsafe) open func configureProfileView()
  @objc @_Concurrency.MainActor(unsafe) open func configureUserNameView()
  @objc @_Concurrency.MainActor(unsafe) open func configureStateView()
  @objc @_Concurrency.MainActor(unsafe) public func configureMessageTemplateContainer()
  @objc @_Concurrency.MainActor(unsafe) public func configureMessageTemplateLayer()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func onTapUserProfileView(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func updateSuggestedReplyView(with options: [Swift.String]?)
  @objc @_Concurrency.MainActor(unsafe) public func suggestedReplyView(_ view: SendbirdUIKit.SBUSuggestedReplyView, didSelectOption optionView: SendbirdUIKit.SBUSuggestedReplyOptionView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class SBUMessageTemplateCellParams : SendbirdUIKit.SBUBaseMessageCellParams {
  final public let shouldHideSuggestedReplies: Swift.Bool
  final public let container: SendbirdUIKit.SBUMessageTemplate.Container
  public init(message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool = false, groupPosition: SendbirdUIKit.MessageGroupPosition = .none, receiptState: SendbirdUIKit.SBUMessageReceiptState = .none, isThreadMessage: Swift.Bool = false, joinedAt: Swift.Int64 = 0, messageOffsetTimestamp: Swift.Int64 = 0, shouldHideSuggestedReplies: Swift.Bool = true)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SBUMessageTemplateManager : ObjectiveC.NSObject {
  public static func resetNotificationTemplateCache()
  public static func resetMessageTemplateCache()
  @objc override dynamic public init()
  @objc deinit
}
open class SBUMessageThreadModule {
  @available(*, deprecated, message: "Use `SBUMessageThreadModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUMessageThreadModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUMessageThreadModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUMessageThreadModule.List? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUMessageThreadModule.InputComponent` instead.")
  public var inputComponent: (SendbirdUIKit.SBUMessageThreadModule.Input)? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageThreadModule")
  required public init(headerComponent: SendbirdUIKit.SBUMessageThreadModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageThreadModule")
  required public init(listComponent: SendbirdUIKit.SBUMessageThreadModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageThreadModule")
  required public init(inputComponent: (SendbirdUIKit.SBUMessageThreadModule.Input)?)
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageThreadModule")
  required public init(headerComponent: SendbirdUIKit.SBUMessageThreadModule.Header?, listComponent: SendbirdUIKit.SBUMessageThreadModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageThreadModule")
  required public init(headerComponent: SendbirdUIKit.SBUMessageThreadModule.Header?, inputComponent: (SendbirdUIKit.SBUMessageThreadModule.Input)?)
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageThreadModule")
  required public init(listComponent: SendbirdUIKit.SBUMessageThreadModule.List?, inputComponent: (SendbirdUIKit.SBUMessageThreadModule.Input)?)
  @available(*, deprecated, message: "Use `SBUModuleSet.MessageThreadModule")
  required public init(headerComponent: SendbirdUIKit.SBUMessageThreadModule.Header?, listComponent: SendbirdUIKit.SBUMessageThreadModule.List?, inputComponent: (SendbirdUIKit.SBUMessageThreadModule.Input)?)
  @objc deinit
}
public protocol SBUMessageThreadModuleHeaderDelegate : SendbirdUIKit.SBUBaseChannelModuleHeaderDelegate {
}
extension SendbirdUIKit.SBUMessageThreadModuleHeaderDelegate {
  public func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  public func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  public func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
}
extension SendbirdUIKit.SBUMessageThreadModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseChannelModule.Header, SendbirdUIKit.SBUMessageThreadTitleViewDelegate {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageThreadModuleHeaderDelegate)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) public var parentMessage: SendbirdChatSDK.BaseMessage? {
      get
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUMessageThreadModuleHeaderDelegate, parentMessage: SendbirdChatSDK.BaseMessage?, theme: SendbirdUIKit.SBUChannelTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
    @_Concurrency.MainActor(unsafe) override open func setupStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapTitleView()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) open func messageThreadTitleViewDidTap(_ messageThreadTitleView: SendbirdUIKit.SBUMessageThreadTitleView)
    @objc deinit
  }
}
public protocol SBUMessageThreadModuleInputDelegate : SendbirdUIKit.SBUBaseChannelModuleInputDelegate {
  func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, didPickFileData fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage?)
  func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, didTapSend text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String], parentMessage: SendbirdChatSDK.BaseMessage?)
  func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, didTapEdit text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
  func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
  func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, shouldLoadSuggestedMentions filterText: Swift.String)
  func messageThreadModuleShouldStopSuggestingMention(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input)
  func messageThreadModuleDidTapVoiceMessage(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input)
  func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, didPickMultipleFiles fileInfoList: [SendbirdChatSDK.UploadableFileInfo], parentMessage: SendbirdChatSDK.BaseMessage)
}
public protocol SBUMessageThreadModuleInputDataSource : SendbirdUIKit.SBUBaseChannelModuleInputDataSource {
}
extension SendbirdUIKit.SBUMessageThreadModule {
  @_inheritsConvenienceInitializers @objc(SBUMessageThreadModuleInput) @objcMembers @_Concurrency.MainActor(unsafe) open class Input : SendbirdUIKit.SBUBaseChannelModule.Input, SendbirdUIKit.SBUMentionManagerDelegate, SendbirdUIKit.SBUSuggestedMentionListDelegate {
    @objc @_Concurrency.MainActor(unsafe) public var suggestedMentionList: SendbirdUIKit.SBUSuggestedMentionList?
    @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.GroupChannel? {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageThreadModuleInputDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUMessageThreadModuleInputDataSource)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var mentionManagerDataSource: (any SendbirdUIKit.SBUMentionManagerDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var parentMessage: SendbirdChatSDK.BaseMessage?
    @objc @_Concurrency.MainActor(unsafe) public var mentionManager: SendbirdUIKit.SBUMentionManager?
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUMessageThreadModuleInputDelegate, dataSource: any SendbirdUIKit.SBUMessageThreadModuleInputDataSource, parentMessage: SendbirdChatSDK.BaseMessage?, mentionManagerDataSource: (any SendbirdUIKit.SBUMentionManagerDataSource)? = nil, theme: SendbirdUIKit.SBUChannelTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
    @_Concurrency.MainActor(unsafe) @objc override open func pickImageFile(info: [UIKit.UIImagePickerController.InfoKey : Any])
    @_Concurrency.MainActor(unsafe) @objc override open func pickVideoFile(info: [UIKit.UIImagePickerController.InfoKey : Any])
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) @objc override open func pickImageFile(itemProvider: Foundation.NSItemProvider)
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) @objc override open func pickGIFFile(itemProvider: Foundation.NSItemProvider)
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) @objc override open func pickVideoFile(itemProvider: Foundation.NSItemProvider)
    @_Concurrency.MainActor(unsafe) @objc override open func pickDocumentFile(documentURLs: [Foundation.URL])
    @_Concurrency.MainActor(unsafe) @objc override open func pickImageData(_ data: Foundation.Data, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
    @_Concurrency.MainActor(unsafe) @objc override open func pickVideoURL(_ url: Foundation.URL)
    @objc @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) public func pickMultipleImageFiles(itemProviders: [Foundation.NSItemProvider])
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) public func loadImageFile(itemProvider: Foundation.NSItemProvider, index: Swift.Int? = nil, completion: @escaping (Foundation.Data?, Swift.String?, Swift.String?) -> Swift.Void)
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) public func loadGIFfile(itemProvider: Foundation.NSItemProvider, index: Swift.Int? = nil, completion: @escaping (Foundation.Data?, Swift.String?, Swift.String?) -> Swift.Void)
    @_Concurrency.MainActor(unsafe) @objc override open func updateMessageInputMode(_ mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage? = nil)
    @_Concurrency.MainActor(unsafe) @objc override open func updateMessageInputModeState()
    @_Concurrency.MainActor(unsafe) @objc override open func updateFrozenModeState()
    @objc @_Concurrency.MainActor(unsafe) open func updateBroadcastModeState()
    @objc @_Concurrency.MainActor(unsafe) open func updateMutedModeState()
    @objc @_Concurrency.MainActor(unsafe) open func updatePlaceholder()
    @objc @_Concurrency.MainActor(unsafe) open func setupMentionManager()
    @objc @_Concurrency.MainActor(unsafe) open func handlePendingMentionSuggestion(with members: [SendbirdUIKit.SBUUser]?)
    @objc @_Concurrency.MainActor(unsafe) open func updateSuggestedMentionList(with members: [SendbirdUIKit.SBUUser])
    @objc @_Concurrency.MainActor(unsafe) open func presentSuggestedMentionList()
    @objc @_Concurrency.MainActor(unsafe) open func dismissSuggestedMentionList()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, shouldInteractWith url: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didChangeSelection range: Foundation.NSRange)
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectSend text: Swift.String)
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
    @objc @_Concurrency.MainActor(unsafe) open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?, mentionManager: SendbirdUIKit.SBUMentionManager)
    @objc @_Concurrency.MainActor(unsafe) open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectSend text: Foundation.NSAttributedString, mentionManager: SendbirdUIKit.SBUMentionManager, parentMessage: SendbirdChatSDK.BaseMessage?)
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectEdit text: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) open func messageInputView(_ messageInputView: SendbirdUIKit.SBUMessageInputView, didSelectEdit text: Foundation.NSAttributedString, mentionManager: SendbirdUIKit.SBUMentionManager)
    @_Concurrency.MainActor(unsafe) @objc override open func messageInputViewDidTapVoiceMessage(_ messageInputView: SendbirdUIKit.SBUMessageInputView)
    @objc @_Concurrency.MainActor(unsafe) open func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, didChangeSuggestedMention members: [SendbirdUIKit.SBUUser], filteredText: Swift.String?, isTriggered: Swift.Bool)
    @objc @_Concurrency.MainActor(unsafe) open func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, didInsertMentionsTo textView: UIKit.UITextView)
    @objc @_Concurrency.MainActor(unsafe) open func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, shouldLoadSuggestedMentions keyword: Swift.String)
    @objc @_Concurrency.MainActor(unsafe) open func suggestedUserList(_ list: SendbirdUIKit.SBUSuggestedMentionList, didSelectUser user: SendbirdUIKit.SBUUser)
    @objc deinit
  }
}
public protocol SBUMessageThreadModuleListDelegate : SendbirdUIKit.SBUBaseChannelModuleListDelegate {
  func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didTapEmoji emojiKey: Swift.String, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didLongTapEmoji emojiKey: Swift.String, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didTapMoreEmojiForCell messageCell: SendbirdUIKit.SBUBaseMessageCell)
  func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didTapMentionUser user: SendbirdUIKit.SBUUser)
  func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didSelectFileAt index: Swift.Int, multipleFilesMessageCell: SendbirdUIKit.SBUMultipleFilesMessageCell, forRowAt cellIndexPath: Foundation.IndexPath)
  func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, uploadedFileInfo: SendbirdChatSDK.UploadedFileInfo, message: SendbirdChatSDK.MultipleFilesMessage, index: Swift.Int)
}
public protocol SBUMessageThreadModuleListDataSource : SendbirdUIKit.SBUBaseChannelModuleListDataSource {
}
extension SendbirdUIKit.SBUMessageThreadModule {
  @_inheritsConvenienceInitializers @objc(SBUMessageThreadModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseChannelModule.List, SendbirdUIKit.SBUParentMessageInfoViewDelegate, SendbirdUIKit.SBUVoicePlayerDelegate {
    @objc @_Concurrency.MainActor(unsafe) public var parentMessageInfoView: SendbirdUIKit.SBUParentMessageInfoView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var tempMarginView: UIKit.UIView
    @objc @_Concurrency.MainActor(unsafe) public var adminMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var userMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var fileMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var multipleFilesMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var unknownMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @objc @_Concurrency.MainActor(unsafe) public var customMessageCell: SendbirdUIKit.SBUBaseMessageCell? {
      get
    }
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageThreadModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUMessageThreadModuleListDataSource)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.GroupChannel? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var parentMessage: SendbirdChatSDK.BaseMessage?
    @objc @_Concurrency.MainActor(unsafe) public var voicePlayer: SendbirdUIKit.SBUVoicePlayer?
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUMessageThreadModuleListDelegate, dataSource: any SendbirdUIKit.SBUMessageThreadModuleListDataSource, theme: SendbirdUIKit.SBUChannelTheme, voiceFileInfos: [Swift.String : SendbirdUIKit.SBUVoiceFileInfo]? = nil)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
    @_Concurrency.MainActor(unsafe) override open func setupStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
    @_Concurrency.MainActor(unsafe) override open func updateStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil, componentTheme: SendbirdUIKit.SBUComponentTheme = SBUTheme.componentTheme)
    @objc @_Concurrency.MainActor(unsafe) public func updateParentInfoView()
    @objc @_Concurrency.MainActor(unsafe) public func updateParentInfoView(parentMessage: SendbirdChatSDK.BaseMessage?)
    @objc @_Concurrency.MainActor(unsafe) open func setParentMessageInfoViewGestures(message: SendbirdChatSDK.BaseMessage)
    @objc @_Concurrency.MainActor(unsafe) open func calculateMessageMenuCGPoint(indexPath: Foundation.IndexPath, position: SendbirdUIKit.MessagePosition) -> CoreFoundation.CGPoint
    @_Concurrency.MainActor(unsafe) override open func createMessageMenuItems(for message: SendbirdChatSDK.BaseMessage) -> [SendbirdUIKit.SBUMenuItem]
    @_Concurrency.MainActor(unsafe) @objc override open func showMessageContextMenu(for message: SendbirdChatSDK.BaseMessage, cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setMessageCellGestures(_ cell: SendbirdUIKit.SBUBaseMessageCell, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc override public func reloadTableView(needsToLayout: Swift.Bool = true)
    @objc @_Concurrency.MainActor(unsafe) public func register(messageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(adminMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(userMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(fileMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(multipleFilesMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(unknownMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(customMessageCell: SendbirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ messageCell: SendbirdUIKit.SBUBaseMessageCell, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
    @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
    @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
    @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
    @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func generateCellIdentifier(by message: SendbirdChatSDK.BaseMessage) -> Swift.String
    @_Concurrency.MainActor(unsafe) @objc override open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
    @objc @_Concurrency.MainActor(unsafe) open func parentMessageInfoViewBoundsDidChanged(_ view: SendbirdUIKit.SBUParentMessageInfoView)
    @objc @_Concurrency.MainActor(unsafe) open func parentMessageInfoViewBoundsWillChanged(_ view: SendbirdUIKit.SBUParentMessageInfoView)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUMessageThreadModule.List {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isScrollNearByBottom: Swift.Bool {
    @objc get
  }
}
extension SendbirdUIKit.SBUMessageThreadModule.List {
  @_Concurrency.MainActor(unsafe) public func voicePlayerDidReceiveError(_ player: SendbirdUIKit.SBUVoicePlayer, errorStatus: SendbirdUIKit.SBUVoicePlayerErrorStatus)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidStart(_ player: SendbirdUIKit.SBUVoicePlayer)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidPause(_ player: SendbirdUIKit.SBUVoicePlayer, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidStop(_ player: SendbirdUIKit.SBUVoicePlayer)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidReset(_ player: SendbirdUIKit.SBUVoicePlayer)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func voicePlayerDidUpdatePlayTime(_ player: SendbirdUIKit.SBUVoicePlayer, time: Foundation.TimeInterval)
}
extension SendbirdUIKit.SBUMessageThreadModule {
  public static var HeaderComponent: SendbirdUIKit.SBUMessageThreadModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUMessageThreadModule.List.Type
  public static var InputComponent: SendbirdUIKit.SBUMessageThreadModule.Input.Type
}
extension SendbirdUIKit.SBUMessageThreadModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUMessageThreadTitleView.Type
}
extension SendbirdUIKit.SBUMessageThreadModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var AdminMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var FileMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var MultipleFilesMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UnknownMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var CustomMessageCell: SendbirdUIKit.SBUBaseMessageCell.Type?
  @objc @_Concurrency.MainActor(unsafe) public static var ChannelStateBanner: SendbirdUIKit.SBUChannelStateBanner.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserProfileView: SendbirdUIKit.SBUUserProfileView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var ParentMessageInfoView: SendbirdUIKit.SBUParentMessageInfoView.Type
}
extension SendbirdUIKit.SBUMessageThreadModule.Input {
  @objc @_Concurrency.MainActor(unsafe) public static var MessageInputView: SendbirdUIKit.SBUMessageInputView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var VoiceMessageInputView: SendbirdUIKit.SBUVoiceMessageInputView.Type
}
public protocol SBUMessageThreadTitleViewDelegate : AnyObject {
  func messageThreadTitleViewDidTap(_ messageThreadTitleView: SendbirdUIKit.SBUMessageThreadTitleView)
}
@objc @_Concurrency.MainActor(unsafe) open class SBUMessageThreadTitleView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageThreadTitleViewDelegate)?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var channelName: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var channelNameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(delegate: (any SendbirdUIKit.SBUMessageThreadTitleViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func onTapChannelName(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) open func configure(channel: SendbirdChatSDK.BaseChannel?, title: Swift.String?)
  @objc deinit
}
public protocol SBUMessageThreadViewControllerDelegate : AnyObject {
  func messageThreadViewController(_ viewController: SendbirdUIKit.SBUMessageThreadViewController, shouldMoveToParentMessage parentMessage: SendbirdChatSDK.BaseMessage)
  func messageThreadViewController(_ viewController: SendbirdUIKit.SBUMessageThreadViewController, shouldSyncVoiceFileInfos voiceFileInfos: [Swift.String : SendbirdUIKit.SBUVoiceFileInfo]?)
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class SBUMessageThreadViewController : SendbirdUIKit.SBUBaseChannelViewController, SendbirdUIKit.SBUMessageThreadViewModelDelegate, SendbirdUIKit.SBUMessageThreadViewModelDataSource, SendbirdUIKit.SBUMessageThreadModuleHeaderDelegate, SendbirdUIKit.SBUMessageThreadModuleListDelegate, SendbirdUIKit.SBUMessageThreadModuleListDataSource, SendbirdUIKit.SBUMessageThreadModuleInputDelegate, SendbirdUIKit.SBUMessageThreadModuleInputDataSource, SendbirdUIKit.SBUMentionManagerDataSource, SendbirdUIKit.SBUVoiceMessageInputViewDelegate, SendbirdUIKit.SBUReactionsViewControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUMessageThreadModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUMessageThreadModule.List? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var voiceMessageInputView: SendbirdUIKit.SBUVoiceMessageInputView
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUMessageThreadViewModel? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUMessageThreadViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var channel: SendbirdChatSDK.GroupChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var parentMessage: SendbirdChatSDK.BaseMessage? {
    @objc get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, startingPoint: Swift.Int64? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.GroupChannel? = nil, channelURL: Swift.String? = nil, parentMessage: SendbirdChatSDK.BaseMessage? = nil, parentMessageId: Swift.Int64? = nil, delegate: (any SendbirdUIKit.SBUMessageThreadViewControllerDelegate)? = nil, threadedMessageListParams: SendbirdChatSDK.ThreadedMessageListParams? = nil, startingPoint: Swift.Int64? = .max, voiceFileInfos: [Swift.String : SendbirdUIKit.SBUVoiceFileInfo]? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override open func applicationWillResignActivity()
  @_Concurrency.MainActor(unsafe) @objc override open func willPresentSubview()
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, parentMessage: SendbirdChatSDK.BaseMessage? = nil, parentMessageId: Swift.Int64? = nil, threadedMessageListParams: SendbirdChatSDK.ThreadedMessageListParams? = nil, startingPoint: Swift.Int64? = nil)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles(needsToLayout: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) public func moveToParentMessage()
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override public func increaseNewMessageCount() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override public func updateChannelTitle()
  @available(iOS 14, *)
  @_Concurrency.MainActor(unsafe) override open func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
  @_Concurrency.MainActor(unsafe) @objc override open func showVoiceMessageInput()
  @_Concurrency.MainActor(unsafe) @objc override open func dismissVoiceMessageInput()
  @_Concurrency.MainActor(unsafe) @objc override open func resetVoiceMessageInput(for resignActivity: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadViewModel(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel, didReceiveSuggestedMentions members: [SendbirdUIKit.SBUUser]?)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadViewModel(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel, didLoadParentMessage parentMessage: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) public func messageThreadViewModel(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel, didUpdateParentMessage parentMessage: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadViewModelShouldDismissMessageThread(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel)
  @objc @_Concurrency.MainActor(unsafe) public func messageThreadViewModel(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel, didFinishUploadingFileAt index: Swift.Int, multipleFilesMessageRequestId requestId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapTitleView titleView: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didTapEmoji emojiKey: Swift.String, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didLongTapEmoji emojiKey: Swift.String, messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didTapMoreEmojiForCell messageCell: SendbirdUIKit.SBUBaseMessageCell)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didTapMentionUser user: SendbirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) public func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, didSelectFileAt index: Swift.Int, multipleFilesMessageCell: SendbirdUIKit.SBUMultipleFilesMessageCell, forRowAt cellIndexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func messageThreadModule(_ listComponent: SendbirdUIKit.SBUMessageThreadModule.List, uploadedFileInfo: SendbirdChatSDK.UploadedFileInfo, message: SendbirdChatSDK.MultipleFilesMessage, index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didScroll scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapVoiceMessage fileMessage: SendbirdChatSDK.FileMessage, cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didUpdateFrozenState isFrozen: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, didPickFileData fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) public func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, didPickMultipleFiles fileInfoList: [SendbirdChatSDK.UploadableFileInfo], parentMessage: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, didTapSend text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String], parentMessage: SendbirdChatSDK.BaseMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, didTapEdit text: Swift.String, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, willChangeMode mode: SendbirdUIKit.SBUMessageInputMode, message: SendbirdChatSDK.BaseMessage?, mentionedMessageTemplate: Swift.String, mentionedUserIds: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModule(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input, shouldLoadSuggestedMentions filterText: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModuleShouldStopSuggestingMention(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input)
  @objc @_Concurrency.MainActor(unsafe) open func messageThreadModuleDidTapVoiceMessage(_ inputComponent: SendbirdUIKit.SBUMessageThreadModule.Input)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModuleDidStartTyping(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModuleDidEndTyping(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input)
  @objc @_Concurrency.MainActor(unsafe) open func mentionManager(_ manager: SendbirdUIKit.SBUMentionManager, suggestedMentionUsersWith filterText: Swift.String) -> [SendbirdUIKit.SBUUser]
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didChangeMessageList messages: [SendbirdChatSDK.BaseMessage], needsToReload: Swift.Bool, initialLoad: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, deletedMessages messages: [SendbirdChatSDK.BaseMessage])
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didUpdateReaction reaction: SendbirdChatSDK.ReactionEvent, forMessage message: SendbirdChatSDK.BaseMessage)
  @objc @_Concurrency.MainActor(unsafe) public func voiceMessageInputViewDidTapCacel(_ inputView: SendbirdUIKit.SBUVoiceMessageInputView)
  @objc @_Concurrency.MainActor(unsafe) public func voiceMessageInputView(_ inputView: SendbirdUIKit.SBUVoiceMessageInputView, didTapSend voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
  @objc @_Concurrency.MainActor(unsafe) public func voiceMessageInputView(_ inputView: SendbirdUIKit.SBUVoiceMessageInputView, willStartToRecord voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
  @objc @_Concurrency.MainActor(unsafe) open func reactionsViewController(_ viewController: SendbirdUIKit.SBUReactionsViewController, didTapUserProfile user: SendbirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func reactionsViewController(_ viewController: SendbirdUIKit.SBUReactionsViewController, tableView: UIKit.UITableView, didSelect user: SendbirdUIKit.SBUUser, forRowAt indexPath: Foundation.IndexPath)
}
public protocol SBUMessageThreadViewModelDataSource : SendbirdUIKit.SBUBaseChannelViewModelDataSource {
}
public protocol SBUMessageThreadViewModelDelegate : SendbirdUIKit.SBUBaseChannelViewModelDelegate {
  func messageThreadViewModel(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel, didReceiveSuggestedMentions members: [SendbirdUIKit.SBUUser]?)
  func messageThreadViewModel(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel, didLoadParentMessage parentMessage: SendbirdChatSDK.BaseMessage?)
  func messageThreadViewModel(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel, didUpdateParentMessage parentMessage: SendbirdChatSDK.BaseMessage?)
  func messageThreadViewModelShouldDismissMessageThread(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel)
  func messageThreadViewModel(_ viewModel: SendbirdUIKit.SBUMessageThreadViewModel, didFinishUploadingFileAt index: Swift.Int, multipleFilesMessageRequestId requestId: Swift.String)
}
@objc open class SBUMessageThreadViewModel : SendbirdUIKit.SBUBaseChannelViewModel {
  weak public var delegate: (any SendbirdUIKit.SBUMessageThreadViewModelDelegate)? {
    get
    set
  }
  weak public var dataSource: (any SendbirdUIKit.SBUMessageThreadViewModelDataSource)? {
    get
    set
  }
  public var customizedThreadedMessageListParams: SendbirdChatSDK.ThreadedMessageListParams? {
    get
  }
  public var threadedMessageListParams: SendbirdChatSDK.ThreadedMessageListParams {
    get
  }
  public var sendMultipleFilesMessageCompletionHandler: SendbirdChatSDK.MultipleFilesMessageHandler?
  required public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, parentMessage: SendbirdChatSDK.BaseMessage? = nil, parentMessageId: Swift.Int64? = 0, threadedMessageListParams: SendbirdChatSDK.ThreadedMessageListParams? = nil, startingPoint: Swift.Int64? = .max, delegate: (any SendbirdUIKit.SBUMessageThreadViewModelDelegate)? = nil, dataSource: (any SendbirdUIKit.SBUMessageThreadViewModelDataSource)? = nil)
  @objc deinit
  public func loadChannelAndMessages(channelURL: Swift.String?)
  override public func loadChannel(channelURL: Swift.String, messageListParams: SendbirdChatSDK.MessageListParams? = nil, completionHandler: ((SendbirdChatSDK.BaseChannel?, SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  override public func refreshChannel()
  public func loadParentMessage(parentMessageId: Swift.Int64, channelURL: Swift.String, isInitilize: Swift.Bool? = false, completionHandler: ((SendbirdChatSDK.BaseMessage?, SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  public func updateParentMessage()
  override public func loadInitialMessages(startingPoint: Swift.Int64?, showIndicator: Swift.Bool, initialMessages: [SendbirdChatSDK.BaseMessage]?)
  override public func loadPrevMessages()
  public func loadPrevMessages(timestamp: Swift.Int64?)
  override public func loadNextMessages()
  public func loadBothMessages(timestamp: Swift.Int64?, showIndicator: Swift.Bool)
  public func sendMultipleFilesMessage(fileInfoList: [SendbirdChatSDK.UploadableFileInfo], parentMessageId: Swift.Int64)
  public func updateMultipleFilesMessageCell(requestId: Swift.String, index: Swift.Int)
  open func setupSendUserMessageCompletionHandlers()
  open func setupSendFileMessageCompletionHandlers()
  override public func sortAllMessageList(needReload: Swift.Bool)
  public func startTypingMessage()
  public func endTypingMessage()
  public func loadSuggestedMentions(with filterText: Swift.String)
  public func cancelLoadingSuggestedMentions()
  override public func hasNext() -> Swift.Bool
  override public func hasPrevious() -> Swift.Bool
  override public func getStartingPoint() -> Swift.Int64?
}
extension SendbirdUIKit.SBUMessageThreadViewModel {
  @objc override dynamic open func didSucceedReconnection()
  @objc dynamic open func didFailReconnection()
}
extension SendbirdUIKit.SBUMessageThreadViewModel : SendbirdChatSDK.GroupChannelDelegate {
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceive message: SendbirdChatSDK.BaseMessage)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdate message: SendbirdChatSDK.BaseMessage)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdateThreadInfo threadInfoUpdateEvent: SendbirdChatSDK.ThreadInfoUpdateEvent)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedReaction reactionEvent: SendbirdChatSDK.ReactionEvent)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  @objc override dynamic open func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc override dynamic open func channelWasFrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc override dynamic open func channelWasUnfrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasMuted user: SendbirdChatSDK.RestrictedUser)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnmuted user: SendbirdChatSDK.User)
  @objc override dynamic open func channelDidUpdateOperators(_ channel: SendbirdChatSDK.BaseChannel)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
  @objc override dynamic open func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
}
extension SendbirdUIKit.SBUMessageThreadViewModel : SendbirdChatSDK.MessageCollectionDelegate {
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, channel: SendbirdChatSDK.GroupChannel, addedMessages messages: [SendbirdChatSDK.BaseMessage])
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, channel: SendbirdChatSDK.GroupChannel, updatedMessages messages: [SendbirdChatSDK.BaseMessage])
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, channel: SendbirdChatSDK.GroupChannel, deletedMessages messages: [SendbirdChatSDK.BaseMessage])
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, updatedChannel channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, deletedChannel channelURL: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMessageWebView : UIKit.UIStackView, SendbirdUIKit.SBUViewLifeCycle {
  public struct Metric {
    public static var imageHeight: CoreFoundation.CGFloat
    public static var textTopMargin: CoreFoundation.CGFloat
    public static var textSideMargin: CoreFoundation.CGFloat
    public static var titleBottomMargin: CoreFoundation.CGFloat
    public static var descBottomMargin: CoreFoundation.CGFloat
    public static var maxWidth: CoreFoundation.CGFloat
    public static var stackSpacing: CoreFoundation.CGFloat
    public static let textMaxPrefWidth: CoreFoundation.CGFloat
  }
  @_Concurrency.MainActor(unsafe) public var urlString: Swift.String?
  @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let detailStackView: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let descriptionLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let urlLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var imageHeightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var imageWitdhConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc open func setupActions()
  @_Concurrency.MainActor(unsafe) open func configure(model: SendbirdUIKit.SBUMessageWebViewModel)
  @objc deinit
}
public class SBUMessageWebViewModel {
  public var imageURL: Swift.String?
  public var titleAttributedText: Foundation.NSAttributedString?
  public var descAttributedText: Foundation.NSAttributedString?
  public var urlAttributedText: Foundation.NSAttributedString?
  public var placeHolderImage: UIKit.UIImage?
  public var errorImage: UIKit.UIImage?
  public init(metaData: SendbirdChatSDK.OGMetaData?, isOverlay: Swift.Bool = false, isOpenChannel: Swift.Bool = false)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUModerationCell : SendbirdUIKit.SBUBaseChannelSettingCell {
  @_Concurrency.MainActor(unsafe) open func configure(type: SendbirdUIKit.ModerationItemType, channel: SendbirdChatSDK.BaseChannel?, title: Swift.String? = nil, icon: UIKit.UIImage? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
open class SBUModerationsModule {
  @available(*, deprecated, message: "Use `SBUModerationsModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUModerationsModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUModerationsModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUModerationsModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenModerationsModule` or `SBUModuleSet.GroupModerationsModule`")
  required public init(headerComponent: SendbirdUIKit.SBUModerationsModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenModerationsModule` or `SBUModuleSet.GroupModerationsModule`")
  required public init(listComponent: SendbirdUIKit.SBUModerationsModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenModerationsModule` or `SBUModuleSet.GroupModerationsModule`")
  required public init(headerComponent: SendbirdUIKit.SBUModerationsModule.Header?, listComponent: SendbirdUIKit.SBUModerationsModule.List?)
  @objc deinit
}
public protocol SBUModerationsModuleHeaderDelegate : SendbirdUIKit.SBUCommonDelegate {
  func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
}
extension SendbirdUIKit.SBUModerationsModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUModerationsModuleHeaderDelegate)?
    @available(*, unavailable, renamed: "SBUModerationsModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUModerationsModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUModerationsModuleHeaderDelegate, theme: SendbirdUIKit.SBUChannelSettingsTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelSettingsTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func onTapLeftBarButton()
  }
}
public protocol SBUModerationsModuleListDelegate : SendbirdUIKit.SBUCommonDelegate {
  func moderationsModule(_ listComponent: SendbirdUIKit.SBUModerationsModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func moderationsModule(_ listComponent: SendbirdUIKit.SBUModerationsModule.List, didChangeFreezeMode state: Swift.Bool)
}
public protocol SBUModerationsModuleListDataSource : AnyObject {
  func moderationsModule(_ listComponent: SendbirdUIKit.SBUModerationsModule.List, channelForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.BaseChannel?
}
extension SendbirdUIKit.SBUModerationsModule {
  @_inheritsConvenienceInitializers @objc(SBUModerationsModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var moderationCell: UIKit.UITableViewCell?
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUModerationsModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUModerationsModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUModerationsModuleListDelegate, dataSource: any SendbirdUIKit.SBUModerationsModuleListDataSource, theme: SendbirdUIKit.SBUChannelSettingsTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc deinit
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelSettingsTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func register(moderationCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  }
}
extension SendbirdUIKit.SBUModerationsModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBUModerationsModule {
  public static var HeaderComponent: SendbirdUIKit.SBUModerationsModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUModerationsModule.List.Type
}
extension SendbirdUIKit.SBUModerationsModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
}
extension SendbirdUIKit.SBUModerationsModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var ModerationCell: SendbirdUIKit.SBUModerationCell.Type
}
extension SendbirdUIKit.SBUModerationsViewController {
  @objc @available(*, unavailable, message: "This function has been removed. Use `init(channelURL:channelType:)` instead.")
  @_Concurrency.MainActor(unsafe) convenience dynamic public init(channelURL: Swift.String)
  @objc @available(*, unavailable, message: "This function has been seperated. If you have channel object, use `createViewModel(channel:)` instead. or if you have channelUrl, use `createViewModel(channelURL:channelType:) instead.")
  @_Concurrency.MainActor(unsafe) dynamic open func createViewModel(channel: SendbirdChatSDK.GroupChannel? = nil, channelURL: Swift.String? = nil)
  @objc @available(*, deprecated, renamed: "channelURL")
  @_Concurrency.MainActor(unsafe) dynamic public var channelUrl: Swift.String? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "headerComponent.titleView", message: "This property has been moved to the `SBUModerationsModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.leftBarButton", message: "This property has been moved to the `SBUModerationsModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "headerComponent.rightBarButton", message: "This property has been moved to the `SBUModerationsModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.tableView", message: "This property has been moved to the SBUModerationsModule.List.")
  @_Concurrency.MainActor(unsafe) dynamic public var tableView: UIKit.UITableView? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "viewModel.loadChannel(channelURL:)", message: "This function has been moved to the `SBUModerationsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func loadChannel(channelUrl: Swift.String?)
  @objc @available(*, deprecated, renamed: "viewModel.freezeChannel(_:)", message: "This function has been moved to the `SBUModerationsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func freezeChannel(completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @available(*, deprecated, renamed: "viewModel.unfreezeChannel(_:)", message: "This function has been moved to the `SBUModerationsViewModel`.")
  @_Concurrency.MainActor(unsafe) dynamic public func unfreezeChannel(completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @available(*, unavailable, renamed: "shouldUpdateLoadingState(_:)")
  @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
  @objc @available(*, deprecated, renamed: "listComponent.register(moderationCell:nib:)", message: "This function has been moved to the SBUModerationsModule.List.`")
  @_Concurrency.MainActor(unsafe) dynamic public func register(moderationCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "showMutedMemberList()")
  @_Concurrency.MainActor(unsafe) dynamic open func showMutedMeberList()
  @objc @available(*, deprecated, renamed: "showBannedUserList()")
  @_Concurrency.MainActor(unsafe) dynamic open func showBannedMeberList()
  @available(*, unavailable, renamed: "errorHandler(_:_:)")
  @_Concurrency.MainActor(unsafe) public func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUModerationsViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUModerationsModuleHeaderDelegate, SendbirdUIKit.SBUModerationsModuleListDelegate, SendbirdUIKit.SBUModerationsModuleListDataSource, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUModerationsViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUModerationsModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUModerationsModule.List?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelSettingsTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUModerationsViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelURL: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelType: SendbirdChatSDK.ChannelType {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUModerationsViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUModerationsViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.BaseChannel)
  @objc @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
  @objc @_Concurrency.MainActor(unsafe) open func setupComponents(channelType: SendbirdChatSDK.ChannelType)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(channel: SendbirdChatSDK.BaseChannel)
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) public func changeFreeze(_ freeze: Swift.Bool, _ completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func showOperatorList()
  @objc @_Concurrency.MainActor(unsafe) open func showMutedMemberList()
  @objc @_Concurrency.MainActor(unsafe) open func showMutedParticipantList()
  @objc @_Concurrency.MainActor(unsafe) open func showBannedUserList()
  @_Concurrency.MainActor(unsafe) open func showUserList(userListType: SendbirdUIKit.ChannelUserListType)
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func moderationsModule(_ headerComponent: SendbirdUIKit.SBUModerationsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func moderationsModule(_ listComponent: SendbirdUIKit.SBUModerationsModule.List, didChangeFreezeMode state: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func moderationsModule(_ listComponent: SendbirdUIKit.SBUModerationsModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func moderationsModule(_ listComponent: SendbirdUIKit.SBUModerationsModule.List, channelForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.BaseChannel?
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func moderationsViewModel(_ viewModel: SendbirdUIKit.SBUModerationsViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
}
public protocol SBUModerationsViewModelDelegate : SendbirdUIKit.SBUCommonViewModelDelegate {
  func moderationsViewModel(_ viewModel: SendbirdUIKit.SBUModerationsViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
}
open class SBUModerationsViewModel {
  public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  public var channelURL: Swift.String? {
    get
  }
  public var channelType: SendbirdChatSDK.ChannelType {
    get
  }
  required public init(channel: SendbirdChatSDK.BaseChannel, delegate: (any SendbirdUIKit.SBUModerationsViewModelDelegate)? = nil)
  required public init(channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType, delegate: (any SendbirdUIKit.SBUModerationsViewModelDelegate)? = nil)
  public func loadChannel(channelURL: Swift.String)
  public func freezeChannel(_ completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  public func unfreezeChannel(_ completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
public class SBUModuleSet {
  @available(*, deprecated, message: "Use `GroupChannelListModule`")
  public static var groupChannelListModule: SendbirdUIKit.SBUGroupChannelListModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `OpenChannelListModule`")
  public static var openChannelListModule: SendbirdUIKit.SBUOpenChannelListModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `BaseChannelModule`")
  public static var baseChannelModule: SendbirdUIKit.SBUBaseChannelModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `GroupChannelModule`")
  public static var groupChannelModule: SendbirdUIKit.SBUGroupChannelModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `OpenChannelModule`")
  public static var openChannelModule: SendbirdUIKit.SBUOpenChannelModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `FeedNotificationChannelModule`")
  public static var feedNotificationChannelModule: SendbirdUIKit.SBUFeedNotificationChannelModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `ChatNotificationChannelModule`")
  public static var chatNotificationChannelModule: SendbirdUIKit.SBUChatNotificationChannelModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `InviteUserModule`")
  public static var inviteUserModule: SendbirdUIKit.SBUInviteUserModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `GroupRegisterOperatorModule`")
  public static var groupRegisterOperatorModule: SendbirdUIKit.SBURegisterOperatorModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `OpenRegisterOperatorModule`")
  public static var openRegisterOperatorModule: SendbirdUIKit.SBURegisterOperatorModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `GroupUserListModule`")
  public static var groupUserListModule: SendbirdUIKit.SBUUserListModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `OpenUserListModule`")
  public static var openUserListModule: SendbirdUIKit.SBUUserListModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `GroupChannelPushSettingsModule`")
  public static var groupChannelPushSettingsModule: SendbirdUIKit.SBUGroupChannelPushSettingsModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `CreateGroupChannelModule`")
  public static var createChannelModule: SendbirdUIKit.SBUCreateChannelModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `CreateOpenChannelModule`")
  public static var createOpenChannelModule: SendbirdUIKit.SBUCreateOpenChannelModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `GroupChannelSettingsModule`")
  public static var groupChannelSettingsModule: SendbirdUIKit.SBUGroupChannelSettingsModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `OpenChannelSettingsModule`")
  public static var openChannelSettingsModule: SendbirdUIKit.SBUOpenChannelSettingsModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `GroupModerationsModule`")
  public static var groupModerationsModule: SendbirdUIKit.SBUModerationsModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `OpenModerationsModule`")
  public static var openModerationsModule: SendbirdUIKit.SBUModerationsModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `MessageSearchModule")
  public static var messageSearchModule: SendbirdUIKit.SBUMessageSearchModule {
    get
    set
  }
  @available(*, deprecated, message: "Use `MessageThreadModule`")
  public static var messageThreadModule: SendbirdUIKit.SBUMessageThreadModule {
    get
    set
  }
  public init(groupChannelListModule: SendbirdUIKit.SBUGroupChannelListModule? = nil, openChannelListModule: SendbirdUIKit.SBUOpenChannelListModule? = nil, baseChannelModule: SendbirdUIKit.SBUBaseChannelModule? = nil, groupChannelModule: SendbirdUIKit.SBUGroupChannelModule? = nil, openChannelModule: SendbirdUIKit.SBUOpenChannelModule? = nil, feedNotificationChannelModule: SendbirdUIKit.SBUFeedNotificationChannelModule? = nil, chatNotificationChannelModule: SendbirdUIKit.SBUChatNotificationChannelModule? = nil, inviteUserModule: SendbirdUIKit.SBUInviteUserModule? = nil, groupRegisterOperatorModule: SendbirdUIKit.SBURegisterOperatorModule? = nil, openRegisterOperatorModule: SendbirdUIKit.SBURegisterOperatorModule? = nil, groupUserListModule: SendbirdUIKit.SBUUserListModule? = nil, openUserListModule: SendbirdUIKit.SBUUserListModule? = nil, groupChannelPushSettingsModule: SendbirdUIKit.SBUGroupChannelPushSettingsModule? = nil, createChannelModule: SendbirdUIKit.SBUCreateChannelModule? = nil, createOpenChannelModule: SendbirdUIKit.SBUCreateOpenChannelModule? = nil, groupChannelSettingsModule: SendbirdUIKit.SBUGroupChannelSettingsModule? = nil, openChannelSettingsModule: SendbirdUIKit.SBUOpenChannelSettingsModule? = nil, groupModerationsModule: SendbirdUIKit.SBUModerationsModule? = nil, openModerationsModule: SendbirdUIKit.SBUModerationsModule? = nil, messageSearchModule: SendbirdUIKit.SBUMessageSearchModule? = nil, messageThreadModule: SendbirdUIKit.SBUMessageThreadModule? = nil)
  @objc deinit
}
extension SendbirdUIKit.SBUModuleSet {
  @available(*, unavailable, renamed: "init(groupChannelListModule:openChannelListModule:baseChannelModule:groupChannelModule:openChannelModule:inviteUserModule:groupRegisterOperatorModule:openRegisterOperatorModule:groupUserListModule:openUserListModule:groupChannelPushSettingsModule:createChannelModule:groupChannelSettingsModule:openChannelSettingsModule:groupModerationsModule:openModerationsModule:messageSearchModule:)")
  convenience public init(channelListModule: SendbirdUIKit.SBUGroupChannelListModule = SBUGroupChannelListModule(), baseChannelModule: SendbirdUIKit.SBUBaseChannelModule = SBUBaseChannelModule(), groupChannelModule: SendbirdUIKit.SBUGroupChannelModule = SBUGroupChannelModule(), openChannelModule: SendbirdUIKit.SBUOpenChannelModule = SBUOpenChannelModule(), inviteUserModule: SendbirdUIKit.SBUInviteUserModule = SBUInviteUserModule(), registerOperatorModule: SendbirdUIKit.SBURegisterOperatorModule = SBURegisterOperatorModule(), userListModule: SendbirdUIKit.SBUUserListModule = SBUUserListModule(), groupChannelPushSettingsModule: SendbirdUIKit.SBUGroupChannelPushSettingsModule = SBUGroupChannelPushSettingsModule(), createChannelModule: SendbirdUIKit.SBUCreateChannelModule = SBUCreateChannelModule(), groupChannelSettingsModule: SendbirdUIKit.SBUGroupChannelSettingsModule = SBUGroupChannelSettingsModule(), openChannelSettingsModule: SendbirdUIKit.SBUOpenChannelSettingsModule = SBUOpenChannelSettingsModule(), moderationsModule: SendbirdUIKit.SBUModerationsModule = SBUModerationsModule(), messageSearchModule: SendbirdUIKit.SBUMessageSearchModule = SBUMessageSearchModule())
  @available(*, deprecated, renamed: "groupRegisterOperatorModule")
  public static var registerOperatorModule: SendbirdUIKit.SBURegisterOperatorModule {
    get
    set
  }
  @available(*, unavailable, message: "This property had been seperated to `groupUserListModule` and `openUserListModule`")
  public static var userListModule: SendbirdUIKit.SBUUserListModule {
    get
  }
  @available(*, deprecated, renamed: "groupModerationsModule")
  public static var moderationsModule: SendbirdUIKit.SBUModerationsModule {
    get
    set
  }
}
extension SendbirdUIKit.SBUModuleSet {
  public static var GroupChannelListModule: SendbirdUIKit.SBUGroupChannelListModule.Type
  public static var OpenChannelListModule: SendbirdUIKit.SBUOpenChannelListModule.Type
  public static var BaseChannelModule: SendbirdUIKit.SBUBaseChannelModule.Type
  public static var GroupChannelModule: SendbirdUIKit.SBUGroupChannelModule.Type
  public static var OpenChannelModule: SendbirdUIKit.SBUOpenChannelModule.Type
  public static var FeedNotificationChannelModule: SendbirdUIKit.SBUFeedNotificationChannelModule.Type
  public static var ChatNotificationChannelModule: SendbirdUIKit.SBUChatNotificationChannelModule.Type
  public static var InviteUserModule: SendbirdUIKit.SBUInviteUserModule.Type
  public static var GroupRegisterOperatorModule: SendbirdUIKit.SBURegisterOperatorModule.Type
  public static var OpenRegisterOperatorModule: SendbirdUIKit.SBURegisterOperatorModule.Type
  public static var GroupUserListModule: SendbirdUIKit.SBUUserListModule.Type
  public static var OpenUserListModule: SendbirdUIKit.SBUUserListModule.Type
  public static var GroupChannelPushSettingsModule: SendbirdUIKit.SBUGroupChannelPushSettingsModule.Type
  public static var CreateGroupChannelModule: SendbirdUIKit.SBUCreateChannelModule.Type
  public static var CreateOpenChannelModule: SendbirdUIKit.SBUCreateOpenChannelModule.Type
  public static var GroupChannelSettingsModule: SendbirdUIKit.SBUGroupChannelSettingsModule.Type
  public static var OpenChannelSettingsModule: SendbirdUIKit.SBUOpenChannelSettingsModule.Type
  public static var GroupModerationsModule: SendbirdUIKit.SBUModerationsModule.Type
  public static var OpenModerationsModule: SendbirdUIKit.SBUModerationsModule.Type
  public static var MessageSearchModule: SendbirdUIKit.SBUMessageSearchModule.Type
  public static var MessageThreadModule: SendbirdUIKit.SBUMessageThreadModule.Type
  public static var CommonModule: SendbirdUIKit.SBUCommonModule.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMultipleFilesMessageCell : SendbirdUIKit.SBUContentBaseMessageCell, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var multipleFilesMessage: SendbirdChatSDK.MultipleFilesMessage? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var containerView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var collectionView: SendbirdUIKit.SBUMultipleFilesMessageCollectionView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var collectionViewHeightConstraint: UIKit.NSLayoutConstraint! {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileSelectHandler: ((_ fileInfo: SendbirdChatSDK.UploadedFileInfo, _ index: Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  @_Concurrency.MainActor(unsafe) @objc override public func resetMainContainerViewLayer()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SendbirdUIKit.SBUMultipleFilesMessageCell : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
}
public class SBUMultipleFilesMessageCellParams : SendbirdUIKit.SBUBaseMessageCellParams {
  public var multipleFilesMessage: SendbirdChatSDK.MultipleFilesMessage? {
    get
  }
  final public let useReaction: Swift.Bool
  final public let enableEmojiLongPress: Swift.Bool
  public init(message: SendbirdChatSDK.MultipleFilesMessage, hideDateView: Swift.Bool, useMessagePosition: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition = .none, receiptState: SendbirdUIKit.SBUMessageReceiptState = .none, useReaction: Swift.Bool = false, isThreadMessage: Swift.Bool = false, joinedAt: Swift.Int64 = 0, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo? = nil, enableEmojiLongPress: Swift.Bool = true)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMultipleFilesMessageCollectionView : UIKit.UICollectionView, SendbirdUIKit.SBUViewLifeCycle {
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open func configure(delegate: any UIKit.UICollectionViewDelegate, dataSource: any UIKit.UICollectionViewDataSource, theme: SendbirdUIKit.SBUMessageCellTheme? = nil, cornerRadius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class SBUMultipleFilesMessageCollectionViewCell : SendbirdUIKit.SBUCollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var overlayView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var imageCornerRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func configure(uploadableFileInfo: SendbirdChatSDK.UploadableFileInfo? = nil, uploadedFileInfo: SendbirdChatSDK.UploadedFileInfo? = nil, requestId: Swift.String, index: Swift.Int, imageCornerRadius: CoreFoundation.CGFloat, showOverlay: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) public func setGIFIcon()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUNavigationTitleView : SendbirdUIKit.SBUView {
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String?
  @_Concurrency.MainActor(unsafe) public var textAlignment: UIKit.NSTextAlignment
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "SBUNavigationTitleView.init(frame:)")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func configure(title: Swift.String?)
  @objc deinit
}
public typealias SBUNewMessageInfoHandler = () -> Swift.Void
@objc @_Concurrency.MainActor(unsafe) open class SBUNewMessageInfo : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var messageInfoButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var actionHandler: SendbirdUIKit.SBUNewMessageInfoHandler?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) required public init(type: SendbirdUIKit.NewMessageInfoItemType = .tooltip)
  @available(*, unavailable, renamed: "SBUNewMessageInfo.init(frame:)")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open func onClickNewMessageInfo()
  @_Concurrency.MainActor(unsafe) open func updateCount(count: Swift.Int, actionHandler: SendbirdUIKit.SBUNewMessageInfoHandler?)
  @objc deinit
}
public typealias SBUNewNotificationInfoHandler = () -> Swift.Void
@objc @_inheritsConvenienceInitializers public class SBUNotificationChannelManager : ObjectiveC.NSObject {
  @available(*, deprecated, renamed: "SBUMessageTemplateManager.resetNotificationTemplateCache")
  public static func resetTemplateCache()
  public static func resetNotificationSettingCache()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelAdminMessageCell : SendbirdUIKit.SBUOpenChannelBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public var adminMessage: SendbirdChatSDK.AdminMessage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: SendbirdChatSDK.AdminMessage, hideDateView: Swift.Bool, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUOpenChannelBaseMessageCell : SendbirdUIKit.SBUTableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var message: SendbirdChatSDK.BaseMessage?
  @objc @_Concurrency.MainActor(unsafe) public var groupPosition: SendbirdUIKit.MessageGroupPosition
  @objc @_Concurrency.MainActor(unsafe) public var dateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageContentView: UIKit.UIView {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stackViewTopConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func updateTopAnchorConstraint()
  @objc @_Concurrency.MainActor(unsafe) open func configure(message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition = .none, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelCell : SendbirdUIKit.SBUBaseChannelCell {
  @objc @_Concurrency.MainActor(unsafe) public var coverImage: SendbirdUIKit.SBUCoverImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var participantIcon: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var participantCountLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var freezeState: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var separatorLine: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let titleSpacer: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let participantSpacer: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let coverImageSize: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public let infoIconSize: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var contentStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var infoStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var participantStackView: SendbirdUIKit.SBUStackView {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUOpenChannelCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func configure(channel: SendbirdChatSDK.BaseChannel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelCommonContentView : SendbirdUIKit.SBUCommonContentView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) override open func configure(message: SendbirdChatSDK.FileMessage, position: SendbirdUIKit.MessagePosition, highlightKeyword: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelContentBaseMessageCell : SendbirdUIKit.SBUOpenChannelBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var profileView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var profileBaseView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentsStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var infoStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userNameView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageTimeLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mainContainerView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isFileType: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isWebType: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition, isOverlay: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) open func configureStateImage()
  @objc @_Concurrency.MainActor(unsafe) open func setMessageGrouping()
  @objc @_Concurrency.MainActor(unsafe) open func setUsernameColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onLongPressContentView(sender: UIKit.UILongPressGestureRecognizer?)
  @objc @_Concurrency.MainActor(unsafe) open func onTapContentView(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func onTapUserProfileView(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUOpenChannelFileMessageCell : SendbirdUIKit.SBUOpenChannelContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var fileMessage: SendbirdChatSDK.FileMessage? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var baseFileContentView: SendbirdUIKit.SBUBaseFileContentView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: SendbirdChatSDK.FileMessage, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition, fileType: SendbirdUIKit.SBUMessageFileType, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, size: CoreFoundation.CGSize? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelImageContentView : SendbirdUIKit.SBUImageContentView {
  @_Concurrency.MainActor(unsafe) override open func setupSizeContraint()
  @_Concurrency.MainActor(unsafe) override open func resizeImageView(by size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
open class SBUOpenChannelListModule {
  @available(*, deprecated, message: "Use `SBUOpenChannelListModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUOpenChannelListModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUOpenChannelListModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUOpenChannelListModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelListModule`")
  required public init(headerComponent: SendbirdUIKit.SBUOpenChannelListModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelListModule`")
  required public init(listComponent: SendbirdUIKit.SBUOpenChannelListModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelListModule`")
  required public init(headerComponent: SendbirdUIKit.SBUOpenChannelListModule.Header?, listComponent: SendbirdUIKit.SBUOpenChannelListModule.List?)
  @objc deinit
}
public protocol SBUOpenChannelListModuleHeaderDelegate : SendbirdUIKit.SBUBaseChannelListModuleHeaderDelegate {
}
extension SendbirdUIKit.SBUOpenChannelListModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseChannelListModule.Header {
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUOpenChannelListTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUOpenChannelListModuleHeaderDelegate)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBUOpenChannelListModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUOpenChannelListModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUOpenChannelListModuleHeaderDelegate, theme: SendbirdUIKit.SBUOpenChannelListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUOpenChannelListTheme? = nil)
  }
}
public protocol SBUOpenChannelListModuleListDelegate : SendbirdUIKit.SBUBaseChannelListModuleListDelegate {
}
public protocol SBUOpenChannelListModuleListDataSource : SendbirdUIKit.SBUBaseChannelListModuleListDataSource {
}
extension SendbirdUIKit.SBUOpenChannelListModule {
  @_inheritsConvenienceInitializers @objc(SBUOpenChannelListModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseChannelListModule.List {
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUOpenChannelListTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUOpenChannelListModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUOpenChannelListModuleListDataSource)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) public var channelList: [SendbirdChatSDK.OpenChannel]? {
      @objc get
    }
    @available(*, unavailable, renamed: "SBUOpenChannelListModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUOpenChannelListModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUOpenChannelListModuleListDelegate, dataSource: any SendbirdUIKit.SBUOpenChannelListModuleListDataSource, theme: SendbirdUIKit.SBUOpenChannelListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func reloadTableView()
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUOpenChannelListTheme? = nil)
  }
}
extension SendbirdUIKit.SBUOpenChannelListModule.List {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
}
extension SendbirdUIKit.SBUOpenChannelListModule {
  public static var HeaderComponent: SendbirdUIKit.SBUOpenChannelListModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUOpenChannelListModule.List.Type
}
extension SendbirdUIKit.SBUOpenChannelListModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
}
extension SendbirdUIKit.SBUOpenChannelListModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var ChannelCell: SendbirdUIKit.SBUBaseChannelCell.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelListViewController : SendbirdUIKit.SBUBaseChannelListViewController, SendbirdUIKit.SBUOpenChannelListModuleHeaderDelegate, SendbirdUIKit.SBUOpenChannelListModuleListDelegate, SendbirdUIKit.SBUOpenChannelListModuleListDataSource, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUOpenChannelListViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUOpenChannelListModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUOpenChannelListModule.List? {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUOpenChannelListTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUOpenChannelListViewModel? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelList: [SendbirdChatSDK.OpenChannel] {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUOpenChannelListViewController()")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUOpenChannelListViewController()")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) required public init(channelListQuery: SendbirdChatSDK.OpenChannelListQuery? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func createViewModel(channelListQuery: SendbirdChatSDK.OpenChannelListQuery?)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func reloadChannelList()
  @_Concurrency.MainActor(unsafe) @objc override open func showChannel(channelURL: Swift.String, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func showCreateChannel()
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelListModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List)
  @objc @_Concurrency.MainActor(unsafe) public func baseChannelListModuleDidSelectRefresh(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelListModule(_ listComponent: SendbirdUIKit.SBUBaseChannelListModule.List, channelsInTableView tableView: UIKit.UITableView) -> [SendbirdChatSDK.BaseChannel]?
  @objc @_Concurrency.MainActor(unsafe) open func connectionStateDidChange(_ isConnected: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelListViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelListViewModel, didChangeChannelList channels: [SendbirdChatSDK.OpenChannel]?, needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelListViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelListViewModel, didUpdateChannel channel: SendbirdChatSDK.OpenChannel)
}
public protocol SBUOpenChannelListViewModelDelegate : SendbirdUIKit.SBUBaseChannelListViewModelDelegate {
  func openChannelListViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelListViewModel, didChangeChannelList channels: [SendbirdChatSDK.OpenChannel]?, needsToReload: Swift.Bool)
  func openChannelListViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelListViewModel, didUpdateChannel channel: SendbirdChatSDK.OpenChannel)
}
@objc open class SBUOpenChannelListViewModel : SendbirdUIKit.SBUBaseChannelListViewModel {
  @SendbirdUIKit.SBUAtomic public var channelList: [SendbirdChatSDK.OpenChannel] {
    get
  }
  public var channelListQuery: SendbirdChatSDK.OpenChannelListQuery? {
    get
  }
  required public init(delegate: (any SendbirdUIKit.SBUOpenChannelListViewModelDelegate)?, channelListQuery: SendbirdChatSDK.OpenChannelListQuery?)
  @objc deinit
  override public func initChannelList()
  override public func loadNextChannelList(reset: Swift.Bool)
  public func updateChannels(_ channels: [SendbirdChatSDK.OpenChannel]?, needReload: Swift.Bool)
  public func upsertChannels(_ channels: [SendbirdChatSDK.OpenChannel]?, needReload: Swift.Bool)
  public func deleteChannels(channelURLs: [Swift.String]?, needReload: Swift.Bool)
  public func sortChannelList(needReload: Swift.Bool)
  override public func reset()
}
extension SendbirdUIKit.SBUOpenChannelListViewModel : SendbirdChatSDK.OpenChannelDelegate {
  @objc dynamic open func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdate message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channelWasFrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelWasUnfrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ sender: SendbirdChatSDK.OpenChannel, userDidExit user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ sender: SendbirdChatSDK.OpenChannel, userDidEnter user: SendbirdChatSDK.User)
  @objc dynamic open func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelMessageWebView : SendbirdUIKit.SBUMessageWebView {
  public struct OpenChannelMetric {
    public static var imageHeight: CoreFoundation.CGFloat
    public static var imageTopMargin: CoreFoundation.CGFloat
    public static var imageSideMargin: CoreFoundation.CGFloat
    public static var textSideMargin: CoreFoundation.CGFloat
    public static var titleBottomMargin: CoreFoundation.CGFloat
    public static var descBottomMargin: CoreFoundation.CGFloat
    public static var stackSpacing: CoreFoundation.CGFloat
  }
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) override open func configure(model: SendbirdUIKit.SBUMessageWebViewModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder: Foundation.NSCoder)
  @objc deinit
}
open class SBUOpenChannelModule {
  @available(*, deprecated, message: "Use `SBUOpenChannelModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUOpenChannelModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUOpenChannelModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUOpenChannelModule.List? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUOpenChannelModule.InputComponent` instead.")
  public var inputComponent: SendbirdUIKit.SBUOpenChannelModule.Input? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUOpenChannelModule.MediaComponent` instead.")
  public var mediaComponent: SendbirdUIKit.SBUOpenChannelModule.Media? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUOpenChannelModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelModule`")
  required public init(listComponent: SendbirdUIKit.SBUOpenChannelModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelModule`")
  required public init(inputComponent: SendbirdUIKit.SBUOpenChannelModule.Input?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelModule`")
  required public init(mediaComponent: SendbirdUIKit.SBUOpenChannelModule.Media?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelModule`")
  required public init(headerComponent: SendbirdUIKit.SBUOpenChannelModule.Header?, listComponent: SendbirdUIKit.SBUOpenChannelModule.List?, inputComponent: SendbirdUIKit.SBUOpenChannelModule.Input?, mediaComponent: SendbirdUIKit.SBUOpenChannelModule.Media?)
  @objc deinit
}
public protocol SBUOpenChannelModuleHeaderDelegate : SendbirdUIKit.SBUBaseChannelModuleHeaderDelegate {
}
extension SendbirdUIKit.SBUOpenChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseChannelModule.Header, SendbirdUIKit.SBUChannelInfoHeaderViewDelegate {
    @objc @_Concurrency.MainActor(unsafe) public var channelInfoView: UIKit.UIView {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var hidesChannelInfoView: Swift.Bool {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var overlaysChannelInfoView: Swift.Bool {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) @objc override public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) @objc override public var rightBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUOpenChannelModuleHeaderDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUOpenChannelModuleHeaderDelegate, theme: SendbirdUIKit.SBUChannelTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
    @_Concurrency.MainActor(unsafe) override open func setupStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
    @_Concurrency.MainActor(unsafe) override open func updateStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func updateStyles(overlaid: Swift.Bool = false)
    @objc @_Concurrency.MainActor(unsafe) open func updateBarButton(isOperator: Swift.Bool)
    @objc @_Concurrency.MainActor(unsafe) open func didSelectChannelInfo()
    @objc @_Concurrency.MainActor(unsafe) open func didSelectChannelParticipants()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapRightBarButton()
    @objc deinit
  }
}
public protocol SBUOpenChannelModuleInputDelegate : SendbirdUIKit.SBUBaseChannelModuleInputDelegate {
  func openChannelModule(_ inputComponent: SendbirdUIKit.SBUOpenChannelModule.Input, didPickFileData fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String)
}
public protocol SBUOpenChannelModuleInputDataSource : SendbirdUIKit.SBUBaseChannelModuleInputDataSource {
}
extension SendbirdUIKit.SBUOpenChannelModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Input : SendbirdUIKit.SBUBaseChannelModule.Input {
    @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.OpenChannel? {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUOpenChannelModuleInputDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUOpenChannelModuleInputDataSource)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUOpenChannelModuleInputDelegate, dataSource: any SendbirdUIKit.SBUOpenChannelModuleInputDataSource, theme: SendbirdUIKit.SBUChannelTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func updateStyles(overlaid: Swift.Bool = false)
    @_Concurrency.MainActor(unsafe) @objc override open func pickImageFile(info: [UIKit.UIImagePickerController.InfoKey : Any])
    @_Concurrency.MainActor(unsafe) @objc override open func pickVideoFile(info: [UIKit.UIImagePickerController.InfoKey : Any])
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) @objc override open func pickImageFile(itemProvider: Foundation.NSItemProvider)
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) @objc override open func pickGIFFile(itemProvider: Foundation.NSItemProvider)
    @available(iOS 14.0, *)
    @_Concurrency.MainActor(unsafe) @objc override open func pickVideoFile(itemProvider: Foundation.NSItemProvider)
    @_Concurrency.MainActor(unsafe) @objc override open func pickDocumentFile(documentURLs: [Foundation.URL])
    @_Concurrency.MainActor(unsafe) @objc override open func pickImageData(_ data: Foundation.Data, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
    @_Concurrency.MainActor(unsafe) @objc override open func pickVideoURL(_ url: Foundation.URL)
    @_Concurrency.MainActor(unsafe) @objc override open func updateMessageInputModeState()
    @_Concurrency.MainActor(unsafe) @objc override open func updateFrozenModeState()
    @objc @_Concurrency.MainActor(unsafe) open func updateMutedModeState()
    @objc deinit
  }
}
public protocol SBUOpenChannelModuleListDelegate : SendbirdUIKit.SBUBaseChannelModuleListDelegate {
}
public protocol SBUOpenChannelModuleListDataSource : SendbirdUIKit.SBUBaseChannelModuleListDataSource {
  func openChannelModuleIsOverlaid(_ listComponent: SendbirdUIKit.SBUOpenChannelModule.List) -> Swift.Bool
}
extension SendbirdUIKit.SBUOpenChannelModule {
  @_inheritsConvenienceInitializers @objc(SBUOpenChannelModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseChannelModule.List {
    @objc @_Concurrency.MainActor(unsafe) public var adminMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell?
    @objc @_Concurrency.MainActor(unsafe) public var userMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell?
    @objc @_Concurrency.MainActor(unsafe) public var fileMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell?
    @objc @_Concurrency.MainActor(unsafe) public var unknownMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell?
    @objc @_Concurrency.MainActor(unsafe) public var customMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUOpenChannelModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUOpenChannelModuleListDataSource)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.OpenChannel? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var isOverlaid: Swift.Bool {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUOpenChannelModuleListDelegate, dataSource: any SendbirdUIKit.SBUOpenChannelModuleListDataSource, theme: SendbirdUIKit.SBUChannelTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
    @objc @_Concurrency.MainActor(unsafe) open func updateLayouts()
    @_Concurrency.MainActor(unsafe) override open func updateStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil, componentTheme: SendbirdUIKit.SBUComponentTheme = SBUTheme.componentTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setScrollBottomView(hidden: Swift.Bool)
    @_Concurrency.MainActor(unsafe) @objc override open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
    @_Concurrency.MainActor(unsafe) @objc override public func reloadTableView(needsToLayout: Swift.Bool = true)
    @objc @_Concurrency.MainActor(unsafe) open func register(adminMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(userMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(fileMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(unknownMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func register(customMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @available(*, deprecated, renamed: "calculateMessageMenuCGPoint(indexPath:)")
    @_Concurrency.MainActor(unsafe) public func calculatorMenuPoint(indexPath: Foundation.IndexPath) -> CoreFoundation.CGPoint
    @objc @_Concurrency.MainActor(unsafe) open func calculateMessageMenuCGPoint(indexPath: Foundation.IndexPath) -> CoreFoundation.CGPoint
    @_Concurrency.MainActor(unsafe) override open func createMessageMenuItems(for message: SendbirdChatSDK.BaseMessage) -> [SendbirdUIKit.SBUMenuItem]
    @_Concurrency.MainActor(unsafe) @objc override open func showMessageContextMenu(for message: SendbirdChatSDK.BaseMessage, cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) open func setMessageCellGestures(_ cell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ messageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, message: SendbirdChatSDK.BaseMessage, forRowAt indexPath: Foundation.IndexPath)
    @objc @_Concurrency.MainActor(unsafe) public func register(messageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func generateCellIdentifier(by message: SendbirdChatSDK.BaseMessage) -> Swift.String
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
  }
}
public protocol SBUOpenChannelModuleMediaDelegate : AnyObject {
  func openChannelModule(_ mediaComponent: SendbirdUIKit.SBUOpenChannelModule.Media, didTapMediaView mediaView: UIKit.UIView)
}
extension SendbirdUIKit.SBUOpenChannelModule {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class Media : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) public var mediaView: UIKit.UIView
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUOpenChannelModuleMediaDelegate)?
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUOpenChannelModuleMediaDelegate, theme: SendbirdUIKit.SBUChannelTheme)
    @_Concurrency.MainActor(unsafe) open func setupViews()
    @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUChannelTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func onTapMediaView(_ sender: UIKit.UITapGestureRecognizer? = nil)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension SendbirdUIKit.SBUOpenChannelModule {
  public static var HeaderComponent: SendbirdUIKit.SBUOpenChannelModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUOpenChannelModule.List.Type
  public static var InputComponent: SendbirdUIKit.SBUOpenChannelModule.Input.Type
  public static var MediaComponent: SendbirdUIKit.SBUOpenChannelModule.Media.Type
}
extension SendbirdUIKit.SBUOpenChannelModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUChannelTitleView.Type
}
extension SendbirdUIKit.SBUOpenChannelModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var AdminMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var FileMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UnknownMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell.Type
  @objc @_Concurrency.MainActor(unsafe) public static var CustomMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell.Type?
  @objc @_Concurrency.MainActor(unsafe) public static var ChannelStateBanner: SendbirdUIKit.SBUChannelStateBanner.Type
  @objc @_Concurrency.MainActor(unsafe) public static var ScrollBottomView: SendbirdUIKit.SBUScrollBottomView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserProfileView: SendbirdUIKit.SBUUserProfileView.Type
}
extension SendbirdUIKit.SBUOpenChannelModule.Input {
  @objc @_Concurrency.MainActor(unsafe) public static var MessageInputView: SendbirdUIKit.SBUMessageInputView.Type
}
extension SendbirdUIKit.SBUOpenChannelModule.Media {
  @_Concurrency.MainActor(unsafe) public static var MediaView: SendbirdUIKit.SBUMediaView.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelSettingCell : SendbirdUIKit.SBUBaseChannelSettingCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
open class SBUOpenChannelSettingsModule {
  @available(*, deprecated, message: "Use `SBUOpenChannelSettingsModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUOpenChannelSettingsModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelSettingsModule`")
  required public init(headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelSettingsModule`")
  required public init(listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.OpenChannelSettingsModule`")
  required public init(headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header?, listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List?)
  @objc deinit
}
public protocol SBUOpenChannelSettingsModuleHeaderDelegate : SendbirdUIKit.SBUBaseChannelSettingsModuleHeaderDelegate {
  func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
}
extension SendbirdUIKit.SBUOpenChannelSettingsModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseChannelSettingsModule.Header {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUOpenChannelSettingsModuleHeaderDelegate)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBUOpenChannelSettingsModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUOpenChannelSettingsModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUOpenChannelSettingsModuleHeaderDelegate, theme: SendbirdUIKit.SBUChannelSettingsTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateTitleView()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItems()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItems()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override open func onTapRightBarButton()
  }
}
public protocol SBUOpenChannelSettingsModuleListDelegate : SendbirdUIKit.SBUBaseChannelSettingsModuleListDelegate {
  func openChannelSettingsModule(_ listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func openChannelSettingsModuleDidSelectModerations(_ listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List)
  func openChannelSettingsModuleDidSelectParticipants(_ listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List)
  func openChannelSettingsModuleDidSelectDelete(_ listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List)
}
public protocol SBUOpenChannelSettingsModuleListDataSource : SendbirdUIKit.SBUBaseChannelSettingsModuleListDataSource {
}
extension SendbirdUIKit.SBUOpenChannelSettingsModule {
  @_inheritsConvenienceInitializers @objc(SBUOpenChannelSettingsModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseChannelSettingsModule.List {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUOpenChannelSettingsModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUOpenChannelSettingsModuleListDataSource)? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) weak public var channel: SendbirdChatSDK.OpenChannel? {
      @objc get
    }
    @available(*, unavailable, renamed: "SBUOpenChannelSettingsModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUOpenChannelSettingsModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUOpenChannelSettingsModuleListDelegate, dataSource: any SendbirdUIKit.SBUOpenChannelSettingsModuleListDataSource, theme: SendbirdUIKit.SBUChannelSettingsTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func setupItems()
    @_Concurrency.MainActor(unsafe) open func createModerationsItem() -> SendbirdUIKit.SBUChannelSettingItem
    @_Concurrency.MainActor(unsafe) open func createParticipantsItem() -> SendbirdUIKit.SBUChannelSettingItem
    @_Concurrency.MainActor(unsafe) open func createDeleteItem() -> SendbirdUIKit.SBUChannelSettingItem
    @_Concurrency.MainActor(unsafe) @objc override open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
  }
}
extension SendbirdUIKit.SBUOpenChannelSettingsModule.List {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBUOpenChannelSettingsModule {
  public static var HeaderComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List.Type
}
extension SendbirdUIKit.SBUOpenChannelSettingsModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
}
extension SendbirdUIKit.SBUOpenChannelSettingsModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var ChannelInfoView: SendbirdUIKit.SBUChannelSettingsChannelInfoView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var SettingCell: SendbirdUIKit.SBUOpenChannelSettingCell.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelSettingsViewController : SendbirdUIKit.SBUBaseChannelSettingsViewController, SendbirdUIKit.SBUOpenChannelSettingsModuleHeaderDelegate, SendbirdUIKit.SBUOpenChannelSettingsModuleListDelegate, SendbirdUIKit.SBUOpenChannelSettingsModuleListDataSource, SendbirdUIKit.SBUOpenChannelSettingsViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUOpenChannelSettingsViewModel? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override public var channel: SendbirdChatSDK.OpenChannel? {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUOpenChannelSettingsViewController(channelURL:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUOpenChannelSettingsViewController(channelURL:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.OpenChannel)
  @objc @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) open func showParticipantsList()
  @_Concurrency.MainActor(unsafe) @objc override open func showModerationList()
  @objc @_Concurrency.MainActor(unsafe) open func showDeleteChannelAlert()
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateLeftItems lefttItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModule(_ headerComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModule(_ listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModuleDidSelectModerations(_ listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModuleDidSelectParticipants(_ listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsModuleDidSelectDelete(_ listComponent: SendbirdUIKit.SBUOpenChannelSettingsModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelSettingsModule(_ listComponent: SendbirdUIKit.SBUBaseChannelSettingsModule.List, channelForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.BaseChannel?
  @objc @_Concurrency.MainActor(unsafe) open func baseChannelSettingsModuleIsOperator(_ listComponent: SendbirdUIKit.SBUBaseChannelSettingsModule.List) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func openChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelSettingsViewModel, didDeleteChannel channel: SendbirdChatSDK.OpenChannel)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelSettingsViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  @_Concurrency.MainActor(unsafe) @objc override open func didDismissAlertView()
  @objc deinit
}
public protocol SBUOpenChannelSettingsViewModelDelegate : SendbirdUIKit.SBUBaseChannelSettingsViewModelDelegate {
  func openChannelSettingsViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelSettingsViewModel, didDeleteChannel channel: SendbirdChatSDK.OpenChannel)
}
@objc open class SBUOpenChannelSettingsViewModel : SendbirdUIKit.SBUBaseChannelSettingsViewModel {
  weak public var delegate: (any SendbirdUIKit.SBUOpenChannelSettingsViewModelDelegate)? {
    get
    set
  }
  required public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, delegate: (any SendbirdUIKit.SBUOpenChannelSettingsViewModelDelegate)? = nil)
  @objc deinit
  override public func loadChannel(channelURL: Swift.String?)
  override public func updateChannel(channelName: Swift.String? = nil, coverImage: UIKit.UIImage? = nil)
  public func updateChannel(params: SendbirdChatSDK.OpenChannelUpdateParams)
  public func deleteChannel()
}
extension SendbirdUIKit.SBUOpenChannelSettingsViewModel : SendbirdChatSDK.OpenChannelDelegate {
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.OpenChannel, userDidEnter user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.OpenChannel, userDidExit user: SendbirdChatSDK.User)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelUnknownMessageCell : SendbirdUIKit.SBUOpenChannelUserMessageCell {
  @_Concurrency.MainActor(unsafe) @objc override open func configure(_ message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUOpenChannelUserMessageCell : SendbirdUIKit.SBUOpenChannelContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var messageTextView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userMessage: SendbirdChatSDK.UserMessage? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var additionContainerView: SendbirdUIKit.SBUSelectableStackView {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var webView: SendbirdUIKit.SBUOpenChannelMessageWebView
  @objc @_Concurrency.MainActor(unsafe) public var messageTypeConstraint: UIKit.NSLayoutConstraint? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var webTypeConstraints: [UIKit.NSLayoutConstraint] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition, withTextView: Swift.Bool, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onTapWebview(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SendbirdUIKit.SBUOpenChannelViewController {
  @objc @available(*, deprecated, renamed: "headerComponent.channelInfoView", message: "This property has been moved to `SBUOpenChannelModule.Header`.")
  @_Concurrency.MainActor(unsafe) dynamic public var channelInfoView: SendbirdUIKit.SBUChannelInfoHeaderView {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "listComponent.adminMessageCell", message: "This property has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var adminMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.userMessageCell", message: "This property has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var userMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.fileMessageCell", message: "This property has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var fileMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.customMessageCell", message: "This property has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var customMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.unknownMessageCell", message: "This property has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public var unknownMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell? {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "listComponent.register(adminMessageCell:nib:)", message: "This function has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func register(adminMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.register(userMessageCell:nib:)", message: "This function has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func register(userMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.register(fileMessageCell:nib:)", message: "This function has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func register(fileMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.register(customMessageCell:nib:)", message: "This function has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic public func register(customMessageCell: SendbirdUIKit.SBUOpenChannelBaseMessageCell?, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "listComponent.generateCellIdentifier(by:)", message: "This function has been moved to `SBUOpenChannelModule.List`.")
  @_Concurrency.MainActor(unsafe) dynamic open func generateCellIdentifier(by message: SendbirdChatSDK.BaseMessage) -> Swift.String
  @objc @available(*, deprecated, renamed: "mediaComponent.mediaView", message: "This property has been moved to `SBUOpenChannelModule.Media`.")
  @_Concurrency.MainActor(unsafe) dynamic public var mediaView: UIKit.UIView {
    @objc get
    @objc set
  }
}
extension SendbirdUIKit.SBUOpenChannelViewController {
  @objc @available(*, unavailable, message: "This function has been moved to `SBUOpenChannelModule.List` and replaced to `setMessageCellGestures(_:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func setUserMessageCellGestures(_ cell: SendbirdUIKit.SBUOpenChannelUserMessageCell, userMessage: SendbirdChatSDK.UserMessage, indexPath: Foundation.IndexPath)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUOpenChannelModule.List` and replaced to `setMessageCellGestures(_:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func setFileMessageCellGestures(_ cell: SendbirdUIKit.SBUOpenChannelFileMessageCell, fileMessage: SendbirdChatSDK.FileMessage, indexPath: Foundation.IndexPath)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUOpenChannelModule.List` and replaced to `setMessageCellGestures(_:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func setUnkownMessageCellGestures(_ cell: SendbirdUIKit.SBUOpenChannelUnknownMessageCell, unknownMessage: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
  @available(*, unavailable, renamed: "updateMessageListRatio(to:)")
  @_Concurrency.MainActor(unsafe) public func updateRatio(mediaView: CoreFoundation.CGFloat?, messageList: CoreFoundation.CGFloat?)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleHeaderDelegate` and replaced to `channelModule(_:didTapRightItem:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func didSelectChannelInfo()
  @objc @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleHeaderDelegate` and replaced to `openChannelModuleDidTapParticipantList(_:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func didSelectChannelParticipants()
  @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModule.Header` and replaced to `didSelectChannelParticipants()`.")
  @objc @_Concurrency.MainActor(unsafe) dynamic public func onClickParticipantsList()
  @available(*, unavailable, message: "This function has been moved to `SBUBaseChannelModuleListDelegate` and replaced to `baseChannelModuleDidTapScrollToButton(_:animated:)`")
  @objc @_Concurrency.MainActor(unsafe) dynamic open func onClickScrollBottom(sender: UIKit.UIButton?)
  @objc @available(*, unavailable, message: "This function has been moved to `SBUOpenChannelModule.List` and replaced to `scrollViewDidSScroll(_:)`.")
  @_Concurrency.MainActor(unsafe) dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelViewController : SendbirdUIKit.SBUBaseChannelViewController, SendbirdUIKit.SBUOpenChannelViewModelDelegate, SendbirdUIKit.SBUOpenChannelModuleHeaderDelegate, SendbirdUIKit.SBUOpenChannelModuleListDelegate, SendbirdUIKit.SBUOpenChannelModuleInputDelegate, SendbirdUIKit.SBUOpenChannelModuleMediaDelegate, SendbirdUIKit.SBUOpenChannelModuleListDataSource, SendbirdUIKit.SBUOpenChannelModuleInputDataSource, SendbirdUIKit.SBUOpenChannelViewModelDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUOpenChannelModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUOpenChannelModule.List? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var inputComponent: SendbirdUIKit.SBUOpenChannelModule.Input? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mediaComponent: SendbirdUIKit.SBUOpenChannelModule.Media?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendbirdUIKit.SBUChannelTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var prevOrientation: UIKit.UIDeviceOrientation
  @objc @_Concurrency.MainActor(unsafe) public var currentOrientation: UIKit.UIDeviceOrientation
  @objc @_Concurrency.MainActor(unsafe) public var weakHeaderComponentBottomConstraint: UIKit.NSLayoutConstraint
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUOpenChannelViewModel? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var channel: SendbirdChatSDK.OpenChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var hideNavigationBar: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var hideChannelInfoView: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var channelDescription: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var isMediaViewEnabled: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var mediaViewRatio: CoreFoundation.CGFloat {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageListRatio: CoreFoundation.CGFloat {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isMediaViewOverlaying: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isMediaViewIgnoringSafeArea: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.OpenChannel, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, startingPoint: Swift.Int64? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @objc deinit
  @_Concurrency.MainActor(unsafe) override open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = nil, showIndicator: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles(needsToLayout: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) public func updateChannelInfoView()
  @objc @available(*, deprecated, message: "Please use `calculateMessageMenuCGPoint(indexPath:)` in `SBUOpenChannelModule.List`")
  @_Concurrency.MainActor(unsafe) public func calculatorMenuPoint(indexPath: Foundation.IndexPath) -> CoreFoundation.CGPoint
  @available(*, deprecated, message: "Please use `showMessageContextMenu(for:cell:forRowAt:)` in `SBUOpenChannelModule.List`")
  @_Concurrency.MainActor(unsafe) override public func showMenuModal(_ cell: UIKit.UITableViewCell, indexPath: Foundation.IndexPath, message: SendbirdChatSDK.BaseMessage, types: [SendbirdUIKit.MessageMenuItem]?)
  @available(*, deprecated, message: "Please use `showDeleteMessageAlert(on:oneTimeTheme:)` in `SBUOpenChannelModule.List` instead.")
  @_Concurrency.MainActor(unsafe) override public func showDeleteMessageMenu(message: SendbirdChatSDK.BaseMessage, oneTimetheme: SendbirdUIKit.SBUComponentTheme? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func enableMediaView(_ enabled: Swift.Bool = true)
  @objc @_Concurrency.MainActor(unsafe) public func updateMessageListRatio(to ratio: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public func overlayMediaView(_ overlaying: Swift.Bool, messageListRatio: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public func mediaViewIgnoringSafeArea(_ enabled: Swift.Bool = true)
  @objc @_Concurrency.MainActor(unsafe) public func configureOffset()
  @objc @_Concurrency.MainActor(unsafe) public func updateBarButton()
  @_Concurrency.MainActor(unsafe) @objc override public func onClickBack()
  @_Concurrency.MainActor(unsafe) @objc override open func showChannelSettings()
  @objc @_Concurrency.MainActor(unsafe) open func showParticipantsList()
  @objc @_Concurrency.MainActor(unsafe) public func registerOrientationChangeNotification()
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ headerComponent: SendbirdUIKit.SBUBaseChannelModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didTapUserProfile user: SendbirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelModuleIsOverlaid(_ listComponent: SendbirdUIKit.SBUOpenChannelModule.List) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ inputComponent: SendbirdUIKit.SBUBaseChannelModule.Input, didUpdateFrozenState isFrozen: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelModule(_ inputComponent: SendbirdUIKit.SBUOpenChannelModule.Input, didPickFileData fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelModule(_ listComponent: SendbirdUIKit.SBUBaseChannelModule.List, didScroll scrollView: UIKit.UIScrollView)
  @objc @_Concurrency.MainActor(unsafe) open func openChannelModule(_ mediaComponent: SendbirdUIKit.SBUOpenChannelModule.Media, didTapMediaView mediaView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override open func baseChannelViewModel(_ viewModel: SendbirdUIKit.SBUBaseChannelViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
}
public protocol SBUOpenChannelViewModelDataSource : SendbirdUIKit.SBUBaseChannelViewModelDataSource {
}
public protocol SBUOpenChannelViewModelDelegate : SendbirdUIKit.SBUBaseChannelViewModelDelegate {
  func openChannelViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelViewModel, userDidEnter user: SendbirdChatSDK.User, forChannel channel: SendbirdChatSDK.OpenChannel)
  func openChannelViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelViewModel, userDidExit user: SendbirdChatSDK.User, forChannel channel: SendbirdChatSDK.OpenChannel)
}
extension SendbirdUIKit.SBUOpenChannelViewModelDelegate {
  public func openChannelViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelViewModel, userDidEnter user: SendbirdChatSDK.User, forChannel channel: SendbirdChatSDK.OpenChannel)
  public func openChannelViewModel(_ viewModel: SendbirdUIKit.SBUOpenChannelViewModel, userDidExit user: SendbirdChatSDK.User, forChannel channel: SendbirdChatSDK.OpenChannel)
}
@objc open class SBUOpenChannelViewModel : SendbirdUIKit.SBUBaseChannelViewModel {
  weak public var delegate: (any SendbirdUIKit.SBUOpenChannelViewModelDelegate)? {
    get
    set
  }
  weak public var dataSource: (any SendbirdUIKit.SBUOpenChannelViewModelDataSource)? {
    get
    set
  }
  required public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, messageListParams: SendbirdChatSDK.MessageListParams? = nil, startingPoint: Swift.Int64? = nil, delegate: (any SendbirdUIKit.SBUOpenChannelViewModelDelegate)? = nil, dataSource: (any SendbirdUIKit.SBUOpenChannelViewModelDataSource)? = nil)
  @objc deinit
  override public func loadChannel(channelURL: Swift.String, messageListParams: SendbirdChatSDK.MessageListParams? = nil, completionHandler: ((SendbirdChatSDK.BaseChannel?, SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  override public func refreshChannel()
  override public func loadInitialMessages(startingPoint: Swift.Int64?, showIndicator: Swift.Bool, initialMessages: [SendbirdChatSDK.BaseMessage]?)
  override public func loadPrevMessages()
  public func loadPrevMessages(timestamp: Swift.Int64?)
  override public func loadNextMessages()
  public func loadBothMessages(timestamp: Swift.Int64?, showIndicator: Swift.Bool)
  open func setupSendUserMessageCompletionHandlers()
  open func setupSendFileMessageCompletionHandlers()
  override public func hasNext() -> Swift.Bool
  override public func hasPrevious() -> Swift.Bool
  override public func getStartingPoint() -> Swift.Int64?
}
extension SendbirdUIKit.SBUOpenChannelViewModel {
  @objc override dynamic open func didSucceedReconnection()
}
extension SendbirdUIKit.SBUOpenChannelViewModel : SendbirdChatSDK.OpenChannelDelegate {
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceive message: SendbirdChatSDK.BaseMessage)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdate message: SendbirdChatSDK.BaseMessage)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  @objc override dynamic open func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc override dynamic open func channelWasFrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc override dynamic open func channelWasUnfrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasMuted user: SendbirdChatSDK.RestrictedUser)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnmuted user: SendbirdChatSDK.User)
  @objc override dynamic open func channelDidUpdateOperators(_ channel: SendbirdChatSDK.BaseChannel)
  @objc override dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.OpenChannel, userDidEnter user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.OpenChannel, userDidExit user: SendbirdChatSDK.User)
  @objc override dynamic open func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SBUPaddingLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public var top: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bottom: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var leading: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var trailing: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) convenience public init(_ all: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) convenience public init(_ vertical: CoreFoundation.CGFloat, _ horizontal: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public init(_ top: CoreFoundation.CGFloat = 0, _ bottom: CoreFoundation.CGFloat = 0, _ leading: CoreFoundation.CGFloat = 0, _ trailing: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUParentMessageInfoReactionView : SendbirdUIKit.SBUMessageReactionView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) override open func configure(maxWidth: CoreFoundation.CGFloat, useReaction: Swift.Bool, reactions: [SendbirdChatSDK.Reaction], enableEmojiLongPress: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override open func configure(configuration: SendbirdUIKit.SBUMessageReactionViewParams)
  @_Concurrency.MainActor(unsafe) override open func getCellSize(count: Swift.Int) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol SBUParentMessageInfoViewDelegate : AnyObject {
  func parentMessageInfoViewBoundsWillChanged(_ view: SendbirdUIKit.SBUParentMessageInfoView)
  func parentMessageInfoViewBoundsDidChanged(_ view: SendbirdUIKit.SBUParentMessageInfoView)
}
@objc @_Concurrency.MainActor(unsafe) open class SBUParentMessageInfoView : SendbirdUIKit.SBUView, SendbirdUIKit.SBUUserMessageTextViewDelegate {
  public struct Constants {
    public static var verticalSideMarginSize: CoreFoundation.CGFloat
  }
  @_Concurrency.MainActor(unsafe) public var profileView: SendbirdUIKit.SBUMessageProfileView
  @_Concurrency.MainActor(unsafe) public var profileBaseView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var userNameLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var dateLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var moreButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var moreButtonBaseView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var replySeparateLine: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var replyLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var bottomSeparateLine: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var messageTextView: SendbirdUIKit.SBUUserMessageTextView
  @_Concurrency.MainActor(unsafe) public var baseFileContentView: SendbirdUIKit.SBUBaseFileContentView
  @_Concurrency.MainActor(unsafe) public var fileCollectionView: SendbirdUIKit.SBUMultipleFilesMessageCollectionView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var webView: SendbirdUIKit.SBUMessageWebView
  @_Concurrency.MainActor(unsafe) public var reactionView: SendbirdUIKit.SBUParentMessageInfoReactionView
  @_Concurrency.MainActor(unsafe) public var userHStackView: SendbirdUIKit.SBUStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var senderVStackView: SendbirdUIKit.SBUStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentVStackView: SendbirdUIKit.SBUStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var enablesReaction: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var userProfileTapHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var tapHandlerToContent: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var fileSelectHandler: ((_ fileInfo: SendbirdChatSDK.UploadedFileInfo, _ index: Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var moreButtonTapHandlerToContent: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var emojiTapHandler: ((_ emojiKey: Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var moreEmojiTapHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var emojiLongPressHandler: ((_ emojiKey: Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var mentionTapHandler: ((_ user: SendbirdUIKit.SBUUser) -> Swift.Void)?
  @available(*, unavailable, renamed: "SBUParentMessageInfoView(frame:)")
  @_Concurrency.MainActor(unsafe) required convenience public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(message: SendbirdChatSDK.BaseMessage?, delegate: (any SendbirdUIKit.SBUParentMessageInfoViewDelegate)?, useReaction: Swift.Bool = false, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo?, enableEmojiLongPress: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func updateMessageTextWidth(with size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func onTapUserProfileView(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func onTapContentView(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func onSelectFile(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) public func onTapSelectFile(_ fileInfo: SendbirdChatSDK.UploadedFileInfo, index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open func onTapWebview(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func onTapMoreButton(_ sender: Any)
  @_Concurrency.MainActor(unsafe) open func userMessageTextView(_ textView: SendbirdUIKit.SBUUserMessageTextView, didTapMention user: SendbirdUIKit.SBUUser)
  @objc deinit
}
extension SendbirdUIKit.SBUParentMessageInfoView : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@_hasMissingDesignatedInitializers public class SBUPendingMessageManager {
  public static let shared: SendbirdUIKit.SBUPendingMessageManager
  public func addFileInfo(requestId: Swift.String, params: SendbirdChatSDK.FileMessageCreateParams?, forMessageThread: Swift.Bool = false)
  public func getFileInfo(requestId: Swift.String, forMessageThread: Swift.Bool = false) -> SendbirdChatSDK.FileMessageCreateParams?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUPermissionManager {
  public enum PermissionType {
    case camera
    case photoLibrary
    case record
    public static func == (a: SendbirdUIKit.SBUPermissionManager.PermissionType, b: SendbirdUIKit.SBUPermissionManager.PermissionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let shared: SendbirdUIKit.SBUPermissionManager
  public var currentPhotoAccessStatus: SendbirdUIKit.SBUPhotoAccessibleStatus {
    get
  }
  public var currentCameraAccessStatus: AVFoundation.AVAuthorizationStatus {
    get
  }
  public var currentRecordAccessStatus: AVFAudio.AVAudioSession.RecordPermission {
    get
  }
  public func showPermissionAlert(forType permissionType: SendbirdUIKit.SBUPermissionManager.PermissionType, alertViewDelegate: (any SendbirdUIKit.SBUAlertViewDelegate)? = nil, onDismiss: SendbirdUIKit.SBUAlertButtonHandler? = nil)
  public func requestRecordAcess(onGranted: (() -> Swift.Void)? = nil, onDenied: (() -> Swift.Void)? = nil)
  public func requestPhotoAccessIfNeeded(completion: @escaping (SendbirdUIKit.SBUPhotoAccessibleStatus) -> Swift.Void)
  public func requestCameraAccess(for type: AVFoundation.AVMediaType, onGranted: (() -> Swift.Void)? = nil, onDenied: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension SendbirdUIKit.SBUPermissionManager {
  @available(*, deprecated, renamed: "currentPhotoAccessStatus")
  public var currentStatus: SendbirdUIKit.SBUPhotoAccessibleStatus {
    get
  }
  @available(*, deprecated, renamed: "requestCameraAccessIfNeeded(for:onGranted:onDenied:)")
  public func requestDeviceAccessIfNeeded(for type: AVFoundation.AVMediaType, completion: @escaping (Swift.Bool) -> Swift.Void)
}
public enum SBUPhotoAccessLevel : Swift.Int, Swift.Hashable {
  case addOnly
  case readWrite
  @available(iOS 14, *)
  public var asPHAccessLevel: Photos.PHAccessLevel {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SBUPhotoAccessibleStatus : Swift.Int, Swift.Hashable {
  case all
  case limited
  case notDetermined
  case restricted
  case denied
  case none
  public static func from(_ authorization: Photos.PHAuthorizationStatus) -> SendbirdUIKit.SBUPhotoAccessibleStatus
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUPhotoCollectionViewCell : UIKit.UICollectionViewCell, SendbirdUIKit.SBUViewLifeCycle {
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func configure(image: UIKit.UIImage?, forMediaType mediaType: Photos.PHAssetMediaType)
  @_Concurrency.MainActor(unsafe) @objc open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc open func updateStyles()
  @objc deinit
}
@propertyWrapper public class SBUAtomic<Value> {
  public init(wrappedValue value: Value)
  public var wrappedValue: Value {
    get
    set
  }
  @objc deinit
}
@propertyWrapper public struct SBUAutoLayout<T> where T : UIKit.UIView {
  public var wrappedValue: T {
    get
    set
  }
  public init(wrappedValue: T)
}
@propertyWrapper public struct SBUThemeWrapper<T> {
  public var wrappedValue: T {
    get
    set
  }
  public init(theme: T, setToDefault: Swift.Bool = false)
}
@propertyWrapper public struct SBUPrioritizedConfig<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public var wrappedValue: T {
    get
    set
  }
  public init(wrappedValue: T)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUQuoteMessageInputView : SendbirdUIKit.SBUView, SendbirdUIKit.SBUQuoteMessageInputViewProtocol {
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageInputTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var replyToLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var fileMessagePreview: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var userMessagePreview: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var closeReplyButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var replyLabelStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: SendbirdUIKit.SBUQuoteMessageInputViewParams)
  public enum Edge : Swift.Int {
    case vertical
    case leading
    case trailing
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
public class SBUQuoteMessageInputViewParams {
  final public let message: SendbirdChatSDK.BaseMessage
  final public let quotedMessageNickname: Swift.String
  public var replyToText: Swift.String {
    get
  }
  public var isFileType: Swift.Bool {
    get
  }
  public var isMultipleFilesMessage: Swift.Bool {
    get
  }
  public var fileType: Swift.String? {
    get
  }
  public var fileName: Swift.String? {
    get
  }
  public var messageFileType: SendbirdUIKit.SBUMessageFileType? {
    get
  }
  public var originalFileNAme: Swift.String? {
    get
  }
  public init(message: SendbirdChatSDK.BaseMessage)
  @objc deinit
}
public protocol SBUQuoteMessageInputViewProtocol : SendbirdUIKit.SBUViewLifeCycle {
  func configure(with configuration: SendbirdUIKit.SBUQuoteMessageInputViewParams)
}
@objc public protocol SBUQuotedMessageViewDelegate {
  @objc func didTapQuotedMessageView(_ quotedMessageView: SendbirdUIKit.SBUQuotedBaseMessageView)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUQuotedBaseMessageView : SendbirdUIKit.SBUView, SendbirdUIKit.SBUQuotedMessageViewProtocol {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var messageId: Swift.Int64
  @_Concurrency.MainActor(unsafe) public var messagePosition: SendbirdUIKit.MessagePosition {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var quotedMessageNickname: Swift.String
  @_Concurrency.MainActor(unsafe) public var replierNickname: Swift.String
  @_Concurrency.MainActor(unsafe) public var repliedToText: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String?
  @_Concurrency.MainActor(unsafe) public var isFileType: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var params: SendbirdUIKit.SBUQuotedBaseMessageViewParams? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var quotedMessageCreatedAt: Swift.Int64? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var repliedToLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var repliedIconView: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var contentStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var messageStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var repliedToStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mainContainerView: SendbirdUIKit.SBUSelectableStackView
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUQuotedMessageViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) public func configure(with configuration: SendbirdUIKit.SBUQuotedBaseMessageViewParams)
  @objc @_Concurrency.MainActor(unsafe) open func didTapQuotedMessageView(sender: UIKit.UITapGestureRecognizer)
  @objc deinit
}
extension SendbirdUIKit.SBUQuotedBaseMessageViewParams {
  @available(*, deprecated, renamed: "useQuotedMessage")
  public var usingQuotedMessage: Swift.Bool {
    get
  }
  @available(*, deprecated, renamed: "init(message:position:useQuotedMessage:joinedAt:)")
  convenience public init(message: SendbirdChatSDK.BaseMessage, position: SendbirdUIKit.MessagePosition, usingQuotedMessage: Swift.Bool, joinedAt: Swift.Int64 = 0)
  @available(*, deprecated, renamed: "init(messageId:messagePosition:quotedMessageNickname:replierNickname:text:useQuotedMessage:quotedMessageCreatedAt:)")
  convenience public init(messageId: Swift.Int64, messagePosition: SendbirdUIKit.MessagePosition, quotedMessageNickname: Swift.String, replierNickname: Swift.String, text: Swift.String, usingQuotedMessage: Swift.Bool = true, quotedMessageCreatedAt: Swift.Int64)
  @available(*, deprecated, renamed: "init(messageId:messagePosition:quotedMessageNickname:replierNickname:name:type:urlString:useQuotedMessage:quotedMessageCreatedAt:)")
  convenience public init(messageId: Swift.Int64, messagePosition: SendbirdUIKit.MessagePosition, quotedMessageNickname: Swift.String, replierNickname: Swift.String, name: Swift.String, type: Swift.String, urlString: Swift.String, usingQuotedMessage: Swift.Bool = true, quotedMessageCreatedAt: Swift.Int64)
}
public class SBUQuotedBaseMessageViewParams {
  final public let messageId: Swift.Int64
  final public let messagePosition: SendbirdUIKit.MessagePosition
  final public let quotedMessageNickname: Swift.String
  final public let replierNickname: Swift.String
  final public let text: Swift.String?
  final public let useQuotedMessage: Swift.Bool
  public var urlString: Swift.String? {
    get
  }
  public var fileName: Swift.String? {
    get
  }
  public var fileType: Swift.String? {
    get
  }
  public var isFileType: Swift.Bool {
    get
  }
  public var quotedMessageCreatedAt: Swift.Int64? {
    get
  }
  public var messageCreatedAt: Swift.Int64? {
    get
  }
  public var joinedAt: Swift.Int64 {
    get
  }
  public var messageOffsetTimestamp: Swift.Int64 {
    get
  }
  public var messageFileType: SendbirdUIKit.SBUMessageFileType? {
    get
  }
  public init(message: SendbirdChatSDK.BaseMessage, position: SendbirdUIKit.MessagePosition, useQuotedMessage: Swift.Bool, joinedAt: Swift.Int64 = 0, messageOffsetTimestamp: Swift.Int64 = 0)
  public init(messageId: Swift.Int64, messagePosition: SendbirdUIKit.MessagePosition, quotedMessageNickname: Swift.String, replierNickname: Swift.String, text: Swift.String, useQuotedMessage: Swift.Bool = true, quotedMessageCreatedAt: Swift.Int64)
  public init(messageId: Swift.Int64, messagePosition: SendbirdUIKit.MessagePosition, quotedMessageNickname: Swift.String, replierNickname: Swift.String, name: Swift.String, type: Swift.String, urlString: Swift.String, useQuotedMessage: Swift.Bool = true, quotedMessageCreatedAt: Swift.Int64)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUQuotedFileMessageView : SendbirdUIKit.SBUQuotedBaseMessageView {
  @_Concurrency.MainActor(unsafe) public var urlString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var fileType: SendbirdUIKit.SBUMessageFileType {
    get
  }
  @_Concurrency.MainActor(unsafe) public var messageFileView: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var iconImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUQuotedBaseMessageViewParams)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol SBUQuotedMessageViewProtocol : SendbirdUIKit.SBUViewLifeCycle {
  func configure(with configuration: SendbirdUIKit.SBUQuotedBaseMessageViewParams)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUQuotedUserMessageView : SendbirdUIKit.SBUQuotedBaseMessageView {
  @_Concurrency.MainActor(unsafe) public var quotedMessageLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUQuotedBaseMessageViewParams)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol SBUReactionsViewControllerDelegate : SendbirdUIKit.SBUCommonDelegate {
  func reactionsViewController(_ viewController: SendbirdUIKit.SBUReactionsViewController, tableView: UIKit.UITableView, didSelect user: SendbirdUIKit.SBUUser, forRowAt indexPath: Foundation.IndexPath)
  func reactionsViewController(_ viewController: SendbirdUIKit.SBUReactionsViewController, didTapUserProfile user: SendbirdUIKit.SBUUser)
}
@objc @_Concurrency.MainActor(unsafe) open class SBUReactionsViewController : SendbirdUIKit.SBUBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout, UIKit.UIScrollViewDelegate, SendbirdUIKit.SBUBottomSheetControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let layout: UIKit.UICollectionViewFlowLayout
  @objc @_Concurrency.MainActor(unsafe) final public let stackView: UIKit.UIStackView
  @objc @_Concurrency.MainActor(unsafe) final public let lineView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let tableView: UIKit.UITableView
  @objc @_Concurrency.MainActor(unsafe) final public let emojiList: [SendbirdChatSDK.Emoji]
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.GroupChannel! {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var selectedReaction: SendbirdChatSDK.Reaction? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var memberList: [SendbirdChatSDK.Member] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var reactionList: [SendbirdChatSDK.Reaction] {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUReactionsViewControllerDelegate)?
  @available(*, unavailable, renamed: "SBUReactionsViewController.init(channel:message:selectedReaction:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.GroupChannel, message: SendbirdChatSDK.BaseMessage, selectedReaction: SendbirdChatSDK.Reaction?)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func getSelectedIndexPath() -> Foundation.IndexPath?
  @objc @_Concurrency.MainActor(unsafe) public func getCellSize(count: Swift.Int) -> CoreFoundation.CGSize
  @objc @_Concurrency.MainActor(unsafe) public func getUser(with indexPath: Foundation.IndexPath) -> SendbirdUIKit.SBUUser?
  @objc @_Concurrency.MainActor(unsafe) public func setUserProfileTapGesture(_ user: SendbirdUIKit.SBUUser)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func bottomSheet(moveTo position: SendbirdUIKit.SBUBottomSheetSnapPoint)
  @objc deinit
}
open class SBURegisterOperatorModule {
  @available(*, deprecated, message: "Use `SBURegisterOperatorModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBURegisterOperatorModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBURegisterOperatorModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupRegisterOperatorModule` or `SBUModuleSet.OpenRegisterOperatorModule`")
  required public init(headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupRegisterOperatorModule` or `SBUModuleSet.OpenRegisterOperatorModule`")
  required public init(listComponent: SendbirdUIKit.SBURegisterOperatorModule.List?)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupRegisterOperatorModule` or `SBUModuleSet.OpenRegisterOperatorModule`")
  required public init(headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header?, listComponent: SendbirdUIKit.SBURegisterOperatorModule.List?)
  @objc deinit
}
public protocol SBURegisterOperatorModuleHeaderDelegate : SendbirdUIKit.SBUBaseSelectUserModuleHeaderDelegate {
  func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
public protocol SBURegisterOperatorModuleHeaderDataSource : SendbirdUIKit.SBUBaseSelectUserModuleHeaderDataSource {
}
extension SendbirdUIKit.SBURegisterOperatorModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : SendbirdUIKit.SBUBaseSelectUserModule.Header {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBURegisterOperatorModuleHeaderDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBURegisterOperatorModuleHeaderDataSource)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBURegisterOperatorModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBURegisterOperatorModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBURegisterOperatorModuleHeaderDelegate, dataSource: any SendbirdUIKit.SBURegisterOperatorModuleHeaderDataSource, theme: SendbirdUIKit.SBUUserListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
    @_Concurrency.MainActor(unsafe) @objc override open func updateRightBarButton()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateTitleView()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItem()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateLeftItems()
    @_Concurrency.MainActor(unsafe) @objc public func didUpdateRightItems()
    @_Concurrency.MainActor(unsafe) @objc override public func onTapLeftBarButton()
    @_Concurrency.MainActor(unsafe) @objc override public func onTapRightBarButton()
  }
}
public protocol SBURegisterOperatorModuleListDelegate : SendbirdUIKit.SBUBaseSelectUserModuleListDelegate {
  func registerOperatorModule(_ listComponent: SendbirdUIKit.SBURegisterOperatorModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func registerOperatorModule(_ listComponent: SendbirdUIKit.SBURegisterOperatorModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  func registerOperatorModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBURegisterOperatorModule.List)
}
public protocol SBURegisterOperatorModuleListDataSource : SendbirdUIKit.SBUBaseSelectUserModuleListDataSource {
}
extension SendbirdUIKit.SBURegisterOperatorModule {
  @_inheritsConvenienceInitializers @objc(SBURegisterOperatorModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : SendbirdUIKit.SBUBaseSelectUserModule.List {
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBURegisterOperatorModuleListDelegate)? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBURegisterOperatorModuleListDataSource)? {
      get
      set
    }
    @available(*, unavailable, renamed: "SBURegisterOperatorModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBURegisterOperatorModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBURegisterOperatorModuleListDelegate, dataSource: any SendbirdUIKit.SBURegisterOperatorModuleListDataSource, channelType: SendbirdChatSDK.ChannelType = .group, theme: SendbirdUIKit.SBUUserListTheme)
    @_Concurrency.MainActor(unsafe) @objc override open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  }
}
extension SendbirdUIKit.SBURegisterOperatorModule.List {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didSelectRetry()
}
extension SendbirdUIKit.SBURegisterOperatorModule.List {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBURegisterOperatorModule {
  public static var HeaderComponent: SendbirdUIKit.SBURegisterOperatorModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBURegisterOperatorModule.List.Type
}
extension SendbirdUIKit.SBURegisterOperatorModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
}
extension SendbirdUIKit.SBURegisterOperatorModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserCell: SendbirdUIKit.SBUUserCell.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBURegisterOperatorViewController : SendbirdUIKit.SBUBaseSelectUserViewController, SendbirdUIKit.SBURegisterOperatorViewModelDataSource, SendbirdUIKit.SBURegisterOperatorModuleListDataSource, SendbirdUIKit.SBURegisterOperatorModuleHeaderDataSource, SendbirdUIKit.SBURegisterOperatorModuleHeaderDelegate, SendbirdUIKit.SBURegisterOperatorModuleListDelegate, SendbirdUIKit.SBURegisterOperatorViewModelDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBURegisterOperatorModule.List? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBURegisterOperatorViewModel? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "SBURegisterOperatorViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBURegisterOperatorViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.BaseChannel, users: [SendbirdUIKit.SBUUser]? = nil)
  @objc @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType = .group, users: [SendbirdUIKit.SBUUser]? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func setupComponents(channelType: SendbirdChatSDK.ChannelType)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, channelType: SendbirdChatSDK.ChannelType = .group, users: [SendbirdUIKit.SBUUser]? = nil)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) public func registerSelectedUsers()
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModule(_ headerComponent: SendbirdUIKit.SBURegisterOperatorModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModule(_ listComponent: SendbirdUIKit.SBURegisterOperatorModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModule(_ listComponent: SendbirdUIKit.SBURegisterOperatorModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBURegisterOperatorModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func registerOperatorViewModel(_ viewModel: SendbirdUIKit.SBURegisterOperatorViewModel, didRegisterOperatorIds operatorIds: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc override open func baseSelectedUserViewModel(_ viewModel: SendbirdUIKit.SBUBaseSelectUserViewModel, didUpdateSelectedUsers selectedUsers: [SendbirdUIKit.SBUUser]?)
}
public protocol SBURegisterOperatorViewModelDelegate : SendbirdUIKit.SBUBaseSelectUserViewModelDelegate {
  func registerOperatorViewModel(_ viewModel: SendbirdUIKit.SBURegisterOperatorViewModel, didRegisterOperatorIds operatorIds: [Swift.String])
}
public protocol SBURegisterOperatorViewModelDataSource : SendbirdUIKit.SBUBaseSelectUserViewModelDataSource {
}
@objc open class SBURegisterOperatorViewModel : SendbirdUIKit.SBUBaseSelectUserViewModel {
  weak public var delegate: (any SendbirdUIKit.SBURegisterOperatorViewModelDelegate)? {
    get
    set
  }
  weak public var dataSource: (any SendbirdUIKit.SBURegisterOperatorViewModelDataSource)? {
    get
    set
  }
  required public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, channelType: SendbirdChatSDK.ChannelType = .group, users: [SendbirdUIKit.SBUUser]? = nil, userListQuery: SendbirdChatSDK.ApplicationUserListQuery? = nil, memberListQuery: SendbirdChatSDK.MemberListQuery? = nil, delegate: (any SendbirdUIKit.SBURegisterOperatorViewModelDelegate)? = nil, dataSource: (any SendbirdUIKit.SBURegisterOperatorViewModelDataSource)? = nil)
  public func registerAsOperators()
  public func registerAsOperators(users: [SendbirdUIKit.SBUUser])
  public func registerAsOperators(userIds: [Swift.String])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUReplyConfiguration {
  @available(*, deprecated, renamed: "SendbirdUI.config.groupChannel.channel.replyType")
  public var replyType: SendbirdUIKit.SBUReplyType {
    get
    set
  }
  @available(*, deprecated, renamed: "SendbirdUI.config.groupChannel.channel.threadReplySelectType")
  public var threadReplySelectType: SendbirdUIKit.SBUThreadReplySelectType {
    get
    set
  }
  @available(*, deprecated, message: "Please set each configuration separately. `SendbirdUI.config.groupChannel.channel.replyType` and `SendbirdUI.config.groupChannel.channel.SBUThreadReplySelectType`")
  public init(type replyType: SendbirdUIKit.SBUReplyType = .none, threadReplySelectType: SendbirdUIKit.SBUThreadReplySelectType? = nil)
  @objc deinit
}
public enum SBUReplyType : Swift.Int, Swift.Codable {
  case none
  case quoteReply
  case thread
  public var filterValue: SendbirdChatSDK.ReplyType {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SBUThreadReplySelectType : Swift.Int, Swift.Codable {
  case none
  case parent
  case thread
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class SBUScrollBottomView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) @objc override required dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public var button: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @objc deinit
}
extension SendbirdUIKit.SBUScrollBottomView {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
  }
}
public struct SBUScrollOptions {
  public let count: Swift.Int?
  public let position: SendbirdUIKit.SBUScrollPosition
  public let isInverted: Swift.Bool
  public init(count: Swift.Int? = nil, position: SendbirdUIKit.SBUScrollPosition, isInverted: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class SBUScrollPostionConfiguration {
  public var groupChannel: SendbirdUIKit.SBUScrollPostionConfiguration.BaseChannel
  public var openChannel: SendbirdUIKit.SBUScrollPostionConfiguration.BaseChannel
  public var feedChannel: SendbirdUIKit.SBUScrollPostionConfiguration.BaseChannel
  @_hasMissingDesignatedInitializers public class BaseChannel {
    public var scrollToBottom: SendbirdUIKit.SBUScrollPosition
    public var scrollToNewMessage: SendbirdUIKit.SBUScrollPosition
    public var scrollToInitial: SendbirdUIKit.SBUScrollPosition
    public var scrollToInitialWithStartingPoint: SendbirdUIKit.SBUScrollPosition
    @objc deinit
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUSearchBar : UIKit.UISearchBar, SendbirdUIKit.SBUViewLifeCycle {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc open func setupActions()
  @_Concurrency.MainActor(unsafe) open func configure(delegate: any UIKit.UISearchBarDelegate, theme: SendbirdUIKit.SBUMessageSearchTheme?)
  @objc deinit
}
public protocol SBUSelectablePhotoViewDelegate : AnyObject {
  func didTapSendImageData(_ data: Foundation.Data, fileName: Swift.String?, mimeType: Swift.String?)
  func didTapSendVideoURL(_ url: Foundation.URL)
}
extension SendbirdUIKit.SBUSelectablePhotoViewDelegate {
  public func didTapSendImageData(_ data: Foundation.Data, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func didTapSendVideoURL(_ url: Foundation.URL)
}
@objc @_Concurrency.MainActor(unsafe) open class SBUSelectablePhotoViewController : SendbirdUIKit.SBUBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUSelectablePhotoViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var fetchResult: Photos.PHFetchResult<Photos.PHAsset>
  @objc @_Concurrency.MainActor(unsafe) public var columnSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) required public init(mediaType: Photos.PHAssetMediaType? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @objc @_Concurrency.MainActor(unsafe) open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) public func register(photoCell: SendbirdUIKit.SBUPhotoCollectionViewCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func didTapRightBarButton()
  @objc @_Concurrency.MainActor(unsafe) open func didTapLeftBarButton()
}
extension SendbirdUIKit.SBUSelectablePhotoViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBUSelectablePhotoViewController : Photos.PHPhotoLibraryChangeObserver {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoLibraryDidChange(_ changeInstance: Photos.PHChange)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBUSelectableStackView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) final public let stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var position: SendbirdUIKit.MessagePosition
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor(unsafe) public func setAxis(_ axis: UIKit.NSLayoutConstraint.Axis)
  @_Concurrency.MainActor(unsafe) public func addArrangedSubview(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func removeArrangedSubview(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func insertArrangedSubview(_ view: UIKit.UIView, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setTransparentBackgroundColor()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUSimpleSuggestedReplyOptionView : SendbirdUIKit.SBUSuggestedReplyOptionView {
  @_Concurrency.MainActor(unsafe) public var selectableStackView: SendbirdUIKit.SBUSelectableStackView
  @_Concurrency.MainActor(unsafe) public var textView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func onSelectOption()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SBUStackView : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public init(axis: UIKit.NSLayoutConstraint.Axis = .horizontal, alignment: UIKit.UIStackView.Alignment = .fill, spacing: CoreFoundation.CGFloat = 0.0)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
extension SendbirdUIKit.SBUStringSet {
  @available(*, deprecated, renamed: "ChannelSettings_Banned_Users")
  public static var ChannelSettings_Banned_Members: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "Empty_No_Banned_Users")
  public static var Empty_No_Banned_Members: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "InviteChannel_Header_Select_Users")
  public static var InviteChannel_Header_Select_Members: Swift.String {
    get
    set
  }
  @available(*, unavailable)
  public static var MemberList_Header_Title: Swift.String {
    get
  }
  @available(*, deprecated, renamed: "UserList_Me")
  public static var MemberList_Me: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Ban")
  public static var MemberList_Ban: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Unban")
  public static var MemberList_Unban: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Mute")
  public static var MemberList_Mute: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Unmute")
  public static var MemberList_Unmute: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Unregister_Operator")
  public static var MemberList_Dismiss_Operator: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Register_Operator")
  public static var MemberList_Promote_Operator: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Title_Members")
  public static var MemberList_Title_Members: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Title_Operators")
  public static var MemberList_Title_Operators: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Title_Muted_Members")
  public static var MemberList_Title_Muted_Members: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Title_Banned_Users")
  public static var MemberList_Title_Banned_Members: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserList_Title_Participants")
  public static var MemberList_Title_Participants: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserProfile_Register")
  public static var UserProfile_Promote: Swift.String {
    get
    set
  }
  @available(*, deprecated, renamed: "UserProfile_Unregister")
  public static var UserProfile_Dismiss: Swift.String {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class SBUStringSet {
  public static var Cancel: Swift.String
  public static var OK: Swift.String
  public static var Retry: Swift.String
  public static var Save: Swift.String
  public static var Copy: Swift.String
  public static var Delete: Swift.String
  public static var Edit: Swift.String
  public static var Remove: Swift.String
  public static var Camera: Swift.String
  public static var PhotoVideoLibrary: Swift.String
  public static var Document: Swift.String
  public static var Loading: Swift.String
  public static var Invite: Swift.String
  public static var TakePhoto: Swift.String
  public static var ChoosePhoto: Swift.String
  public static var RemovePhoto: Swift.String
  public static var ViewLibrary: Swift.String
  public static var Search: Swift.String
  public static var Settings: Swift.String
  public static var Reply: Swift.String
  public static var Submit: Swift.String
  public static var Alert_Delete: Swift.String
  public static var Alert_Delete_MultipleFilesMessage: (Swift.Int) -> Swift.String
  public static var Alert_Allow_Camera_Access: Swift.String
  public static var Alert_Allow_PhotoLibrary_Access: Swift.String
  public static var Alert_Allow_PhotoLibrary_Access_Message: Swift.String
  public static var Alert_Allow_Microphone_Access: Swift.String
  public static var Date_Yesterday: Swift.String
  public static var Date_Year: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Day: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Month: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Hour: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Min: (_ interval: Swift.Int) -> Swift.String
  public static var Date_Ago: Swift.String
  public static var Date_On: Swift.String
  public static var ChannelList_Header_Title: Swift.String
  public static var ChannelList_Last_File_Message: Swift.String
  public static var Channel_Name_Default: Swift.String
  public static var Channel_Name_No_Members: Swift.String
  public static var Channel_Header_LastSeen: Swift.String
  @available(*, deprecated, renamed: "Channel_Typing")
  public static var Channel_Header_Typing: ([SendbirdChatSDK.User]) -> Swift.String {
    get
  }
  public static var Channel_Typing: (_ members: [SendbirdChatSDK.User]) -> Swift.String
  public static var Channel_Success_Download_file: Swift.String
  public static var Channel_Failure_Download_file: Swift.String
  public static var Channel_Failure_Open_file: Swift.String
  public static var Channel_New_Message_File: Swift.String
  public static var Channel_New_Message: (_ count: Swift.Int) -> Swift.String
  public static var Channel_State_Banner_Frozen: Swift.String
  public static var Open_Channel_Name_Default: Swift.String
  public static var Open_Channel_Participants: Swift.String
  public static var Open_Channel_Participants_Count: (_ count: Swift.Int) -> Swift.String
  public static let Notification_Channel_CustomType: Swift.String
  public static var Notification_Channel_URL: (_ userId: Swift.String) -> Swift.String
  public static var Notification_Channel_Name_Default: Swift.String
  public static var ChannelSettings_Header_Title: Swift.String
  public static var ChannelSettings_Change_Name: Swift.String
  public static var ChannelSettings_Change_Image: Swift.String
  public static var ChannelSettings_Enter_New_Name: Swift.String
  public static var ChannelSettings_Enter_New_Channel_Name: Swift.String
  public static var ChannelSettings_Notifications: Swift.String
  public static var ChannelSettings_Notifications_On: Swift.String
  public static var ChannelSettings_Notifications_Off: Swift.String
  public static var ChannelSettings_Notifications_Mentiones_Only: Swift.String
  public static var ChannelSettings_Members_Title: Swift.String
  public static var ChannelSettings_Participants_Title: Swift.String
  public static var ChannelSettings_Members: (_ count: Swift.UInt) -> Swift.String
  public static var ChannelSettings_Leave: Swift.String
  public static var ChannelSettings_Delete: Swift.String
  public static var ChannelSettings_Delete_Question_Mark: Swift.String
  public static var ChannelSettings_Delete_Description: Swift.String
  public static var ChannelSettings_Search: Swift.String
  public static var ChannelSettings_Moderations: Swift.String
  public static var ChannelSettings_Operators: Swift.String
  public static var ChannelSettings_Muted_Members: Swift.String
  public static var ChannelSettings_Muted_Participants: Swift.String
  public static var ChannelSettings_Banned_Users: Swift.String
  public static var ChannelSettings_Freeze_Channel: Swift.String
  public static var ChannelSettings_URL: Swift.String
  public static var ChannelPushSettings_Header_Title: Swift.String
  public static var ChannelPushSettings_Notification_Title: Swift.String
  public static var ChannelPushSettings_Item_All: Swift.String
  public static var ChannelPushSettings_Item_Mentions_Only: Swift.String
  public static var ChannelPushSettings_Notification_Description: Swift.String
  public static var MessageInput_Text_Placeholder: Swift.String
  public static var MessageInput_Text_Unavailable: Swift.String
  public static var MessageInput_Text_Muted: Swift.String
  public static var MessageInput_Text_Reply: Swift.String
  public static var MessageInput_Reply_To: (_ quotedMessageNickname: Swift.String) -> Swift.String
  public static var MessageInput_Quote_Message_Photo: Swift.String
  public static var MessageInput_Quote_Message_GIF: Swift.String
  public static var MessageInput_Quote_Message_Video: Swift.String
  public static var Message_Edited: Swift.String
  public static var Message_System: Swift.String
  public static var Message_Unknown_Title: Swift.String
  public static var Message_Unknown_Description: Swift.String
  public static var Message_Replied_To: (_ replierNickname: Swift.String, _ quotedMessageNickname: Swift.String) -> Swift.String
  public static var Message_You: Swift.String
  public static var Message_Replied_Users_Count: (_ repliedUsersCount: Swift.Int, _ countLimit: Swift.Bool) -> Swift.String
  public static var Message_Reply_Cannot_Found_Original: Swift.String
  public static var Message_Unavailable: Swift.String
  public static var Message_Typers_Count: (_ numberOfTypers: Swift.Int) -> Swift.String
  public static var Notification_Template_Error_Title: Swift.String
  public static var Notification_Template_Error_Subtitle: Swift.String
  public static var Message_Template_Error_Title: Swift.String
  public static var Message_Template_Error_Subtitle: Swift.String
  public static var Empty_No_Channels: Swift.String
  public static var Empty_No_Messages: Swift.String
  public static var Empty_No_Notifications: Swift.String
  public static var Empty_No_Users: Swift.String
  public static var Empty_No_Muted_Members: Swift.String
  public static var Empty_No_Muted_Participants: Swift.String
  public static var Empty_No_Banned_Users: Swift.String
  public static var Empty_Search_Result: Swift.String
  public static var Empty_Wrong: Swift.String
  public static var CreateChannel_Create: (_ count: Swift.Int) -> Swift.String
  public static var CreateChannel_Header_Title: Swift.String
  public static var CreateChannel_Header_Select_Members: Swift.String
  public static var CreateChannel_Header_Title_Profile: Swift.String
  public static var CreateOpenChannel_Create: Swift.String
  public static var CreateOpenChannel_Header_Title: Swift.String
  public static var CreateOpenChannel_ProfileInput_Placeholder: Swift.String
  public static var InviteChannel_Header_Title: Swift.String
  public static var InviteChannel_Header_Select_Users: Swift.String
  public static var InviteChannel_Invite: (_ count: Swift.Int) -> Swift.String
  public static var InviteChannel_Register: (_ count: Swift.Int) -> Swift.String
  public static var UserList_Me: Swift.String
  public static var UserList_Ban: Swift.String
  public static var UserList_Unban: Swift.String
  public static var UserList_Mute: Swift.String
  public static var UserList_Unmute: Swift.String
  public static var UserList_Unregister_Operator: Swift.String
  public static var UserList_Register_Operator: Swift.String
  public static var UserList_Title_Members: Swift.String
  public static var UserList_Title_Operators: Swift.String
  public static var UserList_Title_Muted_Members: Swift.String
  public static var UserList_Title_Muted_Participants: Swift.String
  public static var UserList_Title_Banned_Users: Swift.String
  public static var UserList_Title_Participants: Swift.String
  public static var User_No_Name: Swift.String
  public static var User_Operator: Swift.String
  public static var UserProfile_Role_Operator: Swift.String
  public static var UserProfile_Role_Member: Swift.String
  public static var UserProfile_UserID: Swift.String
  public static var UserProfile_Message: Swift.String
  public static var UserProfile_Register: Swift.String
  public static var UserProfile_Unregister: Swift.String
  public static var UserProfile_Mute: Swift.String
  public static var UserProfile_Unmute: Swift.String
  public static var UserProfile_Ban: Swift.String
  public static var ChannelType_Group: Swift.String
  public static var ChannelType_SuperGroup: Swift.String
  public static var ChannelType_Broadcast: Swift.String
  public static var FormType_Optional: Swift.String
  public static var FormType_Error_Default: Swift.String
  public static var FormType_Error_Required: Swift.String
  public static var FormType_Fallback_Message: Swift.String
  public static var FormType_Submit_Done: Swift.String
  public static var FormType_No_Reponse: Swift.String
  public static var Feedback_Comment_Title: Swift.String
  public static var Feedback_Comment_Placeholder: Swift.String
  public static var Feedback_Edit_Comment: Swift.String
  public static var Feedback_Remove: Swift.String
  public static var Feedback_Update_Done: Swift.String
  @_hasMissingDesignatedInitializers public class Mention {
    public static let Trigger_Key: Swift.String
    public static var Limit_Guide: Swift.String
    @objc deinit
  }
  public struct MessageThread {
    public struct Menu {
      public static var replyInThread: Swift.String
    }
    public struct MessageInput {
      public static var replyInThread: Swift.String
      public static var replyToThread: Swift.String
    }
    public struct Header {
      public static var title: Swift.String
    }
  }
  public struct VoiceMessage {
    public struct Input {
      public static var cancel: Swift.String
    }
    public struct Alert {
      public static var frozen: Swift.String
      public static var muted: Swift.String
    }
    public struct Preview {
      public static var quotedMessage: Swift.String
      public static var channelList: Swift.String {
        get
        set
      }
      public static var searchResult: Swift.String
    }
    public static var fileName: Swift.String
  }
  public struct GroupChannel {
    public struct Preview {
      public static var photo: Swift.String
      public static var gif: Swift.String
      public static var video: Swift.String
      public static var audio: Swift.String
      public static var voice: Swift.String
      public static var file: Swift.String
      public static var multipleFiles: Swift.String
      public static var messageTemplate: Swift.String
    }
  }
  public struct FileUpload {
    public struct Error {
      public static var exceededSizeLimit: Swift.String
    }
  }
  @objc deinit
}
extension SendbirdUIKit.SBUStringSet {
  @available(*, deprecated, renamed: "InviteChannel_Register")
  public static var InviteChannel_Add: (_ count: Swift.Int) -> Swift.String
}
public protocol SBUSuggestedMentionListDelegate : AnyObject {
  func suggestedUserList(_ list: SendbirdUIKit.SBUSuggestedMentionList, didSelectUser user: SendbirdUIKit.SBUUser)
}
@objc @_Concurrency.MainActor(unsafe) open class SBUSuggestedMentionList : SendbirdUIKit.SBUView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var userCell: UIKit.UITableViewCell?
  @_Concurrency.MainActor(unsafe) public var limitGuideCell: UIKit.UITableViewCell?
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var filteredUsers: [SendbirdUIKit.SBUUser] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isLimitGuideEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUSuggestedMentionListDelegate)?
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUChannelTheme
  @_Concurrency.MainActor(unsafe) public var showsUserId: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) public func register(userCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
  @_Concurrency.MainActor(unsafe) public func register(limitGuideCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func configureCell(_ cell: UIKit.UITableViewCell?, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func selectUser(_ user: SendbirdUIKit.SBUUser)
  @_Concurrency.MainActor(unsafe) open func reloadData(with users: [SendbirdUIKit.SBUUser])
  @objc deinit
}
public protocol SBUSuggestedReplyOptionViewDelegate : AnyObject {
  func suggestedReplyOptionViewDidSelect(_ optionView: SendbirdUIKit.SBUSuggestedReplyOptionView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUSuggestedReplyOptionView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUSuggestedReplyOptionViewDelegate)?
  @_Concurrency.MainActor(unsafe) open func configure(with optionText: Swift.String, delegate: (any SendbirdUIKit.SBUSuggestedReplyOptionViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol SBUSuggestedReplyViewDelegate : AnyObject {
  func suggestedReplyView(_ view: SendbirdUIKit.SBUSuggestedReplyView, didSelectOption optionView: SendbirdUIKit.SBUSuggestedReplyOptionView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUSuggestedReplyView : SendbirdUIKit.SBUView, SendbirdUIKit.SBUSuggestedReplyOptionViewDelegate {
  @_Concurrency.MainActor(unsafe) public var options: [Swift.String] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var messageId: Swift.Int64? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var optionViews: [SendbirdUIKit.SBUSuggestedReplyOptionView]?
  @_Concurrency.MainActor(unsafe) public var params: SendbirdUIKit.SBUSuggestedReplyViewParams? {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUSuggestedReplyViewDelegate)?
  @_Concurrency.MainActor(unsafe) open func configure(with configuration: SendbirdUIKit.SBUSuggestedReplyViewParams, delegate: (any SendbirdUIKit.SBUSuggestedReplyViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) open func suggestedReplyOptionViewDidSelect(_ optionView: SendbirdUIKit.SBUSuggestedReplyOptionView)
  @_Concurrency.MainActor(unsafe) open func createOptionView() -> SendbirdUIKit.SBUSuggestedReplyOptionView
  @_Concurrency.MainActor(unsafe) open func createSuggestedReplyOptionViews(options: [Swift.String]) -> [SendbirdUIKit.SBUSuggestedReplyOptionView]
  @_Concurrency.MainActor(unsafe) open class func updateSuggestedReplyView(with options: [Swift.String]?, message: SendbirdChatSDK.BaseMessage?, shouldHide: Swift.Bool, delegate: (any SendbirdUIKit.SBUSuggestedReplyViewDelegate)? = nil, factory: (() -> SendbirdUIKit.SBUSuggestedReplyView?)? = nil) -> SendbirdUIKit.SBUSuggestedReplyView?
  @_Concurrency.MainActor(unsafe) open class func createDefaultSuggestedReplyView() -> SendbirdUIKit.SBUSuggestedReplyView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct SBUSuggestedReplyViewParams {
  public let messageId: Swift.Int64
  public let replyOptions: [Swift.String]
}
extension SendbirdUIKit.SBUTableViewCell {
  @objc @available(*, unavailable, renamed: "setupLayouts()")
  @_Concurrency.MainActor(unsafe) dynamic open func setupAutolayout()
  @objc @available(*, unavailable, renamed: "updateLayouts()")
  @_Concurrency.MainActor(unsafe) dynamic open func updateAutolayout()
}
@objc @_inheritsConvenienceInitializers @IBDesignable @objcMembers @_Concurrency.MainActor(unsafe) open class SBUTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension SendbirdUIKit.SBUTableViewCell : SendbirdUIKit.SBUViewLifeCycle {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupActions()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUTextView : UIKit.UITextView, SendbirdUIKit.SBUViewLifeCycle {
  @_Concurrency.MainActor(unsafe) final public let placeholderLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let palceholderContainer: SendbirdUIKit.SBUStackView
  @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var placeholderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func textDidChange()
}
@available(*, deprecated, renamed: "SBUGroupChannelListTheme")
public typealias SBUChannelListTheme = SendbirdUIKit.SBUGroupChannelListTheme
@available(*, deprecated, renamed: "SBUGroupChannelCellTheme")
public typealias SBUChannelCellTheme = SendbirdUIKit.SBUGroupChannelCellTheme
extension SendbirdUIKit.SBUTheme {
  @available(*, deprecated, renamed: "init(groupChannelListTheme:groupChannelCellTheme:openChannelListTheme:openChannelCellTheme:channelTheme:messageInputTheme:messageCellTheme:userListTheme:userCellTheme:channelSettingsTheme:userProfileTheme:componentTheme:overlayTheme:messageSearchTheme:messageSearchResultCellTheme:createOpenChannelTheme:)")
  convenience public init(channelListTheme: SendbirdUIKit.SBUGroupChannelListTheme, channelCellTheme: SendbirdUIKit.SBUGroupChannelCellTheme, openChannelListTheme: SendbirdUIKit.SBUOpenChannelListTheme = .light, openChannelCellTheme: SendbirdUIKit.SBUOpenChannelCellTheme = .light, channelTheme: SendbirdUIKit.SBUChannelTheme = .light, messageInputTheme: SendbirdUIKit.SBUMessageInputTheme = .light, messageCellTheme: SendbirdUIKit.SBUMessageCellTheme = .light, userListTheme: SendbirdUIKit.SBUUserListTheme = .light, userCellTheme: SendbirdUIKit.SBUUserCellTheme = .light, channelSettingsTheme: SendbirdUIKit.SBUChannelSettingsTheme = .light, userProfileTheme: SendbirdUIKit.SBUUserProfileTheme = .light, componentTheme: SendbirdUIKit.SBUComponentTheme = .light, overlayTheme: SendbirdUIKit.SBUOverlayTheme = .init(), messageSearchTheme: SendbirdUIKit.SBUMessageSearchTheme = .light, messageSearchResultCellTheme: SendbirdUIKit.SBUMessageSearchResultCellTheme = .light, createOpenChannelTheme: SendbirdUIKit.SBUCreateOpenChannelTheme = .light)
  @available(*, deprecated, renamed: "setGroupChannelList(channelListTheme:channelCellTheme:)")
  public static func setChannelList(channelListTheme: SendbirdUIKit.SBUGroupChannelListTheme, channelCellTheme: SendbirdUIKit.SBUGroupChannelCellTheme)
  @available(*, deprecated, renamed: "groupChannelListTheme")
  public static var channelListTheme: SendbirdUIKit.SBUGroupChannelListTheme {
    get
    set
  }
  @available(*, deprecated, renamed: "groupChannelCellTheme")
  public static var channelCellTheme: SendbirdUIKit.SBUGroupChannelCellTheme {
    get
    set
  }
}
extension SendbirdUIKit.SBUMessageCellTheme {
  @available(*, deprecated, renamed: "unknownMessageDescLeftTextColor")
  public var unknownMessageDescTextColor: UIKit.UIColor {
    get
  }
  @available(*, deprecated, renamed: "init(backgroundColor:leftBackgroundColor:leftPressedBackgroundColor:rightBackgroundColor:rightPressedBackgroundColor:openChannelBackgroundColor:openChannelPressedBackgroundColor:dateFont:dateTextColor:dateBackgroundColor:userPlaceholderBackgroundColor:userPlaceholderTintColor:userNameFont:userNameTextColor:currentUserNameTextColor:timeFont:timeTextColor:pendingStateColor:failedStateColor:succeededStateColor:readReceiptStateColor:deliveryReceiptStateColor:userMessageFont:userMessageLeftTextColor:userMessageLeftEditTextColor:userMessageLeftHighlightTextColor:userMessageRightTextColor:userMessageRightEditTextColor:userMessageRightHighlightTextColor:fileIconBackgroundColor:fileImageBackgroundColor:fileImageIconColor:fileIconColor:fileMessageNameFont:fileMessageLeftTextColor:fileMessageRightTextColor:fileMessagePlaceholderColor:adminMessageFont:adminMessageTextColor:unknownMessageDescFont:unknownMessageDescTextColor:unknownMessageDescRightTextColor:ogTitleFont:ogTitleColor:ogDescriptionFont:ogDescriptionColor:ogURLAddressFont:ogURLAddressColor:openChannelOGTitleColor:linkColor:contentBackgroundColor:pressedContentBackgroundColor:quotedMessageBackgroundColor:quotedFileMessageThumbnailColor:quotedMessageTextColor:quotedMessageTextFont:repliedIconColor:repliedToTextColor:repliedToTextFont:mentionTextFont:mentionLeftTextColor:mentionRightTextColor:mentionLeftTextBackgroundColor:mentionRightTextBackgroundColor:buttonBackgroundColor:buttonTitleColor:sideButtonIconColor:newMessageBadgeColor:)")
  convenience public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, leftBackgroundColor: UIKit.UIColor = SBUColorSet.background100, leftPressedBackgroundColor: UIKit.UIColor = SBUColorSet.primaryExtraLight, rightBackgroundColor: UIKit.UIColor = SBUColorSet.primaryMain, rightPressedBackgroundColor: UIKit.UIColor = SBUColorSet.primaryDark, openChannelBackgroundColor: UIKit.UIColor = .clear, openChannelPressedBackgroundColor: UIKit.UIColor = SBUColorSet.background100, dateFont: UIKit.UIFont = SBUFontSet.caption1, dateTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, dateBackgroundColor: UIKit.UIColor = SBUColorSet.overlayLight, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, userNameFont: UIKit.UIFont = SBUFontSet.caption1, userNameTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, currentUserNameTextColor: UIKit.UIColor = SBUColorSet.secondaryMain, timeFont: UIKit.UIFont = SBUFontSet.caption4, timeTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, pendingStateColor: UIKit.UIColor = SBUColorSet.primaryMain, failedStateColor: UIKit.UIColor = SBUColorSet.errorMain, succeededStateColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, readReceiptStateColor: UIKit.UIColor = SBUColorSet.secondaryMain, deliveryReceiptStateColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, userMessageFont: UIKit.UIFont = SBUFontSet.body3, userMessageLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, userMessageLeftEditTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, userMessageLeftHighlightTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, userMessageRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, userMessageRightEditTextColor: UIKit.UIColor = SBUColorSet.onDarkTextMidEmphasis, userMessageRightHighlightTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, fileIconBackgroundColor: UIKit.UIColor = SBUColorSet.background50, fileImageBackgroundColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, fileImageIconColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, fileIconColor: UIKit.UIColor = SBUColorSet.primaryMain, fileMessageNameFont: UIKit.UIFont = SBUFontSet.body3, fileMessageLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, fileMessageRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, fileMessagePlaceholderColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, adminMessageFont: UIKit.UIFont = SBUFontSet.caption2, adminMessageTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, unknownMessageDescFont: UIKit.UIFont = SBUFontSet.body3, unknownMessageDescTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, unknownMessageDescRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextMidEmphasis, ogTitleFont: UIKit.UIFont = SBUFontSet.body2, ogTitleColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, ogDescriptionFont: UIKit.UIFont = SBUFontSet.caption2, ogDescriptionColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, ogURLAddressFont: UIKit.UIFont = SBUFontSet.caption2, ogURLAddressColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, openChannelOGTitleColor: UIKit.UIColor = SBUColorSet.primaryMain, linkColor: UIKit.UIColor = SBUColorSet.primaryMain, contentBackgroundColor: UIKit.UIColor = SBUColorSet.background100, pressedContentBackgroundColor: UIKit.UIColor = SBUColorSet.background300, quotedMessageBackgroundColor: UIKit.UIColor, quotedFileMessageThumbnailColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, quotedMessageTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, quotedMessageTextFont: UIKit.UIFont = SBUFontSet.body3, repliedIconColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, repliedToTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, repliedToTextFont: UIKit.UIFont = SBUFontSet.caption1, mentionTextFont: UIKit.UIFont = SBUFontSet.body4, mentionLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, mentionRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, mentionLeftTextBackgroundColor: UIKit.UIColor = .clear, mentionRightTextBackgroundColor: UIKit.UIColor = .clear, buttonBackgroundColor: UIKit.UIColor = SBUColorSet.background200, buttonTitleColor: UIKit.UIColor = SBUColorSet.primaryMain, sideButtonIconColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, newMessageBadgeColor: UIKit.UIColor = SBUColorSet.secondaryMain)
  @available(*, deprecated, renamed: "init(backgroundColor:leftBackgroundColor:leftPressedBackgroundColor:rightBackgroundColor:rightPressedBackgroundColor:openChannelBackgroundColor:openChannelPressedBackgroundColor:dateFont:dateTextColor:dateBackgroundColor:userPlaceholderBackgroundColor:userPlaceholderTintColor:userNameFont:userNameTextColor:currentUserNameTextColor:timeFont:timeTextColor:pendingStateColor:failedStateColor:succeededStateColor:readReceiptStateColor:deliveryReceiptStateColor:userMessageFont:userMessageLeftTextColor:userMessageLeftEditTextColor:userMessageLeftHighlightTextColor:userMessageRightTextColor:userMessageRightEditTextColor:userMessageRightHighlightTextColor:fileIconBackgroundColor:fileImageBackgroundColor:fileImageIconColor:fileIconColor:fileMessageNameFont:fileMessageLeftTextColor:fileMessageRightTextColor:fileMessagePlaceholderColor:adminMessageFont:adminMessageTextColor:unknownMessageDescFont:unknownMessageDescLeftTextColor:unknownMessageDescRightTextColor:ogTitleFont:ogTitleColor:ogDescriptionFont:ogDescriptionColor:ogURLAddressFont:ogURLAddressColor:openChannelOGTitleColor:linkColor:contentBackgroundColor:pressedContentBackgroundColor:quotedMessageLeftBackgroundColor:quotedMessageRightBackgroundColor:quotedFileMessageThumbnailColor:quotedMessageTextColor:quotedMessageTextFont:repliedIconColor:repliedToTextColor:repliedToTextFont:repliedCountTextColor:repliedCountTextFont:repliedUsersMoreIconBackgroundColor:repliedUsersMoreIconTintColor:mentionTextFont:mentionLeftTextColor:mentionRightTextColor:mentionLeftTextBackgroundColor:mentionRightTextBackgroundColor:buttonBackgroundColor:buttonTitleColor:sideButtonIconColor:newMessageBadgeColor:parentInfoBackgroundColor:parentInfoUserNameTextFont:parentInfoUserNameTextColor:parentInfoDateFont:parentInfoDateTextColor:parentInfoMoreButtonTintColor:parentInfoSeparateBarColor:parentInfoReplyCountTextColor:parentInfoReplyCountTextFont:parentInfoProgressBackgroundColor:progressTrackTintColor:progressTimeFont:progressTimeRightTextColor:progressTimeLeftTextColor:statusButtonBackgroundColor:loadingButtonTintColor:playButtonTintColor:pauseButtonTintColor:)")
  convenience public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, leftBackgroundColor: UIKit.UIColor = SBUColorSet.background100, leftPressedBackgroundColor: UIKit.UIColor = SBUColorSet.primaryExtraLight, rightBackgroundColor: UIKit.UIColor = SBUColorSet.primaryMain, rightPressedBackgroundColor: UIKit.UIColor = SBUColorSet.primaryDark, openChannelBackgroundColor: UIKit.UIColor = .clear, openChannelPressedBackgroundColor: UIKit.UIColor = SBUColorSet.background100, dateFont: UIKit.UIFont = SBUFontSet.caption1, dateTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, dateBackgroundColor: UIKit.UIColor = SBUColorSet.overlayLight, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, userNameFont: UIKit.UIFont = SBUFontSet.caption1, userNameTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, currentUserNameTextColor: UIKit.UIColor = SBUColorSet.secondaryMain, timeFont: UIKit.UIFont = SBUFontSet.caption4, timeTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, pendingStateColor: UIKit.UIColor = SBUColorSet.primaryMain, failedStateColor: UIKit.UIColor = SBUColorSet.errorMain, succeededStateColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, readReceiptStateColor: UIKit.UIColor = SBUColorSet.secondaryMain, deliveryReceiptStateColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, userMessageFont: UIKit.UIFont = SBUFontSet.body3, userMessageLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, userMessageLeftEditTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, userMessageLeftHighlightTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, userMessageRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, userMessageRightEditTextColor: UIKit.UIColor = SBUColorSet.onDarkTextMidEmphasis, userMessageRightHighlightTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, fileIconBackgroundColor: UIKit.UIColor = SBUColorSet.background50, fileImageBackgroundColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, fileImageIconColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, fileIconColor: UIKit.UIColor = SBUColorSet.primaryMain, fileMessageNameFont: UIKit.UIFont = SBUFontSet.body3, fileMessageLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, fileMessageRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, fileMessagePlaceholderColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, adminMessageFont: UIKit.UIFont = SBUFontSet.caption2, adminMessageTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, unknownMessageDescFont: UIKit.UIFont = SBUFontSet.body3, unknownMessageDescLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, unknownMessageDescRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextMidEmphasis, ogTitleFont: UIKit.UIFont = SBUFontSet.body2, ogTitleColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, ogDescriptionFont: UIKit.UIFont = SBUFontSet.caption2, ogDescriptionColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, ogURLAddressFont: UIKit.UIFont = SBUFontSet.caption2, ogURLAddressColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, openChannelOGTitleColor: UIKit.UIColor = SBUColorSet.primaryMain, linkColor: UIKit.UIColor = SBUColorSet.primaryMain, contentBackgroundColor: UIKit.UIColor = SBUColorSet.background100, pressedContentBackgroundColor: UIKit.UIColor = SBUColorSet.background300, quotedMessageBackgroundColor: UIKit.UIColor, quotedFileMessageThumbnailColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, quotedMessageTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, quotedMessageTextFont: UIKit.UIFont = SBUFontSet.body3, repliedIconColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, repliedToTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, repliedToTextFont: UIKit.UIFont = SBUFontSet.caption1, repliedCountTextColor: UIKit.UIColor = SBUColorSet.primaryMain, repliedCountTextFont: UIKit.UIFont = SBUFontSet.caption3, repliedUsersMoreIconBackgroundColor: UIKit.UIColor = SBUColorSet.background700.withAlphaComponent(0.64), repliedUsersMoreIconTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, mentionTextFont: UIKit.UIFont = SBUFontSet.body4, mentionLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, mentionRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, mentionLeftTextBackgroundColor: UIKit.UIColor = .clear, mentionRightTextBackgroundColor: UIKit.UIColor = .clear, buttonBackgroundColor: UIKit.UIColor = SBUColorSet.background200, buttonTitleColor: UIKit.UIColor = SBUColorSet.primaryMain, sideButtonIconColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, newMessageBadgeColor: UIKit.UIColor = SBUColorSet.secondaryMain, parentInfoBackgroundColor: UIKit.UIColor = SBUColorSet.background50, parentInfoUserNameTextFont: UIKit.UIFont = SBUFontSet.h3, parentInfoUserNameTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, parentInfoDateFont: UIKit.UIFont = SBUFontSet.caption2, parentInfoDateTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, parentInfoMoreButtonTintColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, parentInfoSeparateBarColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, parentInfoReplyCountTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, parentInfoReplyCountTextFont: UIKit.UIFont = SBUFontSet.body3, parentInfoProgressBackgroundColor: UIKit.UIColor = SBUColorSet.background100, progressTrackTintColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, progressTimeFont: UIKit.UIFont = SBUFontSet.body3, progressTimeRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, progressTimeLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, statusButtonBackgroundColor: UIKit.UIColor = SBUColorSet.background50, loadingButtonTintColor: UIKit.UIColor = SBUColorSet.primaryLight, playButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, pauseButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain)
}
public enum SBUThemeColorScheme {
  case light
  case dark
  public static func == (a: SendbirdUIKit.SBUThemeColorScheme, b: SendbirdUIKit.SBUThemeColorScheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class SBUTheme {
  public init(groupChannelListTheme: SendbirdUIKit.SBUGroupChannelListTheme = .light, groupChannelCellTheme: SendbirdUIKit.SBUGroupChannelCellTheme = .light, openChannelListTheme: SendbirdUIKit.SBUOpenChannelListTheme = .light, openChannelCellTheme: SendbirdUIKit.SBUOpenChannelCellTheme = .light, channelTheme: SendbirdUIKit.SBUChannelTheme = .light, messageInputTheme: SendbirdUIKit.SBUMessageInputTheme = .light, messageCellTheme: SendbirdUIKit.SBUMessageCellTheme = .light, messageTemplateTheme: SendbirdUIKit.SBUMessageTemplateTheme = .light, userListTheme: SendbirdUIKit.SBUUserListTheme = .light, userCellTheme: SendbirdUIKit.SBUUserCellTheme = .light, channelSettingsTheme: SendbirdUIKit.SBUChannelSettingsTheme = .light, userProfileTheme: SendbirdUIKit.SBUUserProfileTheme = .light, componentTheme: SendbirdUIKit.SBUComponentTheme = .light, overlayTheme: SendbirdUIKit.SBUOverlayTheme = .init(), messageSearchTheme: SendbirdUIKit.SBUMessageSearchTheme = .light, messageSearchResultCellTheme: SendbirdUIKit.SBUMessageSearchResultCellTheme = .light, createOpenChannelTheme: SendbirdUIKit.SBUCreateOpenChannelTheme = .light, voiceMessageInputTheme: SendbirdUIKit.SBUVoiceMessageInputTheme = .light)
  public static func set(theme: SendbirdUIKit.SBUTheme)
  public static func set(colorScheme: SendbirdUIKit.SBUThemeColorScheme)
  public static func setGroupChannelList(channelListTheme: SendbirdUIKit.SBUGroupChannelListTheme, channelCellTheme: SendbirdUIKit.SBUGroupChannelCellTheme)
  public static func setOpenChannelList(channelListTheme: SendbirdUIKit.SBUOpenChannelListTheme, channelCellTheme: SendbirdUIKit.SBUOpenChannelCellTheme)
  public static func setChannel(channelTheme: SendbirdUIKit.SBUChannelTheme, messageCellTheme: SendbirdUIKit.SBUMessageCellTheme, messageInputTheme: SendbirdUIKit.SBUMessageInputTheme, componentTheme: SendbirdUIKit.SBUComponentTheme, messageTemplateTheme: SendbirdUIKit.SBUMessageTemplateTheme)
  public static func setUserList(userListTheme: SendbirdUIKit.SBUUserListTheme, userCellTheme: SendbirdUIKit.SBUUserCellTheme)
  public static func setChannelSettings(channelSettingsTheme: SendbirdUIKit.SBUChannelSettingsTheme)
  public static func setUserProfile(userProfileTheme: SendbirdUIKit.SBUUserProfileTheme)
  public static func setCreateOpenChannel(createOpenChannelTheme: SendbirdUIKit.SBUCreateOpenChannelTheme)
  public static var dark: SendbirdUIKit.SBUTheme {
    get
  }
  public static var light: SendbirdUIKit.SBUTheme {
    get
  }
  public static var groupChannelListTheme: SendbirdUIKit.SBUGroupChannelListTheme {
    get
    set
  }
  public static var groupChannelCellTheme: SendbirdUIKit.SBUGroupChannelCellTheme {
    get
    set
  }
  public static var openChannelListTheme: SendbirdUIKit.SBUOpenChannelListTheme {
    get
    set
  }
  public static var openChannelCellTheme: SendbirdUIKit.SBUOpenChannelCellTheme {
    get
    set
  }
  public static var channelTheme: SendbirdUIKit.SBUChannelTheme {
    get
    set
  }
  public static var messageInputTheme: SendbirdUIKit.SBUMessageInputTheme {
    get
    set
  }
  public static var messageCellTheme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
  }
  public static var userListTheme: SendbirdUIKit.SBUUserListTheme {
    get
    set
  }
  public static var userCellTheme: SendbirdUIKit.SBUUserCellTheme {
    get
    set
  }
  public static var channelSettingsTheme: SendbirdUIKit.SBUChannelSettingsTheme {
    get
    set
  }
  public static var userProfileTheme: SendbirdUIKit.SBUUserProfileTheme {
    get
    set
  }
  public static var componentTheme: SendbirdUIKit.SBUComponentTheme {
    get
    set
  }
  public static var overlayTheme: SendbirdUIKit.SBUOverlayTheme {
    get
    set
  }
  public static var messageSearchTheme: SendbirdUIKit.SBUMessageSearchTheme {
    get
    set
  }
  public static var messageSearchResultCellTheme: SendbirdUIKit.SBUMessageSearchResultCellTheme {
    get
    set
  }
  public static var createOpenChannelTheme: SendbirdUIKit.SBUCreateOpenChannelTheme {
    get
    set
  }
  public static var messageTemplateTheme: SendbirdUIKit.SBUMessageTemplateTheme {
    get
    set
  }
  public static var voiceMessageInputTheme: SendbirdUIKit.SBUVoiceMessageInputTheme {
    get
    set
  }
  public static var colorScheme: SendbirdUIKit.SBUThemeColorScheme {
    get
  }
  @objc deinit
}
public class SBUOverlayTheme {
  public init(channelTheme: SendbirdUIKit.SBUChannelTheme = .overlay, messageInputTheme: SendbirdUIKit.SBUMessageInputTheme = .overlay, messageCellTheme: SendbirdUIKit.SBUMessageCellTheme = .overlay, componentTheme: SendbirdUIKit.SBUComponentTheme = .overlay)
  public var channelTheme: SendbirdUIKit.SBUChannelTheme
  public var messageInputTheme: SendbirdUIKit.SBUMessageInputTheme
  public var messageCellTheme: SendbirdUIKit.SBUMessageCellTheme
  public var componentTheme: SendbirdUIKit.SBUComponentTheme
  @objc deinit
}
public class SBUGroupChannelListTheme {
  public static var light: SendbirdUIKit.SBUGroupChannelListTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUGroupChannelListTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationBarShadowColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, backgroundColor: UIKit.UIColor = SBUColorSet.background50, notificationOnBackgroundColor: UIKit.UIColor = SBUColorSet.primaryMain, notificationOnTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, notificationOffBackgroundColor: UIKit.UIColor = SBUColorSet.background200, notificationOffTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, leaveBackgroundColor: UIKit.UIColor = SBUColorSet.errorMain, leaveTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, alertBackgroundColor: UIKit.UIColor = SBUColorSet.background50)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var notificationOnBackgroundColor: UIKit.UIColor
  public var notificationOnTintColor: UIKit.UIColor
  public var notificationOffBackgroundColor: UIKit.UIColor
  public var notificationOffTintColor: UIKit.UIColor
  public var leaveBackgroundColor: UIKit.UIColor
  public var leaveTintColor: UIKit.UIColor
  public var alertBackgroundColor: UIKit.UIColor
  @objc deinit
}
public class SBUGroupChannelCellTheme {
  public static var light: SendbirdUIKit.SBUGroupChannelCellTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUGroupChannelCellTheme {
    get
  }
  public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, titleFont: UIKit.UIFont = SBUFontSet.subtitle1, titleTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, memberCountFont: UIKit.UIFont = SBUFontSet.caption1, memberCountTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, lastUpdatedTimeFont: UIKit.UIFont = SBUFontSet.caption2, lastUpdatedTimeTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, messageFont: UIKit.UIFont = SBUFontSet.body3, messageTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, fileIconBackgroundColor: UIKit.UIColor = SBUColorSet.background100, fileIconTintColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, broadcastMarkTintColor: UIKit.UIColor = SBUColorSet.secondaryMain, freezeStateTintColor: UIKit.UIColor = SBUColorSet.primaryMain, unreadCountBackgroundColor: UIKit.UIColor = SBUColorSet.primaryMain, unreadCountTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, unreadCountFont: UIKit.UIFont = SBUFontSet.caption1, unreadMentionFont: UIKit.UIFont = SBUFontSet.h3, unreadMentionColor: UIKit.UIColor = SBUColorSet.primaryMain, succeededStateColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, deliveryReceiptStateColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, readReceiptStateColor: UIKit.UIColor = SBUColorSet.secondaryMain, separatorLineColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled)
  public var backgroundColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var titleTextColor: UIKit.UIColor
  public var memberCountFont: UIKit.UIFont
  public var memberCountTextColor: UIKit.UIColor
  public var lastUpdatedTimeFont: UIKit.UIFont
  public var lastUpdatedTimeTextColor: UIKit.UIColor
  public var messageFont: UIKit.UIFont
  public var messageTextColor: UIKit.UIColor
  public var fileIconBackgroundColor: UIKit.UIColor
  public var fileIconTintColor: UIKit.UIColor
  public var broadcastMarkTintColor: UIKit.UIColor
  public var freezeStateTintColor: UIKit.UIColor
  public var unreadCountBackgroundColor: UIKit.UIColor
  public var unreadCountTextColor: UIKit.UIColor
  public var unreadCountFont: UIKit.UIFont
  public var succeededStateColor: UIKit.UIColor
  public var deliveryReceiptStateColor: UIKit.UIColor
  public var readReceiptStateColor: UIKit.UIColor
  public var unreadMentionTextFont: UIKit.UIFont
  public var unreadMentionTextColor: UIKit.UIColor
  public var separatorLineColor: UIKit.UIColor
  @objc deinit
}
public class SBUOpenChannelListTheme {
  public static var light: SendbirdUIKit.SBUOpenChannelListTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUOpenChannelListTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationBarShadowColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, backgroundColor: UIKit.UIColor = SBUColorSet.background50, refreshIndicatorColor: UIKit.UIColor = SBUColorSet.primaryMain, refreshBackgroundColor: UIKit.UIColor = SBUColorSet.background100)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var refreshIndicatorColor: UIKit.UIColor
  public var refreshBackgroundColor: UIKit.UIColor
  @objc deinit
}
public class SBUOpenChannelCellTheme {
  public static var light: SendbirdUIKit.SBUOpenChannelCellTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUOpenChannelCellTheme {
    get
  }
  public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, channelPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, channelPlaceholderTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, titleFont: UIKit.UIFont = SBUFontSet.subtitle1, titleTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, participantMarkTint: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, participantCountFont: UIKit.UIFont = SBUFontSet.caption2, participantCountTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, freezeStateTintColor: UIKit.UIColor = SBUColorSet.primaryMain, separatorLineColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled)
  public var backgroundColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var titleTextColor: UIKit.UIColor
  public var participantMarkTint: UIKit.UIColor
  public var participantCountFont: UIKit.UIFont
  public var participantCountTextColor: UIKit.UIColor
  public var freezeStateTintColor: UIKit.UIColor
  public var separatorLineColor: UIKit.UIColor
  public var channelPlaceholderBackgroundColor: UIKit.UIColor
  public var channelPlaceholderTintColor: UIKit.UIColor
  @objc deinit
}
public class SBUChannelTheme {
  public static var light: SendbirdUIKit.SBUChannelTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUChannelTheme {
    get
  }
  public static var overlay: SendbirdUIKit.SBUChannelTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationBarShadowColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, backgroundColor: UIKit.UIColor = SBUColorSet.background50, removeItemColor: UIKit.UIColor = SBUColorSet.errorMain, deleteItemColor: UIKit.UIColor = SBUColorSet.errorMain, cancelItemColor: UIKit.UIColor = SBUColorSet.primaryMain, alertRemoveColor: UIKit.UIColor = SBUColorSet.errorMain, alertCancelColor: UIKit.UIColor = SBUColorSet.primaryMain, menuTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, menuItemTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, menuItemDisabledColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, channelStateBannerFont: UIKit.UIFont = SBUFontSet.caption2, channelStateBannerTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, channelStateBannerBackgroundColor: UIKit.UIColor = SBUColorSet.informationLight, mentionLimitGuideTextFont: UIKit.UIFont = SBUFontSet.body3, mentionLimitGuideTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, separatorColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, messageThreadTitleColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, messageThreadTitleFont: UIKit.UIFont = SBUFontSet.h3, messageThreadTitleChannelNameColor: UIKit.UIColor = SBUColorSet.primaryMain, messageThreadTitleChannelNameFont: UIKit.UIFont = SBUFontSet.caption2)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var removeItemColor: UIKit.UIColor
  public var deleteItemColor: UIKit.UIColor
  public var cancelItemColor: UIKit.UIColor
  public var alertRemoveColor: UIKit.UIColor
  public var alertCancelColor: UIKit.UIColor
  public var menuTextColor: UIKit.UIColor
  public var menuItemTintColor: UIKit.UIColor
  public var menuItemDisabledColor: UIKit.UIColor
  public var channelStateBannerFont: UIKit.UIFont
  public var channelStateBannerTextColor: UIKit.UIColor
  public var channelStateBannerBackgroundColor: UIKit.UIColor
  public var mentionLimitGuideTextFont: UIKit.UIFont
  public var mentionLimitGuideTextColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor
  public var messageThreadTitleColor: UIKit.UIColor
  public var messageThreadTitleFont: UIKit.UIFont
  public var messageThreadTitleChannelNameColor: UIKit.UIColor
  public var messageThreadTitleChannelNameFont: UIKit.UIFont
  @objc deinit
}
public class SBUMessageInputTheme {
  public static var light: SendbirdUIKit.SBUMessageInputTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUMessageInputTheme {
    get
  }
  public static var overlay: SendbirdUIKit.SBUMessageInputTheme {
    get
  }
  public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, textFieldBackgroundColor: UIKit.UIColor = SBUColorSet.background100, textFieldPlaceholderColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, textFieldPlaceholderFont: UIKit.UIFont = SBUFontSet.body3, textFieldDisabledColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, textFieldTintColor: UIKit.UIColor = SBUColorSet.primaryMain, textFieldTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, textFieldBorderColor: UIKit.UIColor = SBUColorSet.background100, textFieldFont: UIKit.UIFont = SBUFontSet.body3, buttonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, buttonDisabledTintColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, cancelButtonFont: UIKit.UIFont = SBUFontSet.button2, saveButtonFont: UIKit.UIFont = SBUFontSet.button2, saveButtonTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, channelViewDividerColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, quotedFileMessageThumbnailBackgroundColor: UIKit.UIColor = SBUColorSet.background200, quotedFileMessageThumbnailTintColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, replyToTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, replyToTextFont: UIKit.UIFont = SBUFontSet.caption1, quotedMessageTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, quotedMessageTextFont: UIKit.UIFont = SBUFontSet.caption2, closeReplyButtonColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, mentionTextFont: UIKit.UIFont = SBUFontSet.body2, mentionTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, mentionTextBackgroundColor: UIKit.UIColor = .clear)
  public var backgroundColor: UIKit.UIColor
  public var textFieldBackgroundColor: UIKit.UIColor
  public var textFieldPlaceholderColor: UIKit.UIColor
  public var textFieldPlaceholderFont: UIKit.UIFont
  public var textFieldDisabledColor: UIKit.UIColor
  public var textFieldTintColor: UIKit.UIColor
  public var textFieldTextColor: UIKit.UIColor
  public var textFieldBorderColor: UIKit.UIColor
  public var textFieldFont: UIKit.UIFont
  public var buttonTintColor: UIKit.UIColor
  public var buttonDisabledTintColor: UIKit.UIColor
  public var cancelButtonFont: UIKit.UIFont
  public var saveButtonFont: UIKit.UIFont
  public var saveButtonTextColor: UIKit.UIColor
  public var channelViewDividerColor: UIKit.UIColor
  public var quotedFileMessageThumbnailBackgroundColor: UIKit.UIColor
  public var quotedFileMessageThumbnailTintColor: UIKit.UIColor
  public var replyToTextColor: UIKit.UIColor
  public var replyToTextFont: UIKit.UIFont
  public var quotedMessageTextColor: UIKit.UIColor
  public var quotedMessageTextFont: UIKit.UIFont
  public var closeReplyButtonColor: UIKit.UIColor
  public var mentionTextFont: UIKit.UIFont
  public var mentionTextColor: UIKit.UIColor
  public var mentionTextBackgroundColor: UIKit.UIColor
  @objc deinit
}
public class SBUMessageCellTheme {
  public static var light: SendbirdUIKit.SBUMessageCellTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUMessageCellTheme {
    get
  }
  public static var overlay: SendbirdUIKit.SBUMessageCellTheme {
    get
  }
  public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, leftBackgroundColor: UIKit.UIColor = SBUColorSet.background100, leftPressedBackgroundColor: UIKit.UIColor = SBUColorSet.primaryExtraLight, rightBackgroundColor: UIKit.UIColor = SBUColorSet.primaryMain, rightPressedBackgroundColor: UIKit.UIColor = SBUColorSet.primaryDark, openChannelBackgroundColor: UIKit.UIColor = .clear, openChannelPressedBackgroundColor: UIKit.UIColor = SBUColorSet.background100, dateFont: UIKit.UIFont = SBUFontSet.caption1, dateTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, dateBackgroundColor: UIKit.UIColor = SBUColorSet.overlayLight, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, userNameFont: UIKit.UIFont = SBUFontSet.caption1, userNameTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, currentUserNameTextColor: UIKit.UIColor = SBUColorSet.secondaryMain, timeFont: UIKit.UIFont = SBUFontSet.caption4, timeTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, pendingStateColor: UIKit.UIColor = SBUColorSet.primaryMain, failedStateColor: UIKit.UIColor = SBUColorSet.errorMain, succeededStateColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, readReceiptStateColor: UIKit.UIColor = SBUColorSet.secondaryMain, deliveryReceiptStateColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, userMessageFont: UIKit.UIFont = SBUFontSet.body3, userMessageLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, userMessageLeftEditTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, userMessageLeftHighlightTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, userMessageRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, userMessageRightEditTextColor: UIKit.UIColor = SBUColorSet.onDarkTextMidEmphasis, userMessageRightHighlightTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, fileIconBackgroundColor: UIKit.UIColor = SBUColorSet.background50, fileImageBackgroundColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, fileImageIconColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, fileIconColor: UIKit.UIColor = SBUColorSet.primaryMain, fileMessageNameFont: UIKit.UIFont = SBUFontSet.body3, fileMessageLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, fileMessageRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, fileMessagePlaceholderColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, adminMessageFont: UIKit.UIFont = SBUFontSet.caption2, adminMessageTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, unknownMessageDescFont: UIKit.UIFont = SBUFontSet.body3, unknownMessageDescLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, unknownMessageDescRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextMidEmphasis, ogTitleFont: UIKit.UIFont = SBUFontSet.body2, ogTitleColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, ogDescriptionFont: UIKit.UIFont = SBUFontSet.caption2, ogDescriptionColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, ogURLAddressFont: UIKit.UIFont = SBUFontSet.caption2, ogURLAddressColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, openChannelOGTitleColor: UIKit.UIColor = SBUColorSet.primaryMain, linkColor: UIKit.UIColor = SBUColorSet.primaryMain, contentBackgroundColor: UIKit.UIColor = SBUColorSet.background100, pressedContentBackgroundColor: UIKit.UIColor = SBUColorSet.background300, quotedMessageLeftBackgroundColor: UIKit.UIColor = SBUColorSet.background100.withAlphaComponent(0.5), quotedMessageRightBackgroundColor: UIKit.UIColor = SBUColorSet.background100, quotedFileMessageThumbnailColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, quotedMessageTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, quotedMessageTextFont: UIKit.UIFont = SBUFontSet.body3, repliedIconColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, repliedToTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, repliedToTextFont: UIKit.UIFont = SBUFontSet.caption1, repliedCountTextColor: UIKit.UIColor = SBUColorSet.primaryMain, repliedCountTextFont: UIKit.UIFont = SBUFontSet.caption3, repliedUsersMoreIconBackgroundColor: UIKit.UIColor = SBUColorSet.background700.withAlphaComponent(0.64), repliedUsersMoreIconTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, mentionTextFont: UIKit.UIFont = SBUFontSet.body4, mentionLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, mentionRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, mentionLeftTextBackgroundColor: UIKit.UIColor = .clear, mentionRightTextBackgroundColor: UIKit.UIColor = .clear, buttonBackgroundColor: UIKit.UIColor = SBUColorSet.background200, buttonTitleColor: UIKit.UIColor = SBUColorSet.primaryMain, sideButtonIconColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, newMessageBadgeColor: UIKit.UIColor = SBUColorSet.secondaryMain, parentInfoBackgroundColor: UIKit.UIColor = SBUColorSet.background50, parentInfoUserNameTextFont: UIKit.UIFont = SBUFontSet.h3, parentInfoUserNameTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, parentInfoDateFont: UIKit.UIFont = SBUFontSet.caption2, parentInfoDateTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, parentInfoMoreButtonTintColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, parentInfoSeparateBarColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, parentInfoReplyCountTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, parentInfoReplyCountTextFont: UIKit.UIFont = SBUFontSet.body3, parentInfoProgressBackgroundColor: UIKit.UIColor = SBUColorSet.background100, progressTrackTintColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, progressTimeFont: UIKit.UIFont = SBUFontSet.body3, progressTimeRightTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, progressTimeLeftTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, statusButtonBackgroundColor: UIKit.UIColor = SBUColorSet.background50, loadingButtonTintColor: UIKit.UIColor = SBUColorSet.primaryLight, playButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, pauseButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, suggestedReplyTitleColor: UIKit.UIColor = SBUColorSet.primaryMain, suggestedReplyBorderColor: UIKit.UIColor = SBUColorSet.primaryMain, suggestedReplyBackgroundColor: UIKit.UIColor = SBUColorSet.background50, suggestedReplyBackgroundSelectedColor: UIKit.UIColor = SBUColorSet.background100, multipleFilesMessageFileOverlayColor: UIKit.UIColor = SBUColorSet.overlayLight, formBackgroundColor: UIKit.UIColor = SBUColorSet.background100, formTitleColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, formOptionalTitleColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, formInputBackgroundColor: UIKit.UIColor = SBUColorSet.background50, formInputBackgroundDoneColor: UIKit.UIColor = SBUColorSet.onDarkTextMidEmphasis, formInputTitleColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, formInputIconColor: UIKit.UIColor = SBUColorSet.secondaryMain, formInputBorderNormalColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, formInputBorderActiveColor: UIKit.UIColor = SBUColorSet.primaryMain, formInputBorderErrorColor: UIKit.UIColor = SBUColorSet.errorMain, formInputErrorColor: UIKit.UIColor = SBUColorSet.errorMain, formInputPlaceholderColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, formSubmitButtonBackgroundColor: UIKit.UIColor = SBUColorSet.primaryMain, formSubmitButtonBackgroundDisabledColor: UIKit.UIColor = SBUColorSet.background100, formSubmitButtonTitleColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, formSubmitButtonTitleDisabledColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, formChipBackgroundNormalColor: UIKit.UIColor = SBUColorSet.background50, formChipBackgroundSelectColor: UIKit.UIColor = SBUColorSet.primaryExtraLight, formChipBackgroundDisableColor: UIKit.UIColor = SBUColorSet.onDarkTextDisabled, formChipBackgroundSubmittedColor: UIKit.UIColor = SBUColorSet.onDarkTextDisabled, formChipTitleNormalColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, formChipTitleSelectColor: UIKit.UIColor = SBUColorSet.primaryExtraLight, formChipTitleDisableColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, formChipTitleSubmittedColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, formChipBorderNormalColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, formChipBorderSelectColor: UIKit.UIColor = SBUColorSet.primaryMain, formChipBorderDisableColor: UIKit.UIColor = SBUColorSet.onDarkTextDisabled, formChipBorderSubmittedColor: UIKit.UIColor = UIColor.clear, formTitleFont: UIKit.UIFont = SBUFontSet.caption3, formOptionalTitleFont: UIKit.UIFont = SBUFontSet.caption3, formErrorTitleFont: UIKit.UIFont = SBUFontSet.caption4, formInputTextFont: UIKit.UIFont = SBUFontSet.body3, formChipTextFont: UIKit.UIFont = SBUFontSet.caption1, formSubmittButtonFont: UIKit.UIFont = SBUFontSet.button3, typingMessageProfileBorderColor: UIKit.UIColor = SBUColorSet.background50, typingMessageDotColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, typingMessageDotTransformColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, feedbackRadius: CoreFoundation.CGFloat = 18, feedbackIconColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, feedbackIconSelectColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, feedbackIconDeselectColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, feedbackBorderColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, feedbackBorderSelectColor: UIKit.UIColor = SBUColorSet.primaryMain, feedbackBorderDeselectColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, feedbackBackgroundNormalColor: UIKit.UIColor = SBUColorSet.background50, feedbackBackgroundSelectColor: UIKit.UIColor = SBUColorSet.primaryMain, feedbackBackgroundDeselectColor: UIKit.UIColor = SBUColorSet.background50)
  public var backgroundColor: UIKit.UIColor
  public var leftBackgroundColor: UIKit.UIColor
  public var leftPressedBackgroundColor: UIKit.UIColor
  public var rightBackgroundColor: UIKit.UIColor
  public var rightPressedBackgroundColor: UIKit.UIColor
  public var openChannelBackgroundColor: UIKit.UIColor
  public var openChannelPressedBackgroundColor: UIKit.UIColor
  public var dateFont: UIKit.UIFont
  public var dateTextColor: UIKit.UIColor
  public var dateBackgroundColor: UIKit.UIColor
  public var userPlaceholderBackgroundColor: UIKit.UIColor
  public var userPlaceholderTintColor: UIKit.UIColor
  public var userNameFont: UIKit.UIFont
  public var userNameTextColor: UIKit.UIColor
  public var currentUserNameTextColor: UIKit.UIColor
  public var timeFont: UIKit.UIFont
  public var timeTextColor: UIKit.UIColor
  public var pendingStateColor: UIKit.UIColor
  public var failedStateColor: UIKit.UIColor
  public var succeededStateColor: UIKit.UIColor
  public var readReceiptStateColor: UIKit.UIColor
  public var deliveryReceiptStateColor: UIKit.UIColor
  public var contentBackgroundColor: UIKit.UIColor
  public var pressedContentBackgroundColor: UIKit.UIColor
  public var userMessageFont: UIKit.UIFont
  public var userMessageLeftTextColor: UIKit.UIColor
  public var userMessageLeftEditTextColor: UIKit.UIColor
  public var userMessageRightTextColor: UIKit.UIColor
  public var userMessageRightEditTextColor: UIKit.UIColor
  public var fileIconBackgroundColor: UIKit.UIColor
  public var fileIconColor: UIKit.UIColor
  public var fileImageBackgroundColor: UIKit.UIColor
  public var fileImageIconColor: UIKit.UIColor
  public var fileMessageNameFont: UIKit.UIFont
  public var fileMessageLeftTextColor: UIKit.UIColor
  public var fileMessageRightTextColor: UIKit.UIColor
  public var fileMessagePlaceholderColor: UIKit.UIColor
  public var multipleFilesMessageFileOverlayColor: UIKit.UIColor
  public var adminMessageFont: UIKit.UIFont
  public var adminMessageTextColor: UIKit.UIColor
  public var unknownMessageDescFont: UIKit.UIFont
  public var unknownMessageDescLeftTextColor: UIKit.UIColor
  public var unknownMessageDescRightTextColor: UIKit.UIColor
  public var messageLeftHighlightTextColor: UIKit.UIColor
  public var messageRightHighlightTextColor: UIKit.UIColor
  public var ogTitleFont: UIKit.UIFont
  public var ogTitleColor: UIKit.UIColor
  public var ogDescriptionFont: UIKit.UIFont
  public var ogDescriptionColor: UIKit.UIColor
  public var ogURLAddressFont: UIKit.UIFont
  public var ogURLAddressColor: UIKit.UIColor
  public var openChannelOGTitleColor: UIKit.UIColor
  public var linkColor: UIKit.UIColor
  public var quotedMessageTextFont: UIKit.UIFont
  public var repliedToTextFont: UIKit.UIFont
  @available(*, deprecated, message: "This property has been separated as the `quotedMessageLeftBackgroundColor` and `quotedMessageRightBackgroundColor`")
  public var quotedMessageBackgroundColor: UIKit.UIColor {
    get
    set
  }
  public var quotedMessageLeftBackgroundColor: UIKit.UIColor
  public var quotedMessageRightBackgroundColor: UIKit.UIColor
  public var quotedFileMessageThumbnailColor: UIKit.UIColor
  public var quotedMessageTextColor: UIKit.UIColor
  public var repliedIconColor: UIKit.UIColor
  public var repliedToTextColor: UIKit.UIColor
  public var repliedCountTextFont: UIKit.UIFont
  public var repliedCountTextColor: UIKit.UIColor
  public var repliedUsersMoreIconBackgroundColor: UIKit.UIColor
  public var repliedUsersMoreIconTintColor: UIKit.UIColor
  public var mentionTextFont: UIKit.UIFont
  public var mentionLeftTextColor: UIKit.UIColor
  public var mentionRightTextColor: UIKit.UIColor
  public var mentionLeftTextBackgroundColor: UIKit.UIColor
  public var mentionRightTextBackgroundColor: UIKit.UIColor
  public var buttonBackgroundColor: UIKit.UIColor
  public var buttonTitleColor: UIKit.UIColor
  public var sideButtonIconColor: UIKit.UIColor
  public var newMessageBadgeColor: UIKit.UIColor
  public var parentInfoBackgroundColor: UIKit.UIColor
  public var parentInfoUserNameTextFont: UIKit.UIFont
  public var parentInfoUserNameTextColor: UIKit.UIColor
  public var parentInfoDateFont: UIKit.UIFont
  public var parentInfoDateTextColor: UIKit.UIColor
  public var parentInfoMoreButtonTintColor: UIKit.UIColor
  public var parentInfoSeparateBarColor: UIKit.UIColor
  public var parentInfoReplyCountTextColor: UIKit.UIColor
  public var parentInfoReplyCountTextFont: UIKit.UIFont
  public var parentInfoProgressBackgroundColor: UIKit.UIColor
  public var progressTrackTintColor: UIKit.UIColor
  public var progressTimeFont: UIKit.UIFont
  public var progressTimeRightTextColor: UIKit.UIColor
  public var progressTimeLeftTextColor: UIKit.UIColor
  public var playerStatusButtonBackgroundColor: UIKit.UIColor
  public var playerLoadingButtonTintColor: UIKit.UIColor
  public var playerPlayButtonTintColor: UIKit.UIColor
  public var playerPauseButtonTintColor: UIKit.UIColor
  public var suggestedReplyTitleColor: UIKit.UIColor
  public var suggestedReplyBorderColor: UIKit.UIColor
  public var suggestedReplyBackgroundColor: UIKit.UIColor
  public var suggestedReplyBackgroundSelectedColor: UIKit.UIColor
  public var formBackgroundColor: UIKit.UIColor
  public var formTitleColor: UIKit.UIColor
  public var formOptionalTitleColor: UIKit.UIColor
  public var formInputBackgroundColor: UIKit.UIColor
  public var formInputBackgroundDoneColor: UIKit.UIColor
  public var formInputTitleColor: UIKit.UIColor
  public var formInputIconColor: UIKit.UIColor
  public var formInputBorderNormalColor: UIKit.UIColor
  public var formInputBorderActiveColor: UIKit.UIColor
  public var formInputBorderErrorColor: UIKit.UIColor
  public var formInputErrorColor: UIKit.UIColor
  public var formInputPlaceholderColor: UIKit.UIColor
  public var formSubmitButtonBackgroundColor: UIKit.UIColor
  public var formSubmitButtonBackgroundDisabledColor: UIKit.UIColor
  public var formSubmitButtonTitleColor: UIKit.UIColor
  public var formSubmitButtonTitleDisabledColor: UIKit.UIColor
  public var formChipBackgroundNormalColor: UIKit.UIColor
  public var formChipBackgroundSelectColor: UIKit.UIColor
  public var formChipBackgroundDisableColor: UIKit.UIColor
  public var formChipBackgroundSubmittedColor: UIKit.UIColor
  public var formChipTitleNormalColor: UIKit.UIColor
  public var formChipTitleSelectColor: UIKit.UIColor
  public var formChipTitleDisableColor: UIKit.UIColor
  public var formChipTitleSubmittedColor: UIKit.UIColor
  public var formChipBorderNormalColor: UIKit.UIColor
  public var formChipBorderSelectColor: UIKit.UIColor
  public var formChipBorderDisableColor: UIKit.UIColor
  public var formChipBorderSubmittedColor: UIKit.UIColor
  public var formTitleFont: UIKit.UIFont
  public var formOptionalTitleFont: UIKit.UIFont
  public var formErrorTitleFont: UIKit.UIFont
  public var formInputTextFont: UIKit.UIFont
  public var formChipTextFont: UIKit.UIFont
  public var formSubmittButtonFont: UIKit.UIFont
  public var typingMessageProfileBorderColor: UIKit.UIColor
  public var typingMessageDotColor: UIKit.UIColor
  public var typingMessageDotTransformColor: UIKit.UIColor
  public var feedbackRadius: CoreFoundation.CGFloat
  public var feedbackIconColor: UIKit.UIColor
  public var feedbackIconSelectColor: UIKit.UIColor
  public var feedbackIconDeselectColor: UIKit.UIColor
  public var feedbackBorderColor: UIKit.UIColor
  public var feedbackBorderSelectColor: UIKit.UIColor
  public var feedbackBorderDeselectColor: UIKit.UIColor
  public var feedbackBackgroundNormalColor: UIKit.UIColor
  public var feedbackBackgroundSelectColor: UIKit.UIColor
  public var feedbackBackgroundDeselectColor: UIKit.UIColor
  @objc deinit
}
public class SBUUserListTheme {
  public static var light: SendbirdUIKit.SBUUserListTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUUserListTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationShadowColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, rightBarButtonSelectedTintColor: UIKit.UIColor = SBUColorSet.primaryMain, barButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, barButtonDisabledTintColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, backgroundColor: UIKit.UIColor = SBUColorSet.background50, coverImageTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, coverImageBackgroundColor: UIKit.UIColor = SBUColorSet.background300, itemTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, itemColor: UIKit.UIColor = SBUColorSet.primaryMain, removeColor: UIKit.UIColor = SBUColorSet.errorMain, placeholderTintColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, textfieldTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationShadowColor: UIKit.UIColor
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonSelectedTintColor: UIKit.UIColor
  public var barButtonTintColor: UIKit.UIColor
  public var barButtonDisabledTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var coverImageTintColor: UIKit.UIColor
  public var coverImageBackgroundColor: UIKit.UIColor
  public var placeholderTintColor: UIKit.UIColor
  public var textfieldTextColor: UIKit.UIColor
  public var itemTextColor: UIKit.UIColor
  public var itemColor: UIKit.UIColor
  public var removeColor: UIKit.UIColor
  @objc deinit
}
public class SBUUserCellTheme {
  public static var light: SendbirdUIKit.SBUUserCellTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUUserCellTheme {
    get
  }
  public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, checkboxOnColor: UIKit.UIColor = SBUColorSet.primaryMain, checkboxOffColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, nicknameTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, nicknameFont: UIKit.UIFont = SBUFontSet.subtitle2, nonameTextColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, userIdTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, userIdFont: UIKit.UIFont = SBUFontSet.body3, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, mutedStateBackgroundColor: UIKit.UIColor = SBUColorSet.primaryMain.withAlphaComponent(0.5), mutedStateIconColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, subInfoTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, subInfoFont: UIKit.UIFont = SBUFontSet.body2, moreButtonColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, moreButtonDisabledColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, separateColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled)
  public var backgroundColor: UIKit.UIColor
  public var checkboxOnColor: UIKit.UIColor
  public var checkboxOffColor: UIKit.UIColor
  public var nicknameTextColor: UIKit.UIColor
  public var nicknameTextFont: UIKit.UIFont
  public var nonameTextColor: UIKit.UIColor
  public var userIdTextColor: UIKit.UIColor
  public var userIdTextFont: UIKit.UIFont
  public var userPlaceholderBackgroundColor: UIKit.UIColor
  public var userPlaceholderTintColor: UIKit.UIColor
  public var mutedStateBackgroundColor: UIKit.UIColor
  public var mutedStateIconColor: UIKit.UIColor
  public var subInfoTextColor: UIKit.UIColor
  public var subInfoFont: UIKit.UIFont
  public var moreButtonColor: UIKit.UIColor
  public var moreButtonDisabledColor: UIKit.UIColor
  public var separateColor: UIKit.UIColor
  @available(*, unavailable, renamed: "nicknameTextColor")
  public var userNameTextColor: UIKit.UIColor {
    get
  }
  @available(*, unavailable, renamed: "nicknameFont")
  public var userNameFont: UIKit.UIFont {
    get
  }
  @objc deinit
}
public class SBUChannelSettingsTheme {
  public static var light: SendbirdUIKit.SBUChannelSettingsTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUChannelSettingsTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationShadowColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, backgroundColor: UIKit.UIColor = SBUColorSet.background50, cellTextFont: UIKit.UIFont = SBUFontSet.subtitle2, cellTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, cellSubTextFont: UIKit.UIFont = SBUFontSet.subtitle2, cellSubTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, cellDescriptionTextFont: UIKit.UIFont = SBUFontSet.body3, cellDescriptionTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, cellSwitchColor: UIKit.UIColor = SBUColorSet.primaryMain, cellSeparateColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, cellRadioButtonSelectedColor: UIKit.UIColor = SBUColorSet.primaryMain, cellRadioButtonDeselectedColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, cellTypeIconTintColor: UIKit.UIColor = SBUColorSet.primaryMain, cellArrowIconTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, cellLeaveIconColor: UIKit.UIColor = SBUColorSet.errorMain, cellDeleteIconColor: UIKit.UIColor = SBUColorSet.errorMain, userNameFont: UIKit.UIFont = SBUFontSet.h1, userNameTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, itemTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, itemColor: UIKit.UIColor = SBUColorSet.primaryMain, itemDeleteTextColor: UIKit.UIColor = SBUColorSet.errorMain, urlTitleFont: UIKit.UIFont = SBUFontSet.body2, urlTitleColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, urlFont: UIKit.UIFont = SBUFontSet.body1, urlColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationShadowColor: UIKit.UIColor
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var cellTextFont: UIKit.UIFont
  public var cellTextColor: UIKit.UIColor
  public var cellSubTextFont: UIKit.UIFont
  public var cellSubTextColor: UIKit.UIColor
  public var cellDescriptionTextFont: UIKit.UIFont
  public var cellDescriptionTextColor: UIKit.UIColor
  public var cellSwitchColor: UIKit.UIColor
  public var cellSeparateColor: UIKit.UIColor
  public var cellRadioButtonSelectedColor: UIKit.UIColor
  public var cellRadioButtonDeselectedColor: UIKit.UIColor
  public var cellTypeIconTintColor: UIKit.UIColor
  public var cellArrowIconTintColor: UIKit.UIColor
  public var cellLeaveIconColor: UIKit.UIColor
  public var cellDeleteIconColor: UIKit.UIColor
  public var userNameFont: UIKit.UIFont
  public var userNameTextColor: UIKit.UIColor
  public var userPlaceholderTintColor: UIKit.UIColor
  public var userPlaceholderBackgroundColor: UIKit.UIColor
  public var itemTextColor: UIKit.UIColor
  public var itemColor: UIKit.UIColor
  public var itemDeleteTextColor: UIKit.UIColor
  public var urlTitleFont: UIKit.UIFont
  public var urlTitleColor: UIKit.UIColor
  public var urlFont: UIKit.UIFont
  public var urlColor: UIKit.UIColor
  @objc deinit
}
public class SBUUserProfileTheme {
  public static var light: SendbirdUIKit.SBUUserProfileTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUUserProfileTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, overlayColor: UIKit.UIColor = SBUColorSet.overlayLight, backgroundColor: UIKit.UIColor = SBUColorSet.background50, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, usernameTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, usernameFont: UIKit.UIFont = SBUFontSet.h1, userRoleTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, userRoleFont: UIKit.UIFont = SBUFontSet.body3, largeItemTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, largeItemFont: UIKit.UIFont = SBUFontSet.button2, largeItemBackgroundColor: UIKit.UIColor = SBUColorSet.background50, largeItemHighlightedColor: UIKit.UIColor = SBUColorSet.background100, itemFont: UIKit.UIFont = SBUFontSet.caption1, itemBackgroundColor: UIKit.UIColor = SBUColorSet.background400, itemSelectedBackgroundColor: UIKit.UIColor = SBUColorSet.primaryMain, itemTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, itemSelectedTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, itemHighlightedTintColor: UIKit.UIColor = SBUColorSet.errorMain, separatorColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, informationTitleColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, informationTitleFont: UIKit.UIFont = SBUFontSet.body2, informationDesctiptionColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, informationDesctiptionFont: UIKit.UIFont = SBUFontSet.body3)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var overlayColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var userPlaceholderBackgroundColor: UIKit.UIColor
  public var userPlaceholderTintColor: UIKit.UIColor
  public var usernameTextColor: UIKit.UIColor
  public var usernameFont: UIKit.UIFont
  public var largeItemTintColor: UIKit.UIColor
  public var largeItemFont: UIKit.UIFont
  public var largeItemBackgroundColor: UIKit.UIColor
  public var largeItemHighlightedColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor
  public var informationTitleColor: UIKit.UIColor
  public var informationTitleFont: UIKit.UIFont
  public var informationDesctiptionColor: UIKit.UIColor
  public var informationDesctiptionFont: UIKit.UIFont
  public var userRoleTextColor: UIKit.UIColor
  public var userRoleFont: UIKit.UIFont
  public var itemFont: UIKit.UIFont
  public var itemBackgroundColor: UIKit.UIColor
  public var itemSelectedBackgroundColor: UIKit.UIColor
  public var itemTintColor: UIKit.UIColor
  public var itemSelectedTintColor: UIKit.UIColor
  public var itemHighlightedTintColor: UIKit.UIColor
  @objc deinit
}
public class SBUComponentTheme {
  public static var light: SendbirdUIKit.SBUComponentTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUComponentTheme {
    get
  }
  public static var overlay: SendbirdUIKit.SBUComponentTheme {
    get
  }
  public init(emptyViewBackgroundColor: UIKit.UIColor = SBUColorSet.background50, emptyViewStatusFont: UIKit.UIFont = SBUFontSet.body3, emptyViewStatusTintColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, emptyViewRetryButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, emptyViewRetryButtonFont: UIKit.UIFont = SBUFontSet.button2, overlayColor: UIKit.UIColor = SBUColorSet.overlayDark, backgroundColor: UIKit.UIColor = SBUColorSet.background50, highlightedColor: UIKit.UIColor = SBUColorSet.background100, buttonTextColor: UIKit.UIColor = SBUColorSet.primaryMain, separatorColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, shadowColor: UIKit.UIColor = SBUColorSet.background700.withAlphaComponent(0.12), closeBarButtonTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, alertTitleColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, alertTitleFont: UIKit.UIFont = SBUFontSet.h3, alertDetailColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, alertDetailFont: UIKit.UIFont = SBUFontSet.body3, alertPlaceholderColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, alertButtonColor: UIKit.UIColor = SBUColorSet.primaryMain, alertErrorColor: UIKit.UIColor = SBUColorSet.errorMain, alertButtonFont: UIKit.UIFont = SBUFontSet.button2, alertTextFieldBackgroundColor: UIKit.UIColor = SBUColorSet.background100, alertTextFieldTintColor: UIKit.UIColor = SBUColorSet.primaryMain, alertTextFieldFont: UIKit.UIFont = SBUFontSet.body3, actionSheetTextFont: UIKit.UIFont = SBUFontSet.subtitle1, actionSheetTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, actionSheetSubTextFont: UIKit.UIFont = SBUFontSet.body2, actionSheetSubTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, actionSheetItemColor: UIKit.UIColor = SBUColorSet.primaryMain, actionSheetErrorColor: UIKit.UIColor = SBUColorSet.errorMain, actionSheetButtonFont: UIKit.UIFont = SBUFontSet.button1, actionSheetDisabledColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, newMessageFont: UIKit.UIFont = SBUFontSet.body2, newMessageTintColor: UIKit.UIColor = SBUColorSet.primaryMain, newMessageBackground: UIKit.UIColor = SBUColorSet.background50, newMessageHighlighted: UIKit.UIColor = SBUColorSet.background100, newMessageButtonTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, newMessageButtonBackground: UIKit.UIColor = SBUColorSet.primaryMain, newMessageButtonHighlighted: UIKit.UIColor = SBUColorSet.primaryDark, scrollBottomButtonIconColor: UIKit.UIColor = SBUColorSet.primaryMain, scrollBottomButtonBackground: UIKit.UIColor = SBUColorSet.background50, scrollBottomButtonHighlighted: UIKit.UIColor = SBUColorSet.background100, titleOnlineStateColor: UIKit.UIColor = SBUColorSet.secondaryMain, titleColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, titleFont: UIKit.UIFont = SBUFontSet.h3, titleStatusColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, titleStatusFont: UIKit.UIFont = SBUFontSet.caption2, menuTitleFont: UIKit.UIFont = SBUFontSet.subtitle2, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, placeholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, placeholderTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, reactionBoxBackgroundColor: UIKit.UIColor = SBUColorSet.background50, reactionBoxBorderLineColor: UIKit.UIColor = SBUColorSet.background100, reactionBoxEmojiCountColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, reactionBoxEmojiBackgroundColor: UIKit.UIColor = SBUColorSet.background100, reactionBoxSelectedEmojiBackgroundColor: UIKit.UIColor = SBUColorSet.primaryExtraLight, reactionBoxEmojiCountFont: UIKit.UIFont = SBUFontSet.caption4, emojiCountColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, emojiSelectedCountColor: UIKit.UIColor = SBUColorSet.primaryMain, emojiSelectedUnderlineColor: UIKit.UIColor = SBUColorSet.primaryMain, emojiCountFont: UIKit.UIFont = SBUFontSet.button3, reactionMenuLineColor: UIKit.UIColor = SBUColorSet.onDarkTextDisabled, emojiListSelectedBackgroundColor: UIKit.UIColor = SBUColorSet.primaryExtraLight, addReactionTintColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, channelTypeSelectorItemTintColor: UIKit.UIColor = SBUColorSet.primaryMain, channelTypeSelectorItemTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, channelTypeSelectorItemFont: UIKit.UIFont = SBUFontSet.caption2, broadcastIconBackgroundColor: UIKit.UIColor = SBUColorSet.secondaryMain, broadcastIconTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, barItemTintColor: UIKit.UIColor = SBUColorSet.primaryMain, loadingBackgroundColor: UIKit.UIColor = .clear, loadingPopupBackgroundColor: UIKit.UIColor = .clear, loadingFont: UIKit.UIFont = SBUFontSet.subtitle2, loadingTextColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, loadingSpinnerColor: UIKit.UIColor = SBUColorSet.primaryMain, toastContainerColor: UIKit.UIColor = SBUColorSet.background700, toastTitleColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, feedbackToastUpdateDoneColor: UIKit.UIColor = SBUColorSet.secondaryLight)
  public var emptyViewBackgroundColor: UIKit.UIColor
  public var emptyViewStatusFont: UIKit.UIFont
  public var emptyViewStatusTintColor: UIKit.UIColor
  public var emptyViewRetryButtonTintColor: UIKit.UIColor
  public var emptyViewRetryButtonFont: UIKit.UIFont
  public var alertTitleColor: UIKit.UIColor
  public var alertTitleFont: UIKit.UIFont
  public var alertDetailColor: UIKit.UIColor
  public var alertDetailFont: UIKit.UIFont
  public var alertPlaceholderColor: UIKit.UIColor
  public var alertButtonColor: UIKit.UIColor
  public var alertErrorColor: UIKit.UIColor
  public var alertButtonFont: UIKit.UIFont
  public var alertTextFieldBackgroundColor: UIKit.UIColor
  public var alertTextFieldTintColor: UIKit.UIColor
  public var alertTextFieldFont: UIKit.UIFont
  public var actionSheetTextFont: UIKit.UIFont
  public var actionSheetTextColor: UIKit.UIColor
  public var actionSheetSubTextFont: UIKit.UIFont
  public var actionSheetSubTextColor: UIKit.UIColor
  public var actionSheetItemColor: UIKit.UIColor
  public var actionSheetErrorColor: UIKit.UIColor
  public var actionSheetButtonFont: UIKit.UIFont
  public var actionSheetDisabledColor: UIKit.UIColor
  public var newMessageFont: UIKit.UIFont
  public var newMessageTintColor: UIKit.UIColor
  public var newMessageBackground: UIKit.UIColor
  public var newMessageHighlighted: UIKit.UIColor
  public var newMessageButtonTintColor: UIKit.UIColor
  public var newMessageButtonBackground: UIKit.UIColor
  public var newMessageButtonHighlighted: UIKit.UIColor
  public var scrollBottomButtonIconColor: UIKit.UIColor
  public var scrollBottomButtonBackground: UIKit.UIColor
  public var scrollBottomButtonHighlighted: UIKit.UIColor
  public var titleOnlineStateColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var titleStatusColor: UIKit.UIColor
  public var titleStatusFont: UIKit.UIFont
  public var menuTitleFont: UIKit.UIFont
  public var overlayColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var highlightedColor: UIKit.UIColor
  public var buttonTextColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor
  public var shadowColor: UIKit.UIColor
  public var closeBarButtonTintColor: UIKit.UIColor
  public var userPlaceholderBackgroundColor: UIKit.UIColor
  public var userPlaceholderTintColor: UIKit.UIColor
  public var placeholderBackgroundColor: UIKit.UIColor
  public var placeholderTintColor: UIKit.UIColor
  public var reactionBoxBackgroundColor: UIKit.UIColor
  public var reactionBoxBorderLineColor: UIKit.UIColor
  public var reactionBoxEmojiCountColor: UIKit.UIColor
  public var reactionBoxEmojiBackgroundColor: UIKit.UIColor
  public var reactionBoxSelectedEmojiBackgroundColor: UIKit.UIColor
  public var reactionBoxEmojiCountFont: UIKit.UIFont
  public var emojiCountColor: UIKit.UIColor
  public var emojiSelectedCountColor: UIKit.UIColor
  public var emojiSelectedUnderlineColor: UIKit.UIColor
  public var emojiCountFont: UIKit.UIFont
  public var emojiListSelectedBackgroundColor: UIKit.UIColor
  public var reactionMenuLineColor: UIKit.UIColor
  public var addReactionTintColor: UIKit.UIColor
  public var channelTypeSelectorItemTintColor: UIKit.UIColor
  public var channelTypeSelectorItemTextColor: UIKit.UIColor
  public var channelTypeSelectorItemFont: UIKit.UIFont
  public var broadcastIconBackgroundColor: UIKit.UIColor
  public var broadcastIconTintColor: UIKit.UIColor
  public var barItemTintColor: UIKit.UIColor
  public var loadingBackgroundColor: UIKit.UIColor
  public var loadingPopupBackgroundColor: UIKit.UIColor
  public var loadingFont: UIKit.UIFont
  public var loadingTextColor: UIKit.UIColor
  public var loadingSpinnerColor: UIKit.UIColor
  public var toastContainerColor: UIKit.UIColor
  public var toastTitleColor: UIKit.UIColor
  public var feedbackToastUpdateDoneColor: UIKit.UIColor
  @objc deinit
}
public class SBUMessageSearchTheme {
  public static var light: SendbirdUIKit.SBUMessageSearchTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUMessageSearchTheme {
    get
  }
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarStyle: UIKit.UIBarStyle
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var searchTextColor: UIKit.UIColor
  public var searchTextFont: UIKit.UIFont
  public var searchTextBackgroundColor: UIKit.UIColor
  public var searchPlaceholderColor: UIKit.UIColor
  public var searchIconTintColor: UIKit.UIColor
  public var clearIconTintColor: UIKit.UIColor
  public var cancelButtonTintColor: UIKit.UIColor
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarStyle: UIKit.UIBarStyle = .default, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationBarShadowColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, backgroundColor: UIKit.UIColor = SBUColorSet.background50, searchTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, searchTextFont: UIKit.UIFont = SBUFontSet.body3, searchTextBackgroundColor: UIKit.UIColor = SBUColorSet.background100, searchPlaceholderColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, searchIconTintColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, clearIconTintColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, cancelButtonTintColor: UIKit.UIColor = SBUColorSet.primaryDark)
  @objc deinit
}
public class SBUMessageSearchResultCellTheme {
  public static var light: SendbirdUIKit.SBUMessageSearchResultCellTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUMessageSearchResultCellTheme {
    get
  }
  public var backgroundColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var titleTextColor: UIKit.UIColor
  public var descriptionFont: UIKit.UIFont
  public var descriptionTextColor: UIKit.UIColor
  public var updatedAtFont: UIKit.UIFont
  public var updatedAtTextColor: UIKit.UIColor
  public var fileMessageFont: UIKit.UIFont
  public var fileMessageTextColor: UIKit.UIColor
  public var fileMessageIconBackgroundColor: UIKit.UIColor
  public var fileMessageIconTintColor: UIKit.UIColor
  public var separatorLineColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, titleFont: UIKit.UIFont = SBUFontSet.subtitle1, titleTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, descriptionFont: UIKit.UIFont = SBUFontSet.body3, descriptionTextColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, updatedAtFont: UIKit.UIFont = SBUFontSet.caption2, updatedAtTextColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, fileMessageFont: UIKit.UIFont = SBUFontSet.body3, fileMessageTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, fileMessageIconBackgroundColor: UIKit.UIColor = SBUColorSet.background100, fileMessageIconTintColor: UIKit.UIColor = SBUColorSet.onLightTextMidEmphasis, separatorLineColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled)
  @objc deinit
}
public class SBUCreateOpenChannelTheme {
  public static var light: SendbirdUIKit.SBUCreateOpenChannelTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUCreateOpenChannelTheme {
    get
  }
  public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.primaryMain, rightBarButtonDisabledTintColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationBarShadowColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, backgroundColor: UIKit.UIColor = SBUColorSet.background50, textFieldPlaceholderColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, textFieldTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, textFieldFont: UIKit.UIFont = SBUFontSet.subtitle1, textFieldUnderlineColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled, actionSheetItemColor: UIKit.UIColor = SBUColorSet.primaryMain, actionSheetTextColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, actionSheetRemoveTextColor: UIKit.UIColor = SBUColorSet.errorMain, actionSheetCancelTextColor: UIKit.UIColor = SBUColorSet.primaryMain)
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var leftBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonTintColor: UIKit.UIColor
  public var rightBarButtonDisabledTintColor: UIKit.UIColor
  public var navigationBarTintColor: UIKit.UIColor
  public var navigationBarShadowColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var textFieldPlaceholderColor: UIKit.UIColor
  public var textFieldTextColor: UIKit.UIColor
  public var textFieldFont: UIKit.UIFont
  public var textFieldUnderlineColor: UIKit.UIColor
  public var actionSheetItemColor: UIKit.UIColor
  public var actionSheetTextColor: UIKit.UIColor
  public var actionSheetRemoveTextColor: UIKit.UIColor
  public var actionSheetCancelTextColor: UIKit.UIColor
  @objc deinit
}
public class SBUVoiceMessageInputTheme {
  public static var light: SendbirdUIKit.SBUVoiceMessageInputTheme {
    get
  }
  public static var dark: SendbirdUIKit.SBUVoiceMessageInputTheme {
    get
  }
  public var backgroundColor: UIKit.UIColor
  public var overlayColor: UIKit.UIColor
  public var cancelTitleColor: UIKit.UIColor
  public var cancelTitleFont: UIKit.UIFont
  public var progressTintColor: UIKit.UIColor
  public var progressTrackTintColor: UIKit.UIColor
  public var progressTrackDeactivatedTintColor: UIKit.UIColor
  public var progressTimeFont: UIKit.UIFont
  public var progressTimeColor: UIKit.UIColor
  public var progressDeactivatedTimeColor: UIKit.UIColor
  public var progressRecordingIconTintColor: UIKit.UIColor
  public var statusButtonBackgroundColor: UIKit.UIColor
  public var recordingButtonTintColor: UIKit.UIColor
  public var stopButtonTintColor: UIKit.UIColor
  public var playButtonTintColor: UIKit.UIColor
  public var pauseButtonTintColor: UIKit.UIColor
  public var sendButtonBackgroundColor: UIKit.UIColor
  public var sendButtonDisabledBackgroundColor: UIKit.UIColor
  public var sendButtonTintColor: UIKit.UIColor
  public var sendButtonDisabledTintColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, overlayColor: UIKit.UIColor = SBUColorSet.overlayDark, cancelTitleColor: UIKit.UIColor = SBUColorSet.primaryMain, cancelTitleFont: UIKit.UIFont = SBUFontSet.button2, progressTintColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, progressTrackTintColor: UIKit.UIColor = SBUColorSet.primaryMain, progressTrackDeactivatedTintColor: UIKit.UIColor = SBUColorSet.background100, progressTimeFont: UIKit.UIFont = SBUFontSet.caption1, progressTimeColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, progressDeactivatedTimeColor: UIKit.UIColor = SBUColorSet.onLightTextLowEmphasis, progressRecordingIconTintColor: UIKit.UIColor = SBUColorSet.errorMain, statusButtonBackgroundColor: UIKit.UIColor = SBUColorSet.background100, recordingButtonTintColor: UIKit.UIColor = SBUColorSet.errorMain, stopButtonTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, playButtonTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, pauseButtonTintColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, sendButtonBackgroundColor: UIKit.UIColor = SBUColorSet.primaryMain, sendButtonDisabledBackgroundColor: UIKit.UIColor = SBUColorSet.background100, sendButtonTintColor: UIKit.UIColor = SBUColorSet.onDarkTextHighEmphasis, sendButtonDisabledTintColor: UIKit.UIColor = SBUColorSet.onLightTextDisabled)
  @objc deinit
}
public class SBUMessageTemplateTheme {
  public static var light: SendbirdUIKit.SBUMessageTemplateTheme
  public static var dark: SendbirdUIKit.SBUMessageTemplateTheme
  public func setTheme(light: SendbirdUIKit.SBUMessageTemplateTheme?, dark: SendbirdUIKit.SBUMessageTemplateTheme?)
  public init(textFont: UIKit.UIFont = SBUFontSet.body3, textColor: UIKit.UIColor = SBUColorSet.onLightTextHighEmphasis, textButtonFont: UIKit.UIFont = SBUFontSet.button4, textButtonTitleColor: UIKit.UIColor = SBUColorSet.primaryMain, textButtonBackgroundColor: UIKit.UIColor = SBUColorSet.background200, viewBackgroundColor: UIKit.UIColor = SBUColorSet.background100)
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var textButtonFont: UIKit.UIFont
  public var textButtonTitleColor: UIKit.UIColor
  public var textButtonBackgroundColor: UIKit.UIColor
  public var viewBackgroundColor: UIKit.UIColor
  @objc deinit
}
public protocol SBUThreadInfoViewDelegate : AnyObject {
  func threadInfoViewDidTap(_ threadInfoView: SendbirdUIKit.SBUThreadInfoView)
}
public protocol SBUThreadInfoViewProtocol : SendbirdUIKit.SBUViewLifeCycle {
  func configure(with message: SendbirdChatSDK.BaseMessage, messagePosition: SendbirdUIKit.MessagePosition)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUThreadInfoView : SendbirdUIKit.SBUView, SendbirdUIKit.SBUThreadInfoViewProtocol {
  @_Concurrency.MainActor(unsafe) public var mainContainerView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var repliedUsersHStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var repliedCountLabel: UIKit.UILabel
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUThreadInfoViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var threadInfo: SendbirdChatSDK.ThreadInfo? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var message: SendbirdChatSDK.BaseMessage? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var messagePosition: SendbirdUIKit.MessagePosition {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let userImageSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) final public let repliedUserLimit: Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUMessageCellTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) open func configure(with message: SendbirdChatSDK.BaseMessage, messagePosition: SendbirdUIKit.MessagePosition)
  @_Concurrency.MainActor(unsafe) open func setupRepliedUsers()
  @objc @_Concurrency.MainActor(unsafe) open func onTapThreadInfo(sender: UIKit.UITapGestureRecognizer)
  @objc deinit
}
public class SBUToastViewItem : SendbirdUIKit.SBUCommonItem {
  public var position: SendbirdUIKit.SBUToastViewItem.Position
  public var duration: Swift.Double
  public var completionHandler: SendbirdUIKit.SBUToastViewHandler?
  public init(position: SendbirdUIKit.SBUToastViewItem.Position = .center, duration: Swift.Double = 1.5, title: Swift.String? = nil, color: UIKit.UIColor? = nil, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, textAlignment: UIKit.NSTextAlignment = .left, tag: Swift.Int? = nil)
  public enum Position {
    case top(padding: CoreFoundation.CGFloat? = nil)
    case center
    case bottom(padding: CoreFoundation.CGFloat? = nil)
  }
  @objc deinit
}
public typealias SBUToastViewHandler = () -> Swift.Void
public protocol SBUToastViewDelegate : ObjectiveC.NSObjectProtocol {
  func didDismissToastView()
}
extension SendbirdUIKit.SBUToastViewDelegate {
  public func didDismissToastView()
}
@objc @_inheritsConvenienceInitializers open class SBUToastView : ObjectiveC.NSObject, SendbirdUIKit.SBUViewLifeCycle {
  @SendbirdUIKit.SBUThemeWrapper public var theme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  weak public var delegate: (any SendbirdUIKit.SBUToastViewDelegate)? {
    get
  }
  public var parentView: UIKit.UIView?
  public var identifier: Swift.Int {
    get
  }
  public var isShowing: Swift.Bool {
    get
  }
  public var item: SendbirdUIKit.SBUToastViewItem? {
    get
  }
  public var backgroundView: UIKit.UIView {
    get
  }
  public var containerView: UIKit.UIView {
    get
  }
  public var stackView: SendbirdUIKit.SBUStackView {
    get
  }
  public var label: UIKit.UILabel {
    get
  }
  public var containerAlpha: CoreFoundation.CGFloat
  public var containerCornerRadius: CoreFoundation.CGFloat
  public var basePadding: UIKit.UIEdgeInsets
  public var itemHeight: CoreFoundation.CGFloat
  public var itemPadding: UIKit.UIEdgeInsets
  public var itemWithIconPadding: UIKit.UIEdgeInsets
  @objc required override dynamic public init()
  open class func show(item: SendbirdUIKit.SBUToastViewItem, identifier: Swift.Int = -1, oneTimetheme: SendbirdUIKit.SBUComponentTheme? = nil, delegate: (any SendbirdUIKit.SBUToastViewDelegate)? = nil, dismissHandler: SendbirdUIKit.SBUToastViewHandler? = nil)
  open class func dismiss()
  open func configureView()
  @objc open func setupViews()
  @objc open func setupStyles()
  @objc open func updateStyles()
  @objc open func setupLayouts()
  @objc open func updateLayouts()
  @objc open func setupActions()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class SBUTypingIndicatorBubbleView : SendbirdUIKit.SBUView {
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func configure()
  @objc deinit
}
public struct SBUTypingIndicatorInfo {
  public var typers: [SendbirdChatSDK.User]
  public var numberOfTypers: Swift.Int
}
public class SBUTypingIndicatorMessage : SendbirdChatSDK.BaseMessage {
  public var typingIndicatorInfo: SendbirdUIKit.SBUTypingIndicatorInfo?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUTypingIndicatorMessageCell : SendbirdUIKit.SBUContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) open var typingBubbleView: UIKit.UIView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var typingMessage: SendbirdUIKit.SBUTypingIndicatorMessage? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  @_Concurrency.MainActor(unsafe) @objc override public func resetMainContainerViewLayer()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUTypingIndicatorMessageManager {
  public static let shared: SendbirdUIKit.SBUTypingIndicatorMessageManager
  @objc deinit
}
public class SBUTypingIndicatorMessageCellParams : SendbirdUIKit.SBUBaseMessageCellParams {
  public var typingMessage: SendbirdUIKit.SBUTypingIndicatorMessage? {
    get
  }
  public var shouldRedrawTypingBubble: Swift.Bool
  public init(message: SendbirdUIKit.SBUTypingIndicatorMessage, shouldRedrawTypingBubble: Swift.Bool = true)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class SBUUnderLineTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) final public let border: QuartzCore.CALayer
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupViews()
  @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func updateStyles()
  @_Concurrency.MainActor(unsafe) open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func updateLayouts()
  @_Concurrency.MainActor(unsafe) open func updateColor(_ color: UIKit.UIColor?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUUnknownMessageCell : SendbirdUIKit.SBUUserMessageCell {
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  @objc @_Concurrency.MainActor(unsafe) open func setupMessageTextView()
  @available(*, deprecated, renamed: "configure(with:)")
  @_Concurrency.MainActor(unsafe) override open func configure(_ message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition, receiptState: SendbirdUIKit.SBUMessageReceiptState?, useReaction: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class SBUUnknownMessageCellParams : SendbirdUIKit.SBUBaseMessageCellParams {
  public var unknownMessage: SendbirdChatSDK.BaseMessage {
    get
  }
  final public let useReaction: Swift.Bool
  final public let withTextView: Swift.Bool
  final public let enableEmojiLongPress: Swift.Bool
  public init(message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition = .none, receiptState: SendbirdUIKit.SBUMessageReceiptState = .none, useReaction: Swift.Bool, isThreadMessage: Swift.Bool = false, joinedAt: Swift.Int64 = 0, messageOffsetTimestamp: Swift.Int64 = 0, enableEmojiLongPress: Swift.Bool = true)
  @objc deinit
}
@objc public class SBUUser : ObjectiveC.NSObject {
  public var userId: Swift.String {
    get
  }
  public var nickname: Swift.String? {
    get
  }
  public var profileURL: Swift.String? {
    get
  }
  public var user: SendbirdChatSDK.User? {
    get
  }
  @available(*, deprecated, renamed: "profileURL")
  public var profileUrl: Swift.String? {
    get
  }
  public var isOperator: Swift.Bool {
    get
  }
  public var isMuted: Swift.Bool {
    get
  }
  public init(userId: Swift.String, nickname: Swift.String? = nil, profileURL: Swift.String? = nil)
  public init(user: SendbirdChatSDK.User)
  public init(user: SendbirdUIKit.SBUUser, isOperator: Swift.Bool = false, isMuted: Swift.Bool = false)
  public init(member: SendbirdChatSDK.Member)
  public init(sender: SendbirdChatSDK.Sender)
  public func refinedNickname() -> Swift.String
  public func mentionedNickname() -> Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public static func convertUsers(_ users: [SendbirdChatSDK.User]?) -> [SendbirdUIKit.SBUUser]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUUserCell : SendbirdUIKit.SBUTableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mutedStateImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "nicknameLabel")
  @_Concurrency.MainActor(unsafe) public var userNickname: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var nicknameLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userIdLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var operatorLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var checkboxButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var moreButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var separateView: UIKit.UIView
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUUserCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var type: SendbirdUIKit.UserListType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(type: SendbirdUIKit.UserListType, user: SendbirdUIKit.SBUUser, isChecked: Swift.Bool = false, operatorMode: Swift.Bool = false, channelType: SendbirdChatSDK.ChannelType = .group)
  @objc @_Concurrency.MainActor(unsafe) public func selectUser(_ selected: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onClickMoreMenu()
  @objc @_Concurrency.MainActor(unsafe) open func onTapUserProfileView(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
open class SBUUserListModule {
  @available(*, deprecated, message: "Use `SBUUserListModule.HeaderComponent` instead.")
  public var headerComponent: SendbirdUIKit.SBUUserListModule.Header? {
    get
    set
  }
  @available(*, deprecated, message: "Use `SBUUserListModule.ListComponent` instead.")
  public var listComponent: SendbirdUIKit.SBUUserListModule.List? {
    get
    set
  }
  required public init()
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupUserListModule` or `SBUModuleSet.OpenUserListModule`")
  required public init(headerComponent: SendbirdUIKit.SBUUserListModule.Header? = nil)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupUserListModule` or `SBUModuleSet.OpenUserListModule`")
  required public init(listComponent: SendbirdUIKit.SBUUserListModule.List? = nil)
  @available(*, deprecated, message: "Use `SBUModuleSet.GroupUserListModule` or `SBUModuleSet.OpenUserListModule`")
  required public init(headerComponent: SendbirdUIKit.SBUUserListModule.Header? = nil, listComponent: SendbirdUIKit.SBUUserListModule.List? = nil)
  @objc deinit
}
public protocol SBUUserListModuleHeaderDelegate : SendbirdUIKit.SBUCommonDelegate {
  func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
}
extension SendbirdUIKit.SBUUserListModule {
  @objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class Header : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var leftBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var rightBarButtons: [UIKit.UIBarButtonItem]? {
      @objc get
      @objc set
    }
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUUserListTheme?
    @_Concurrency.MainActor(unsafe) public var componentTheme: SendbirdUIKit.SBUComponentTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUUserListModuleHeaderDelegate)?
    @objc @_Concurrency.MainActor(unsafe) public var channelType: SendbirdChatSDK.ChannelType
    @_Concurrency.MainActor(unsafe) public var userListType: SendbirdUIKit.ChannelUserListType {
      get
    }
    @available(*, unavailable, renamed: "SBUUserListModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUUserListModule.Header()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUUserListModuleHeaderDelegate, userListType: SendbirdUIKit.ChannelUserListType, channelType: SendbirdChatSDK.ChannelType = .group, theme: SendbirdUIKit.SBUUserListTheme, componentTheme: SendbirdUIKit.SBUComponentTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUUserListTheme? = nil, componentTheme: SendbirdUIKit.SBUComponentTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func onTapLeftBarButton()
    @objc @_Concurrency.MainActor(unsafe) public func onTapRightBarButton()
  }
}
public protocol SBUUserListModuleListDelegate : SendbirdUIKit.SBUCommonDelegate {
  func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, didTapMoreMenuFor user: SendbirdUIKit.SBUUser)
  func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, didTapUserProfileFor user: SendbirdUIKit.SBUUser)
  func userListModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUUserListModule.List)
}
public protocol SBUUserListModuleListDataSource : AnyObject {
  func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, channelForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.BaseChannel?
  func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, usersInTableView tableView: UIKit.UITableView) -> [SendbirdUIKit.SBUUser]
}
extension SendbirdUIKit.SBUUserListModule {
  @_inheritsConvenienceInitializers @objc(SBUUserListModuleList) @objcMembers @_Concurrency.MainActor(unsafe) open class List : UIKit.UIView {
    @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView
    @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
      @objc get
      @objc set
    }
    @objc @_Concurrency.MainActor(unsafe) public var userCell: UIKit.UITableViewCell?
    @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUUserListTheme?
    @_Concurrency.MainActor(unsafe) public var componentTheme: SendbirdUIKit.SBUComponentTheme?
    @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUUserListModuleListDelegate)?
    @_Concurrency.MainActor(unsafe) weak public var dataSource: (any SendbirdUIKit.SBUUserListModuleListDataSource)?
    @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
      @objc get
    }
    @objc @_Concurrency.MainActor(unsafe) public var userList: [SendbirdUIKit.SBUUser] {
      @objc get
    }
    @_Concurrency.MainActor(unsafe) public var userListType: SendbirdUIKit.ChannelUserListType
    @available(*, unavailable, renamed: "SBUUserListModule.List()")
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @available(*, unavailable, renamed: "SBUUserListModule.List()")
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @objc deinit
    @_Concurrency.MainActor(unsafe) open func configure(delegate: any SendbirdUIKit.SBUUserListModuleListDelegate, dataSource: any SendbirdUIKit.SBUUserListModuleListDataSource, userListType: SendbirdUIKit.ChannelUserListType, theme: SendbirdUIKit.SBUUserListTheme, componentTheme: SendbirdUIKit.SBUComponentTheme)
    @objc @_Concurrency.MainActor(unsafe) open func setupViews()
    @objc @_Concurrency.MainActor(unsafe) open func setupLayouts()
    @_Concurrency.MainActor(unsafe) open func setupStyles(theme: SendbirdUIKit.SBUUserListTheme? = nil, componentTheme: SendbirdUIKit.SBUComponentTheme? = nil)
    @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
    @objc @_Concurrency.MainActor(unsafe) public func register(userCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
    @objc @_Concurrency.MainActor(unsafe) open func configureCell(_ cell: UIKit.UITableViewCell?, indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) public func updateEmptyView(type: SendbirdUIKit.EmptyViewType)
    @objc @_Concurrency.MainActor(unsafe) open func setMoreMenuTapAction(_ user: SendbirdUIKit.SBUUser)
    @objc @_Concurrency.MainActor(unsafe) open func setUserProfileTapAction(_ user: SendbirdUIKit.SBUUser)
  }
}
extension SendbirdUIKit.SBUUserListModule.List : SendbirdUIKit.SBUEmptyViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func didSelectRetry()
}
extension SendbirdUIKit.SBUUserListModule.List : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension SendbirdUIKit.SBUUserListModule {
  public static var HeaderComponent: SendbirdUIKit.SBUUserListModule.Header.Type
  public static var ListComponent: SendbirdUIKit.SBUUserListModule.List.Type
}
extension SendbirdUIKit.SBUUserListModule.Header {
  @objc @_Concurrency.MainActor(unsafe) public static var LeftBarButton: SendbirdUIKit.SBUBarButtonItem.Type
  @objc @_Concurrency.MainActor(unsafe) public static var TitleView: SendbirdUIKit.SBUNavigationTitleView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var RightBarButton: SendbirdUIKit.SBUBarButtonItem.Type
}
extension SendbirdUIKit.SBUUserListModule.List {
  @objc @_Concurrency.MainActor(unsafe) public static var EmptyView: SendbirdUIKit.SBUEmptyView.Type
  @objc @_Concurrency.MainActor(unsafe) public static var UserCell: SendbirdUIKit.SBUUserCell.Type
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUUserListViewController : SendbirdUIKit.SBUBaseViewController, SendbirdUIKit.SBUUserListModuleHeaderDelegate, SendbirdUIKit.SBUUserListModuleListDelegate, SendbirdUIKit.SBUUserListModuleListDataSource, SendbirdUIKit.SBUCommonViewModelDelegate, SendbirdUIKit.SBUUserProfileViewDelegate, SendbirdUIKit.SBUUserListViewModelDelegate, SendbirdUIKit.SBUUserListViewModelDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var headerComponent: SendbirdUIKit.SBUUserListModule.Header?
  @objc @_Concurrency.MainActor(unsafe) public var listComponent: SendbirdUIKit.SBUUserListModule.List?
  @objc @_Concurrency.MainActor(unsafe) public var userProfileView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUUserListTheme {
    get
    set
    _modify
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var componentTheme: SendbirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var viewModel: SendbirdUIKit.SBUUserListViewModel?
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendbirdChatSDK.BaseChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelURL: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelType: SendbirdChatSDK.ChannelType {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userList: [SendbirdUIKit.SBUUser] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var userListType: SendbirdUIKit.ChannelUserListType {
    get
  }
  @available(*, unavailable, renamed: "SBUUserListViewController(channelURL:type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUUserListViewController.init(channelURL:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) required public init(channel: SendbirdChatSDK.BaseChannel, users: [SendbirdUIKit.SBUUser]? = nil, userListType: SendbirdUIKit.ChannelUserListType = .members)
  @_Concurrency.MainActor(unsafe) required public init(channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType, users: [SendbirdUIKit.SBUUser]? = nil, userListType: SendbirdUIKit.ChannelUserListType = .members)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func createViewModel(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, channelType: SendbirdChatSDK.ChannelType = .group, users: [SendbirdUIKit.SBUUser]? = nil, type: SendbirdUIKit.ChannelUserListType)
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func showInviteUser()
  @objc @_Concurrency.MainActor(unsafe) open func showUserProfile(with user: SendbirdUIKit.SBUUser)
  @_Concurrency.MainActor(unsafe) override open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateTitleView titleView: UIKit.UIView?)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateLeftItem leftItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateRightItem rightItem: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateLeftItems leftItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didUpdateRightItems rightItems: [UIKit.UIBarButtonItem]?)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didTapLeftItem leftItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ headerComponent: SendbirdUIKit.SBUUserListModule.Header, didTapRightItem rightItem: UIKit.UIBarButtonItem)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, didDetectPreloadingPosition indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, didTapMoreMenuFor user: SendbirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, didTapUserProfileFor user: SendbirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func userListModuleDidSelectRetry(_ listComponent: SendbirdUIKit.SBUUserListModule.List)
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, usersInTableView tableView: UIKit.UITableView) -> [SendbirdUIKit.SBUUser]
  @objc @_Concurrency.MainActor(unsafe) open func userListModule(_ listComponent: SendbirdUIKit.SBUUserListModule.List, channelForTableView tableView: UIKit.UITableView) -> SendbirdChatSDK.BaseChannel?
  @objc @_Concurrency.MainActor(unsafe) open func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didReceiveError(_ error: SendbirdChatSDK.SBError?, isBlocker: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func didSelectMessage(userId: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) open func didSelectClose()
  @objc @_Concurrency.MainActor(unsafe) open func userListViewModel(_ viewModel: SendbirdUIKit.SBUUserListViewModel, didChangeUsers users: [SendbirdUIKit.SBUUser], needsToReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func userListViewModel(_ viewModel: SendbirdUIKit.SBUUserListViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  @objc @_Concurrency.MainActor(unsafe) open func userListViewModel(_ viewModel: SendbirdUIKit.SBUUserListViewModel, shouldDismissForUserList channel: SendbirdChatSDK.BaseChannel?)
  @objc @_Concurrency.MainActor(unsafe) open func userListViewModel(_ viewModel: SendbirdUIKit.SBUUserListViewModel, nextUserListForChannel channel: SendbirdChatSDK.BaseChannel?) -> [SendbirdUIKit.SBUUser]?
}
public protocol SBUUserListViewModelDelegate : SendbirdUIKit.SBUCommonViewModelDelegate {
  func userListViewModel(_ viewModel: SendbirdUIKit.SBUUserListViewModel, didChangeUsers users: [SendbirdUIKit.SBUUser], needsToReload: Swift.Bool)
  func userListViewModel(_ viewModel: SendbirdUIKit.SBUUserListViewModel, didChangeChannel channel: SendbirdChatSDK.BaseChannel?, withContext context: SendbirdChatSDK.MessageContext)
  func userListViewModel(_ viewModel: SendbirdUIKit.SBUUserListViewModel, shouldDismissForUserList channel: SendbirdChatSDK.BaseChannel?)
}
public protocol SBUUserListViewModelDataSource : AnyObject {
  func userListViewModel(_ viewModel: SendbirdUIKit.SBUUserListViewModel, nextUserListForChannel channel: SendbirdChatSDK.BaseChannel?) -> [SendbirdUIKit.SBUUser]?
}
@objc open class SBUUserListViewModel : ObjectiveC.NSObject {
  weak public var delegate: (any SendbirdUIKit.SBUUserListViewModelDelegate)?
  weak public var dataSource: (any SendbirdUIKit.SBUUserListViewModelDataSource)?
  public var channel: SendbirdChatSDK.BaseChannel? {
    get
  }
  public var channelURL: Swift.String? {
    get
  }
  public var channelType: SendbirdChatSDK.ChannelType {
    get
  }
  @SendbirdUIKit.SBUAtomic public var userList: [SendbirdUIKit.SBUUser] {
    get
  }
  public var memberListQuery: SendbirdChatSDK.MemberListQuery?
  public var operatorListQuery: SendbirdChatSDK.OperatorListQuery?
  public var mutedMemberListQuery: SendbirdChatSDK.MemberListQuery?
  public var mutedParticipantListQuery: SendbirdChatSDK.MutedUserListQuery?
  public var bannedUserListQuery: SendbirdChatSDK.BannedUserListQuery?
  public var participantListQuery: SendbirdChatSDK.ParticipantListQuery?
  public var userListType: SendbirdUIKit.ChannelUserListType {
    get
  }
  required public init(channel: SendbirdChatSDK.BaseChannel? = nil, channelURL: Swift.String? = nil, channelType: SendbirdChatSDK.ChannelType = .group, users: [SendbirdUIKit.SBUUser]? = nil, userListType: SendbirdUIKit.ChannelUserListType, memberListQuery: SendbirdChatSDK.MemberListQuery? = nil, operatorListQuery: SendbirdChatSDK.OperatorListQuery? = nil, mutedMemberListQuery: SendbirdChatSDK.MemberListQuery? = nil, mutedParticipantListQuery: SendbirdChatSDK.MutedUserListQuery? = nil, bannedUserListQuery: SendbirdChatSDK.BannedUserListQuery? = nil, participantListQuery: SendbirdChatSDK.ParticipantListQuery? = nil, delegate: (any SendbirdUIKit.SBUUserListViewModelDelegate)? = nil, dataSource: (any SendbirdUIKit.SBUUserListViewModelDataSource)? = nil)
  @objc deinit
  public func loadChannel(channelURL: Swift.String, type: SendbirdChatSDK.ChannelType)
  public func loadNextUserList(reset: Swift.Bool, users: [SendbirdUIKit.SBUUser]? = nil)
  public func preLoadNextUserList(indexPath: Foundation.IndexPath)
  public func resetUserList(channel: SendbirdChatSDK.BaseChannel? = nil)
  public func hasNext() -> Swift.Bool
  public func resetQuery()
  public func registerAsOperator(user: SendbirdUIKit.SBUUser)
  public func unregisterOperator(user: SendbirdUIKit.SBUUser)
  public func mute(user: SendbirdUIKit.SBUUser)
  public func unmute(user: SendbirdUIKit.SBUUser)
  public func ban(user: SendbirdUIKit.SBUUser)
  public func unban(user: SendbirdUIKit.SBUUser)
}
extension SendbirdUIKit.SBUUserListViewModel : SendbirdChatSDK.BaseChannelDelegate {
  @objc dynamic public func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasMuted user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic public func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnmuted user: SendbirdChatSDK.User)
  @objc dynamic public func channelDidUpdateOperators(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic public func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic public func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnbanned user: SendbirdChatSDK.User)
  @objc dynamic public func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
}
extension SendbirdUIKit.SBUUserListViewModel : SendbirdChatSDK.GroupChannelDelegate {
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
}
extension SendbirdUIKit.SBUUserListViewModel : SendbirdChatSDK.OpenChannelDelegate {
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.OpenChannel, userDidExit user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.OpenChannel, userDidEnter user: SendbirdChatSDK.User)
}
@_inheritsConvenienceInitializers public class SBUUserMentionConfiguration : SendbirdUIKit.SBUMentionConfiguration {
  public var trigger: Swift.String {
    get
  }
  final public let debounceTime: Swift.Double
  final public let delimiter: Swift.String
  public var mentionLimit: Swift.Int
  public var suggestionLimit: Swift.Int
  public var isCustomUserListUsed: Swift.Bool
  override public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUUserMessageCell : SendbirdUIKit.SBUContentBaseMessageCell, SendbirdUIKit.SBUUserMessageTextViewDelegate, SendbirdUIKit.SBUSuggestedReplyViewDelegate, SendbirdUIKit.SBUMessageFormViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var messageTextView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userMessage: SendbirdChatSDK.UserMessage? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var additionContainerView: SendbirdUIKit.SBUSelectableStackView {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var webView: SendbirdUIKit.SBUMessageWebView
  @objc @_Concurrency.MainActor(unsafe) public var shouldHideSuggestedReplies: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var suggestedReplyView: SendbirdUIKit.SBUSuggestedReplyView? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var shouldHideFormTypeMessage: Swift.Bool {
    get
  }
  @objc @available(*, deprecated, message: "This method is deprecated in 3.27.0.")
  @_Concurrency.MainActor(unsafe) public var formViews: [SendbirdUIKit.SBUFormView]? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageFormView: SendbirdUIKit.SBUMessageFormView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var extendedMessagePayloadCustomViewFactory: (any SendbirdUIKit.SBUExtendedMessagePayloadCustomViewFactoryInternal.Type)? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) override open func configure(with configuration: SendbirdUIKit.SBUBaseMessageCellParams)
  @available(*, deprecated, renamed: "configure(with:)")
  @_Concurrency.MainActor(unsafe) open func configure(_ message: SendbirdChatSDK.UserMessage, hideDateView: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition, receiptState: SendbirdUIKit.SBUMessageReceiptState?, useReaction: Swift.Bool)
  @available(*, deprecated, renamed: "configure(with:)")
  @_Concurrency.MainActor(unsafe) open func configure(_ message: SendbirdChatSDK.BaseMessage, hideDateView: Swift.Bool, receiptState: SendbirdUIKit.SBUMessageReceiptState?, groupPosition: SendbirdUIKit.MessageGroupPosition, withTextView: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override open func configure(highlightInfo: SendbirdUIKit.SBUHighlightMessageInfo?)
  @_Concurrency.MainActor(unsafe) @objc override public func resetMainContainerViewLayer()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onTapWebview(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func updateSuggestedReplyView(with options: [Swift.String]?)
  @objc @_Concurrency.MainActor(unsafe) open func createSuggestedReplyView() -> SendbirdUIKit.SBUSuggestedReplyView
  @objc @available(*, deprecated, message: "This method is deprecated in 3.27.0.")
  @_Concurrency.MainActor(unsafe) public func updateFormView(with message: SendbirdChatSDK.BaseMessage?) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func updateMessageFormView(with message: SendbirdChatSDK.BaseMessage?) -> Swift.Bool
  @objc @available(*, deprecated, message: "This method is deprecated in 3.27.0.")
  @_Concurrency.MainActor(unsafe) open func createFormView() -> SendbirdUIKit.SBUFormView
  @objc @_Concurrency.MainActor(unsafe) open func createMessageFormView() -> SendbirdUIKit.SBUMessageFormView
  @objc @available(*, deprecated, message: "`updateMessageTemplate` has been deprecated since 3.27.2.")
  @_Concurrency.MainActor(unsafe) public func updateMessageTemplate()
  @objc @_Concurrency.MainActor(unsafe) open func userMessageTextView(_ textView: SendbirdUIKit.SBUUserMessageTextView, didTapMention user: SendbirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func suggestedReplyView(_ view: SendbirdUIKit.SBUSuggestedReplyView, didSelectOption optionView: SendbirdUIKit.SBUSuggestedReplyOptionView)
  @objc @available(*, deprecated, message: "This method is deprecated in 3.27.0.")
  @_Concurrency.MainActor(unsafe) public func formView(_ view: SendbirdUIKit.SBUFormView, didSubmit form: SendbirdChatSDK.MessageForm)
  @objc @_Concurrency.MainActor(unsafe) public func messageFormView(_ view: SendbirdUIKit.SBUMessageFormView, didSubmit form: SendbirdChatSDK.MessageForm)
  @objc @_Concurrency.MainActor(unsafe) public func messageFormView(_ view: SendbirdUIKit.SBUMessageFormView, didUpdateValidationStatus status: [Swift.Int64 : Swift.Bool])
  @objc @_Concurrency.MainActor(unsafe) public func messageFormView(_ view: SendbirdUIKit.SBUMessageFormView, didUpdateViewFrame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class SBUUserMessageCellParams : SendbirdUIKit.SBUBaseMessageCellParams {
  public var userMessage: SendbirdChatSDK.UserMessage? {
    get
  }
  final public let useReaction: Swift.Bool
  final public let withTextView: Swift.Bool
  final public let enableEmojiLongPress: Swift.Bool
  final public let shouldHideSuggestedReplies: Swift.Bool
  final public let shouldHideFormTypeMessage: Swift.Bool
  public init(message: SendbirdChatSDK.UserMessage, hideDateView: Swift.Bool, useMessagePosition: Swift.Bool, groupPosition: SendbirdUIKit.MessageGroupPosition = .none, receiptState: SendbirdUIKit.SBUMessageReceiptState = .none, useReaction: Swift.Bool = false, withTextView: Swift.Bool, isThreadMessage: Swift.Bool = false, joinedAt: Swift.Int64 = 0, messageOffsetTimestamp: Swift.Int64 = 0, shouldHideSuggestedReplies: Swift.Bool = true, shouldHideFormTypeMessage: Swift.Bool = true, enableEmojiLongPress: Swift.Bool = true)
  @objc deinit
}
public protocol SBUUserMessageTextViewDelegate : AnyObject {
  func userMessageTextView(_ textView: SendbirdUIKit.SBUUserMessageTextView, didTapMention user: SendbirdUIKit.SBUUser)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUUserMessageTextView : SendbirdUIKit.SBUView {
  public struct Metric {
    public static var textLeftRightMargin: CoreFoundation.CGFloat
    public static var textTopDownMargin: CoreFoundation.CGFloat
    public static var textMaxWidth: CoreFoundation.CGFloat
    public static var textMinHeight: CoreFoundation.CGFloat
    public static var textMinWidth: CoreFoundation.CGFloat
    public static var viewCornerRadius: CoreFoundation.CGFloat
    public static var viewBorderWidth: CoreFoundation.CGFloat
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var textView: SendbirdUIKit.SBULinkClickableTextView
  @_Concurrency.MainActor(unsafe) public var channelType: SendbirdChatSDK.ChannelType
  @_Concurrency.MainActor(unsafe) public var isWebType: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var mentionManager: SendbirdUIKit.SBUMentionManager?
  @_Concurrency.MainActor(unsafe) public var removeMargin: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var needsToRemoveMargin: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUUserMessageTextViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var textTopConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var textBottomConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var textLeftConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var textRightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public init(channelType: SendbirdChatSDK.ChannelType = .group, removeMargin: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) open func updateSideConstraint()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(model: SendbirdUIKit.SBUUserMessageTextViewModel)
  @objc deinit
}
extension SendbirdUIKit.SBUUserMessageTextView : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
}
public struct SBUUserMessageTextViewModel {
  public var hasMentionedMessage: Swift.Bool {
    get
  }
  public init(message: SendbirdChatSDK.BaseMessage?, position: SendbirdUIKit.MessagePosition = .right, text: Swift.String? = nil, font: UIKit.UIFont? = nil, textColor: UIKit.UIColor? = nil, isEdited: Swift.Bool? = nil, isOverlay: Swift.Bool = false, highlightKeyword: Swift.String? = nil, isMarkdownEnabled: Swift.Bool = false)
  @available(*, deprecated, renamed: "hasMentionedMessage")
  public func haveMentionedMessage() -> Swift.Bool
  public func addhighlightIfNeeded(with attributedString: Foundation.NSMutableAttributedString)
  public func addMentionedUserHighlightIfNeeded(with attributedString: Foundation.NSMutableAttributedString, mentionedList: [SendbirdUIKit.SBUMention]?)
  public func addEditedStateIfNeeded(with attributedString: Foundation.NSMutableAttributedString)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUUserNameView : SendbirdUIKit.SBUView {
  @_Concurrency.MainActor(unsafe) public var usernameColor: UIKit.UIColor?
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendbirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var button: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public var username: Swift.String
  @_Concurrency.MainActor(unsafe) public var leftMargin: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var buttonLeftConstraint: UIKit.NSLayoutConstraint? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(username: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "UserNameView(username:)")
  @_Concurrency.MainActor(unsafe) required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateStyles()
  @_Concurrency.MainActor(unsafe) open func configure(username: Swift.String, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setUsernameColor(_ color: UIKit.UIColor)
  @objc deinit
}
public protocol SBUUserProfileViewDelegate : AnyObject {
  func didSelectClose()
  func didSelectMessage(userId: Swift.String?)
}
public protocol SBUUserProfileViewProtocol {
  func setupViews()
  func setupStyles()
  func show(baseView: UIKit.UIView, user: SendbirdUIKit.SBUUser?)
  func show(baseView: UIKit.UIView, user: SendbirdUIKit.SBUUser?, isOpenChannel: Swift.Bool)
  func dismiss()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class SBUUserProfileView : UIKit.UIView, SendbirdUIKit.SBUUserProfileViewProtocol {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendbirdUIKit.SBUUserProfileViewDelegate)? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var user: SendbirdUIKit.SBUUser? {
    get
  }
  @SendbirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendbirdUIKit.SBUUserProfileTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var baseView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var profileImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var userNameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var menuStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var largeMessageButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var separatorView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var userIdTitleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var userIdLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var backgroundCloseButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isMenuStackViewHidden: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) required public init(delegate: (any SendbirdUIKit.SBUUserProfileViewDelegate)?)
  @available(*, unavailable, renamed: "SBUUserProfileView.init(delegate:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupViews()
  @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func onClickClose()
  @objc @_Concurrency.MainActor(unsafe) open func onClickMessage()
  @_Concurrency.MainActor(unsafe) open func show(baseView: UIKit.UIView, user: SendbirdUIKit.SBUUser?)
  @_Concurrency.MainActor(unsafe) open func show(baseView: UIKit.UIView, user: SendbirdUIKit.SBUUser?, isOpenChannel: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func dismiss()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUUtils {
  public static func getFileType(by fileMessage: SendbirdChatSDK.FileMessage) -> SendbirdUIKit.SBUMessageFileType
  public static func getFileType(by type: Swift.String) -> SendbirdUIKit.SBUMessageFileType
  @available(*, deprecated, renamed: "getFileTypePreviewString(by:)")
  public static func getFileTypeString(by fileType: Swift.String) -> Swift.String
  public static func getFileTypePreviewString(by fileType: Swift.String) -> Swift.String
  public static func generateChannelName(channel: SendbirdChatSDK.GroupChannel) -> Swift.String
  public static func getMimeType(url: Foundation.URL) -> Swift.String?
  @available(*, deprecated, renamed: "getReceiptState(of:in:)")
  public static func getReceiptState(channel: SendbirdChatSDK.GroupChannel, message: SendbirdChatSDK.BaseMessage) -> SendbirdUIKit.SBUMessageReceiptState
  @available(*, unavailable, renamed: "getReceiptState(of:in:)", message: "It returns nil when th channel is super group channel or broadcast channel. Please set the value to `SBUMessageReceitState.notUsed`.")
  public static func getReceiptStateIfExists(for channel: SendbirdChatSDK.GroupChannel, message: SendbirdChatSDK.BaseMessage) -> SendbirdUIKit.SBUMessageReceiptState?
  public static func getReceiptState(of message: SendbirdChatSDK.BaseMessage, in channel: SendbirdChatSDK.GroupChannel) -> SendbirdUIKit.SBUMessageReceiptState
  public static func isValid(coverURL: Swift.String) -> Swift.Bool
  public static func isValid(channelName: Swift.String, type: SendbirdChatSDK.ChannelType = .group) -> Swift.Bool
  public static func emptyTitleForRowEditAction(for size: CoreFoundation.CGSize) -> Swift.String
  @objc deinit
}
extension SendbirdUIKit.SBUUtils {
  public static func isRTLCharacter(with string: Swift.String?) -> Swift.Bool
  public static var rtlCharacterSet: Foundation.CharacterSet
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUVerticalSuggestedReplyView : SendbirdUIKit.SBUSuggestedReplyView {
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var topSpacer: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension SendbirdUIKit.SBUView {
  @available(*, unavailable, renamed: "setupLayouts()")
  @_Concurrency.MainActor(unsafe) public func setupAutolayout()
  @available(*, unavailable, renamed: "updateLayouts()")
  @_Concurrency.MainActor(unsafe) public func updateAutolayout()
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "init(frame:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension SendbirdUIKit.SBUView : SendbirdUIKit.SBUViewLifeCycle {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateLayouts()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func setupActions()
}
@_hasMissingDesignatedInitializers public class SBUViewControllerSet {
  public static var GroupChannelListViewController: SendbirdUIKit.SBUGroupChannelListViewController.Type
  public static var OpenChannelListViewController: SendbirdUIKit.SBUOpenChannelListViewController.Type
  public static var GroupChannelViewController: SendbirdUIKit.SBUGroupChannelViewController.Type
  public static var OpenChannelViewController: SendbirdUIKit.SBUOpenChannelViewController.Type
  public static var FeedNotificationChannelViewController: SendbirdUIKit.SBUFeedNotificationChannelViewController.Type
  public static var ChatNotificationChannelViewController: SendbirdUIKit.SBUChatNotificationChannelViewController.Type
  public static var CreateChannelViewController: SendbirdUIKit.SBUCreateChannelViewController.Type
  public static var CreateOpenChannelViewController: SendbirdUIKit.SBUCreateOpenChannelViewController.Type
  public static var InviteUserViewController: SendbirdUIKit.SBUInviteUserViewController.Type
  public static var GroupChannelRegisterOperatorViewController: SendbirdUIKit.SBURegisterOperatorViewController.Type
  public static var OpenChannelRegisterOperatorViewController: SendbirdUIKit.SBURegisterOperatorViewController.Type
  public static var GroupUserListViewController: SendbirdUIKit.SBUUserListViewController.Type
  public static var OpenUserListViewController: SendbirdUIKit.SBUUserListViewController.Type
  public static var GroupChannelPushSettingsViewController: SendbirdUIKit.SBUGroupChannelPushSettingsViewController.Type
  public static var GroupChannelSettingsViewController: SendbirdUIKit.SBUGroupChannelSettingsViewController.Type
  public static var OpenChannelSettingsViewController: SendbirdUIKit.SBUOpenChannelSettingsViewController.Type
  public static var GroupModerationsViewController: SendbirdUIKit.SBUModerationsViewController.Type
  public static var OpenModerationsViewController: SendbirdUIKit.SBUModerationsViewController.Type
  public static var MessageSearchViewController: SendbirdUIKit.SBUMessageSearchViewController.Type
  public static var MessageThreadViewController: SendbirdUIKit.SBUMessageThreadViewController.Type
  @objc deinit
}
extension SendbirdUIKit.SBUViewControllerSet {
  @available(*, unavailable, message: "This property had been seperated to `GroupChannelRegisterOperatorViewController` and `OpenChannelRegisterOperatorViewController`")
  public static var RegisterOperatorViewController: SendbirdUIKit.SBURegisterOperatorViewController.Type
  @available(*, unavailable, message: "This property had been seperated to `GroupUserListViewController` and `OpenUserListViewController`")
  public static var UserListViewController: SendbirdUIKit.SBUUserListViewController.Type
  @available(*, unavailable, message: "This property had been seperated to `GroupModerationsViewController` and `OpenModerationsViewController`")
  public static var ModerationsViewController: SendbirdUIKit.SBUModerationsViewController.Type
  @available(*, unavailable, message: "This property had renamed `InviteUserViewController`")
  public static var InviteUserViewContoller: SendbirdUIKit.SBUInviteUserViewController.Type
}
@objc public protocol SBUViewLifeCycle {
  @objc func setupViews()
  @objc func setupStyles()
  @objc func updateStyles()
  @objc func setupLayouts()
  @objc func updateLayouts()
  @objc func setupActions()
}
public protocol SBUCommonViewModelDelegate : SendbirdUIKit.SBUCommonDelegate {
  func connectionStateDidChange(_ isConnected: Swift.Bool)
  func shouldUpdateLoadingState(_ isLoading: Swift.Bool)
}
extension SendbirdUIKit.SBUCommonViewModelDelegate {
  public func connectionStateDidChange(_ isConnected: Swift.Bool)
  public func didReceiveError(_ error: SendbirdChatSDK.SBError?)
}
@_hasMissingDesignatedInitializers public class SBUViewModelSet {
  public static var GroupChannelListViewModel: SendbirdUIKit.SBUGroupChannelListViewModel.Type
  public static var OpenChannelListViewModel: SendbirdUIKit.SBUOpenChannelListViewModel.Type
  public static var GroupChannelViewModel: SendbirdUIKit.SBUGroupChannelViewModel.Type
  public static var OpenChannelViewModel: SendbirdUIKit.SBUOpenChannelViewModel.Type
  public static var CreateGroupChannelViewModel: SendbirdUIKit.SBUCreateChannelViewModel.Type
  public static var CreateOpenChannelViewModel: SendbirdUIKit.SBUCreateOpenChannelViewModel.Type
  public static var InviteUserViewModel: SendbirdUIKit.SBUInviteUserViewModel.Type
  public static var GroupChannelRegisterOperatorViewModel: SendbirdUIKit.SBURegisterOperatorViewModel.Type
  public static var OpenChannelRegisterOperatorViewModel: SendbirdUIKit.SBURegisterOperatorViewModel.Type
  public static var GroupUserListViewModel: SendbirdUIKit.SBUUserListViewModel.Type
  public static var OpenUserListViewModel: SendbirdUIKit.SBUUserListViewModel.Type
  public static var GroupChannelPushSettingsViewModel: SendbirdUIKit.SBUGroupChannelPushSettingsViewModel.Type
  public static var GroupChannelSettingsViewModel: SendbirdUIKit.SBUGroupChannelSettingsViewModel.Type
  public static var OpenChannelSettingsViewModel: SendbirdUIKit.SBUOpenChannelSettingsViewModel.Type
  public static var GroupModerationsViewModel: SendbirdUIKit.SBUModerationsViewModel.Type
  public static var OpenModerationsViewModel: SendbirdUIKit.SBUModerationsViewModel.Type
  public static var MessageSearchViewModel: SendbirdUIKit.SBUMessageSearchViewModel.Type
  public static var MessageThreadViewModel: SendbirdUIKit.SBUMessageThreadViewModel.Type
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUVoiceContentView : SendbirdUIKit.SBUBaseFileContentView {
  @_Concurrency.MainActor(unsafe) public var progressView: UIKit.UIProgressView
  @_Concurrency.MainActor(unsafe) public var progressTimeLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var statusButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public var voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupLayouts()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(message: SendbirdChatSDK.FileMessage, position: SendbirdUIKit.MessagePosition, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class SBUVoiceFileInfo : ObjectiveC.NSObject {
  public static func createVoiceFileInfo(with message: SendbirdChatSDK.FileMessage) -> SendbirdUIKit.SBUVoiceFileInfo?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBUVoiceMessageConfiguration {
  @available(*, deprecated, renamed: "SendbirdUI.config.groupChannel.channel.isVoiceMessageEnabled")
  public var isVoiceMessageEnabled: Swift.Bool {
    get
    set
  }
  public var player: SendbirdUIKit.SBUVoiceMessageConfiguration.Player
  @_hasMissingDesignatedInitializers public class Player {
    @objc deinit
  }
  public var recorder: SendbirdUIKit.SBUVoiceMessageConfiguration.Recorder
  @_hasMissingDesignatedInitializers public class Recorder {
    public var settings: [Swift.String : Swift.Int]
    @objc deinit
  }
  @objc deinit
}
public protocol SBUVoiceMessageInputViewDelegate : AnyObject {
  func voiceMessageInputViewDidTapCacel(_ inputView: SendbirdUIKit.SBUVoiceMessageInputView)
  func voiceMessageInputView(_ inputView: SendbirdUIKit.SBUVoiceMessageInputView, willStartToRecord voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
  func voiceMessageInputView(_ inputView: SendbirdUIKit.SBUVoiceMessageInputView, didTapSend voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
}
@objc @_inheritsConvenienceInitializers open class SBUVoiceMessageInputView : ObjectiveC.NSObject, SendbirdUIKit.SBUViewLifeCycle {
  public enum Status {
    case none
    case recording
    case finishRecording
    case playing
    case pause
    case finishPlaying
    public static func == (a: SendbirdUIKit.SBUVoiceMessageInputView.Status, b: SendbirdUIKit.SBUVoiceMessageInputView.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @SendbirdUIKit.SBUThemeWrapper public var theme: SendbirdUIKit.SBUVoiceMessageInputTheme {
    get
    set
    _modify
  }
  public var canvasView: UIKit.UIView {
    get
  }
  public var baseView: UIKit.UIView {
    get
  }
  public var overlayView: UIKit.UIButton {
    get
  }
  public var contentView: UIKit.UIView {
    get
  }
  public var progressContainerView: UIKit.UIView {
    get
  }
  public var progressView: UIKit.UIProgressView {
    get
  }
  public var progressTimeLabel: UIKit.UILabel {
    get
  }
  public var progressRecordingIcon: UIKit.UIImageView {
    get
  }
  public var cancelButton: UIKit.UIButton {
    get
  }
  public var statusButton: UIKit.UIButton {
    get
  }
  public var sendButton: UIKit.UIButton {
    get
  }
  public var voicePlayer: SendbirdUIKit.SBUVoicePlayer? {
    get
  }
  public var voiceRecorder: SendbirdUIKit.SBUVoiceRecorder? {
    get
  }
  public var voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo? {
    get
  }
  @objc required override dynamic public init()
  @objc deinit
  @objc open func setupViews()
  @objc open func setupLayouts()
  @objc open func updateLayouts()
  @objc open func setupStyles()
  @objc open func updateStyles()
  @objc open func setupActions()
}
extension SendbirdUIKit.SBUVoiceMessageInputView : SendbirdUIKit.SBUVoiceRecorderDelegate {
  public func voiceRecorderDidReceiveError(_ recorder: SendbirdUIKit.SBUVoiceRecorder, errorStatus: SendbirdUIKit.VoiceRecorderErrorStatus)
  public func voiceRecorderDidUpdateRecordPermission(_ recorder: SendbirdUIKit.SBUVoiceRecorder, granted: Swift.Bool)
  public func voiceRecorderDidPrepare(_ recorder: SendbirdUIKit.SBUVoiceRecorder, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
  public func voiceRecorderDidUpdateRecordTime(_ recorder: SendbirdUIKit.SBUVoiceRecorder, time: Foundation.TimeInterval)
  public func voiceRecorderDidFinishRecord(_ recorder: SendbirdUIKit.SBUVoiceRecorder, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
}
extension SendbirdUIKit.SBUVoiceMessageInputView : SendbirdUIKit.SBUVoicePlayerDelegate {
  public func voicePlayerDidReceiveError(_ player: SendbirdUIKit.SBUVoicePlayer, errorStatus: SendbirdUIKit.SBUVoicePlayerErrorStatus)
  public func voicePlayerDidStart(_ player: SendbirdUIKit.SBUVoicePlayer)
  public func voicePlayerDidPause(_ player: SendbirdUIKit.SBUVoicePlayer, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo?)
  public func voicePlayerDidStop(_ player: SendbirdUIKit.SBUVoicePlayer)
  public func voicePlayerDidReset(_ player: SendbirdUIKit.SBUVoicePlayer)
  public func voicePlayerDidUpdatePlayTime(_ player: SendbirdUIKit.SBUVoicePlayer, time: Foundation.TimeInterval)
}
public enum SBUVoicePlayerErrorStatus : Swift.Int {
  case none
  case playerInitialization
  case playerPreparation
  case play
  case pause
  case playerDecodeError
  case finishPlaying
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SBUVoicePlayerDelegate : AnyObject {
  func voicePlayerDidReceiveError(_ player: SendbirdUIKit.SBUVoicePlayer, errorStatus: SendbirdUIKit.SBUVoicePlayerErrorStatus)
  func voicePlayerDidStart(_ player: SendbirdUIKit.SBUVoicePlayer)
  func voicePlayerDidPause(_ player: SendbirdUIKit.SBUVoicePlayer, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo?)
  func voicePlayerDidStop(_ player: SendbirdUIKit.SBUVoicePlayer)
  func voicePlayerDidReset(_ player: SendbirdUIKit.SBUVoicePlayer)
  func voicePlayerDidUpdatePlayTime(_ player: SendbirdUIKit.SBUVoicePlayer, time: Foundation.TimeInterval)
}
@objc public class SBUVoicePlayer : ObjectiveC.NSObject, AVFAudio.AVAudioPlayerDelegate {
  public enum VoicePlayerStatus : Swift.Int {
    case none
    case prepared
    case playing
    case paused
    case stopped
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var status: SendbirdUIKit.SBUVoicePlayer.VoicePlayerStatus {
    get
  }
  public var progressTimer: Foundation.Timer? {
    get
  }
  public init(delegate: (any SendbirdUIKit.SBUVoicePlayerDelegate)?)
  public func configure(voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
  @objc deinit
  public func play(fromTime time: Foundation.TimeInterval = 0)
  public func pause()
  public func stop()
  public func resetPlayer()
  public func updatePlaybackRate(_ rate: Swift.Float)
  @objc public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully success: Swift.Bool)
  @objc public func audioPlayerDecodeErrorDidOccur(_ player: AVFAudio.AVAudioPlayer, error: (any Swift.Error)?)
}
public enum VoiceRecorderStatus : Swift.Int {
  case none
  case prepared
  case recording
  case completed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VoiceRecorderErrorStatus : Swift.Int {
  case none
  case fileCreation
  case audioSessionSetting
  case recorderPreparation
  case record
  case finishRecording
  case recorderEncodeError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SBUVoiceRecorderDelegate : AnyObject {
  func voiceRecorderDidReceiveError(_ recorder: SendbirdUIKit.SBUVoiceRecorder, errorStatus: SendbirdUIKit.VoiceRecorderErrorStatus)
  func voiceRecorderDidPrepare(_ recorder: SendbirdUIKit.SBUVoiceRecorder, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
  func voiceRecorderDidUpdateRecordPermission(_ recorder: SendbirdUIKit.SBUVoiceRecorder, granted: Swift.Bool)
  func voiceRecorderDidUpdateRecordTime(_ recorder: SendbirdUIKit.SBUVoiceRecorder, time: Foundation.TimeInterval)
  func voiceRecorderDidFinishRecord(_ recorder: SendbirdUIKit.SBUVoiceRecorder, voiceFileInfo: SendbirdUIKit.SBUVoiceFileInfo)
}
@objc public class SBUVoiceRecorder : ObjectiveC.NSObject, AVFAudio.AVAudioRecorderDelegate {
  public var status: SendbirdUIKit.VoiceRecorderStatus {
    get
  }
  public var progressTimer: Foundation.Timer? {
    get
  }
  public init(delegate: (any SendbirdUIKit.SBUVoiceRecorderDelegate)?)
  @objc deinit
  @discardableResult
  public func record() -> Swift.Bool
  public func stop()
  public func resetRecorder()
  @objc public func audioRecorderDidFinishRecording(_ recorder: AVFAudio.AVAudioRecorder, successfully success: Swift.Bool)
  @objc public func audioRecorderEncodeErrorDidOccur(_ recorder: AVFAudio.AVAudioRecorder, error: (any Swift.Error)?)
}
@available(*, deprecated, renamed: "SendbirdUI")
public typealias SBUMain = SendbirdUIKit.SendbirdUI
extension SendbirdUIKit.SendbirdUI {
  @available(*, unavailable, renamed: "initialize(applicationId:startHandler:migrationStartHandler:completionHandler:)", message: "Using the `initialize(applicationId:startHandler:migrationStartHandler:completionHandler:)` function, and in the CompletionHandler, please proceed with the following procedure.")
  public static func initialize(applicationId: Swift.String)
  @available(*, deprecated, renamed: "initialize(applicationId:startHandler:migrationHandler:completionHandler:)")
  public static func initialize(applicationId: Swift.String, migrationStartHandler: @escaping (() -> Swift.Void), completionHandler: @escaping ((_ error: SendbirdChatSDK.SBError?) -> Swift.Void))
  @available(*, deprecated, renamed: "moveToChannel(channelURL:basedOnChannelList:messageListParams:)")
  public static func openChannel(channelUrl: Swift.String, basedOnChannelList: Swift.Bool = true, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  @available(*, deprecated, renamed: "connectIfNeeded(completionHandler:)")
  public static func connectionCheck(completionHandler: @escaping (_ user: SendbirdChatSDK.User?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class SendbirdUI {
  public static var config: SendbirdUIKit.SBUConfig
  public static func initialize(applicationId: Swift.String, startHandler: (() -> Swift.Void)? = nil, migrationHandler: (() -> Swift.Void)? = nil, completionHandler: @escaping ((_ error: SendbirdChatSDK.SBError?) -> Swift.Void))
  public static func initialize(applicationId: Swift.String, initParamsBuilder: ((_ params: SendbirdChatSDK.InitParams?) -> Swift.Void)?, startHandler: (() -> Swift.Void)? = nil, migrationHandler: (() -> Swift.Void)? = nil, completionHandler: @escaping ((_ error: SendbirdChatSDK.SBError?) -> Swift.Void))
  public static func connect(completionHandler: @escaping (_ user: SendbirdChatSDK.User?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
  public static func connectIfNeeded(needToUpdateExtraData: Swift.Bool = true, completionHandler: @escaping (_ user: SendbirdChatSDK.User?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
  public static func authenticateFeed(completionHandler: @escaping (_ user: SendbirdChatSDK.User?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
  public static func authenticateFeedIfNeeded(needToUpdateExtraData: Swift.Bool = true, completionHandler: @escaping (_ user: SendbirdChatSDK.User?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
  public static func updateUserInfo(completionHandler: @escaping (_ error: SendbirdChatSDK.SBError?) -> Swift.Void)
  public static func disconnect(completionHandler: (() -> Swift.Void)?)
  public static func updateUserInfo(nickname: Swift.String?, profileURL: Swift.String?, completionHandler: ((_ error: SendbirdChatSDK.SBError?) -> Swift.Void)?)
  public static func updateUserInfo(nickname: Swift.String?, profileImage: Foundation.Data?, completionHandler: ((_ error: SendbirdChatSDK.SBError?) -> Swift.Void)?)
  public static func updateUserInfo(params: SendbirdChatSDK.UserUpdateParams, completionHandler: ((_ error: SendbirdChatSDK.SBError?) -> Swift.Void)?)
  public static var shortVersion: Swift.String {
    get
  }
  public static var bundleShortVersion: Swift.String {
    get
  }
  public static func versionString() -> Swift.String?
  public static func registerPush(deviceToken: Foundation.Data, unique: Swift.Bool = false, completionHandler: @escaping (_ success: Swift.Bool) -> Swift.Void)
  public static func unregisterPushToken(completionHandler: @escaping (_ success: Swift.Bool) -> Swift.Void)
  public static func unregisterAllPushToken(completionHandler: @escaping (_ success: Swift.Bool) -> Swift.Void)
  public static func moveToChannel(channelURL: Swift.String, basedOnChannelList: Swift.Bool = true, messageListParams: SendbirdChatSDK.MessageListParams? = nil, channelType: SendbirdChatSDK.ChannelType = .group, rootViewController: UIKit.UIViewController? = nil)
  public static func findChannelListViewController(rootViewController: UIKit.UIViewController?, channelType: SendbirdChatSDK.ChannelType) -> UIKit.UIViewController?
  public static func findChannelViewController(rootViewController: UIKit.UIViewController?) -> UIKit.UIViewController?
  public static func findSearchViewController(rootViewController: UIKit.UIViewController?) -> UIKit.UIViewController?
  public static func createAndMoveToChannel(userIds: [Swift.String], messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  public static func createAndMoveToChannel(params: SendbirdChatSDK.GroupChannelCreateParams, messageListParams: SendbirdChatSDK.MessageListParams? = nil)
  public static func setLogLevel(_ type: SendbirdUIKit.LogType)
  public static func setLogLevel(_ types: [SendbirdUIKit.LogType])
  @objc deinit
}
extension SendbirdUIKit.SendbirdUI {
  public static func startChatWithAIBot(botId: Swift.String, isDistinct: Swift.Bool, errorHandler: ((_ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
}
extension SendbirdUIKit.SendbirdUI {
  public static func isRemoteNotificationAvailable() -> Swift.Bool
}
extension Swift.Sequence where Self.Element : Swift.Hashable {
  public func sbu_unique() -> [Self.Iterator.Element]
}
extension Swift.String {
  public func capitalizedFirstLetter() -> Swift.String
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var currentWindow: UIKit.UIWindow? {
    get
  }
}
extension UIKit.UIButton {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func loadImage(urlString: Swift.String, placeholder: UIKit.UIImage? = nil, errorImage: UIKit.UIImage? = nil, tintColor: UIKit.UIColor? = nil, for state: UIKit.UIControl.State, cacheKey: Swift.String? = nil, subPath: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil) -> Foundation.URLSessionTask?
}
extension UIKit.UIColor {
  public static func sbu_from(image: UIKit.UIImage, imageView: UIKit.UIImageView? = nil, size: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor) -> UIKit.UIColor
}
extension UIKit.UIImage {
  public func sbu_with(tintColor: UIKit.UIColor?) -> UIKit.UIImage
  public func sbu_with(tintColor: UIKit.UIColor?, forTemplate: Swift.Bool) -> UIKit.UIImage
  public func sbu_convertToData() -> Foundation.Data?
  public func sbu_resize(with targetSize: CoreFoundation.CGSize) -> UIKit.UIImage
  public func sbu_withBackground(color: UIKit.UIColor, margin: CoreFoundation.CGFloat, circle: Swift.Bool = false) -> UIKit.UIImage
  public static func sbu_from(color: UIKit.UIColor) -> UIKit.UIImage
}
extension UIKit.UIImageView {
  public typealias LoadCompletion = ((UIKit.UIImageView.LoadResult) -> Swift.Void)
  public enum ImageOption {
    case imageToThumbnail
    case original
    case videoURLToImage
    public static func == (a: UIKit.UIImageView.ImageOption, b: UIKit.UIImageView.ImageOption) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum LoadStatus {
    case placeholder
    case success
    case successFromCache
    case failure
    public static func == (a: UIKit.UIImageView.LoadStatus, b: UIKit.UIImageView.LoadStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LoadResult {
  }
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func loadImage(urlString: Swift.String, placeholder: UIKit.UIImage? = nil, errorImage: UIKit.UIImage? = nil, option: UIKit.UIImageView.ImageOption = .original, thumbnailSize: CoreFoundation.CGSize? = nil, tintColor: UIKit.UIColor? = nil, cacheKey: Swift.String? = nil, subPath: Swift.String = "", completion: ((Swift.Bool) -> Swift.Void)? = nil) -> Foundation.URLSessionTask?
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func loadImage(urlString: Swift.String, placeholder: UIKit.UIImage? = nil, errorImage: UIKit.UIImage? = nil, option: UIKit.UIImageView.ImageOption = .original, thumbnailSize: CoreFoundation.CGSize? = nil, tintColor: UIKit.UIColor? = nil, cacheKey: Swift.String? = nil, subPath: Swift.String = "", autoset: Swift.Bool = true, completion: UIKit.UIImageView.LoadCompletion? = nil) -> Foundation.URLSessionTask?
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open func sbu_setupNavigationBarAppearance(tintColor: UIKit.UIColor, shadowColor: UIKit.UIColor? = nil)
}
extension UIKit.UIStackView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setHStack(_ views: [UIKit.UIView?]) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setVStack(_ views: [UIKit.UIView?]) -> Self
  @_Concurrency.MainActor(unsafe) public func removeAllSubviews()
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public static func sbu_loadNib() -> UIKit.UINib
  @objc @_Concurrency.MainActor(unsafe) public static func sbu_loadViewFromNib() -> UIKit.UIView
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_fill(equalTo view: UIKit.UIView) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(equalTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil, useSafeArea: Swift.Bool = false) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_equalTo(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(greaterThanOrEqualTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil, useSafeArea: Swift.Bool = false) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_greater(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(lessThanOrEqualTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil, useSafeArea: Swift.Bool = false) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_less(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_multiplier(widthAnchor: UIKit.NSLayoutDimension? = nil, widthMultiplier: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutDimension? = nil, heightMultiplier: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_greaterThan(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_lessThan(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_v2(equalTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil, useSafeArea: Swift.Bool = false) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_equalTo_v2(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_v2(greaterThanOrEqualTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil, useSafeArea: Swift.Bool = false) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_greater_v2(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_v2(lessThanOrEqualTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil, useSafeArea: Swift.Bool = false) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_less_v2(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_v2(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_v2(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_multiplier_v2(widthAnchor: UIKit.NSLayoutDimension? = nil, widthMultiplier: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutDimension? = nil, heightMultiplier: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_greaterThan_v2(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_lessThan_v2(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> [UIKit.NSLayoutConstraint]
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static func setSemanticContentAttributeRecursively(view: UIKit.UIView, attribute: UIKit.UISemanticContentAttribute)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static func spacing(width: CoreFoundation.CGFloat = 0, height: CoreFoundation.CGFloat = 0, tag: Swift.Int? = nil) -> UIKit.UIView
}
@available(*, deprecated, renamed: "SBUDateFormatSet")
extension Foundation.Date.SBUDateFormat : Swift.Equatable {}
@available(*, deprecated, renamed: "SBUDateFormatSet")
extension Foundation.Date.SBUDateFormat : Swift.Hashable {}
extension SendbirdUIKit.SBUBottomSheetSnapPoint : Swift.Equatable {}
extension SendbirdUIKit.SBUBottomSheetSnapPoint : Swift.Hashable {}
@available(*, deprecated, renamed: "UserListType")
extension SendbirdUIKit.MemberListType : Swift.Equatable {}
@available(*, deprecated, renamed: "UserListType")
extension SendbirdUIKit.MemberListType : Swift.Hashable {}
@available(*, deprecated, renamed: "UserListType")
extension SendbirdUIKit.MemberListType : Swift.RawRepresentable {}
@available(*, deprecated, renamed: "ChannelUserListType")
extension SendbirdUIKit.ChannelMemberListType : Swift.Equatable {}
@available(*, deprecated, renamed: "ChannelUserListType")
extension SendbirdUIKit.ChannelMemberListType : Swift.Hashable {}
@available(*, deprecated, renamed: "ChannelUserListType")
extension SendbirdUIKit.ChannelMemberListType : Swift.RawRepresentable {}
extension SendbirdUIKit.ChannelCreationType : Swift.Equatable {}
extension SendbirdUIKit.ChannelCreationType : Swift.Hashable {}
extension SendbirdUIKit.ChannelCreationType : Swift.RawRepresentable {}
extension SendbirdUIKit.ChannelSettingItemType : Swift.Equatable {}
extension SendbirdUIKit.ChannelSettingItemType : Swift.Hashable {}
extension SendbirdUIKit.ChannelSettingItemType : Swift.RawRepresentable {}
extension SendbirdUIKit.OpenChannelSettingItemType : Swift.Equatable {}
extension SendbirdUIKit.OpenChannelSettingItemType : Swift.Hashable {}
extension SendbirdUIKit.OpenChannelSettingItemType : Swift.RawRepresentable {}
extension SendbirdUIKit.ModerationItemType : Swift.Equatable {}
extension SendbirdUIKit.ModerationItemType : Swift.Hashable {}
extension SendbirdUIKit.ModerationItemType : Swift.RawRepresentable {}
extension SendbirdUIKit.ChannelUserListType : Swift.Equatable {}
extension SendbirdUIKit.ChannelUserListType : Swift.Hashable {}
extension SendbirdUIKit.ChannelUserListType : Swift.RawRepresentable {}
extension SendbirdUIKit.ChannelInviteListType : Swift.Equatable {}
extension SendbirdUIKit.ChannelInviteListType : Swift.Hashable {}
extension SendbirdUIKit.ChannelInviteListType : Swift.RawRepresentable {}
extension SendbirdUIKit.ChannelPushSettingsSubType : Swift.Equatable {}
extension SendbirdUIKit.ChannelPushSettingsSubType : Swift.Hashable {}
extension SendbirdUIKit.ChannelPushSettingsSubType : Swift.RawRepresentable {}
extension SendbirdUIKit.EmptyViewType : Swift.Equatable {}
extension SendbirdUIKit.EmptyViewType : Swift.Hashable {}
extension SendbirdUIKit.EmptyViewType : Swift.RawRepresentable {}
extension SendbirdUIKit.MediaResourceType : Swift.Equatable {}
extension SendbirdUIKit.MediaResourceType : Swift.Hashable {}
extension SendbirdUIKit.MediaResourceType : Swift.RawRepresentable {}
extension SendbirdUIKit.ChannelEditType : Swift.Equatable {}
extension SendbirdUIKit.ChannelEditType : Swift.Hashable {}
extension SendbirdUIKit.ChannelEditType : Swift.RawRepresentable {}
extension SendbirdUIKit.MessagePosition : Swift.Equatable {}
extension SendbirdUIKit.MessagePosition : Swift.Hashable {}
extension SendbirdUIKit.MessagePosition : Swift.RawRepresentable {}
extension SendbirdUIKit.MessageGroupPosition : Swift.Equatable {}
extension SendbirdUIKit.MessageGroupPosition : Swift.Hashable {}
extension SendbirdUIKit.MessageGroupPosition : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUMessageFileType : Swift.Equatable {}
extension SendbirdUIKit.SBUMessageFileType : Swift.Hashable {}
extension SendbirdUIKit.SBUMessageFileType : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUMessageReceiptState : Swift.Equatable {}
extension SendbirdUIKit.SBUMessageReceiptState : Swift.Hashable {}
extension SendbirdUIKit.SBUMessageReceiptState : Swift.RawRepresentable {}
@available(*, deprecated, message: "Please refer to `setupMenuItems()` function in `SBUBaseChannelModule.List` or `SBUMenuSheetViewController`")
extension SendbirdUIKit.MessageEditItem : Swift.Equatable {}
@available(*, deprecated, message: "Please refer to `setupMenuItems()` function in `SBUBaseChannelModule.List` or `SBUMenuSheetViewController`")
extension SendbirdUIKit.MessageEditItem : Swift.Hashable {}
@available(*, deprecated, message: "Please refer to `setupMenuItems()` function in `SBUBaseChannelModule.List` or `SBUMenuSheetViewController`")
extension SendbirdUIKit.MessageEditItem : Swift.RawRepresentable {}
@available(*, deprecated, message: "Please refer to `setupMenuItems()` function in `SBUBaseChannelModule.List` or `SBUMenuSheetViewController`")
extension SendbirdUIKit.MessageMenuItem : Swift.Equatable {}
@available(*, deprecated, message: "Please refer to `setupMenuItems()` function in `SBUBaseChannelModule.List` or `SBUMenuSheetViewController`")
extension SendbirdUIKit.MessageMenuItem : Swift.Hashable {}
extension SendbirdUIKit.NewMessageInfoItemType : Swift.Equatable {}
extension SendbirdUIKit.NewMessageInfoItemType : Swift.Hashable {}
extension SendbirdUIKit.NewMessageInfoItemType : Swift.RawRepresentable {}
extension SendbirdUIKit.LogType : Swift.Equatable {}
extension SendbirdUIKit.LogType : Swift.Hashable {}
extension SendbirdUIKit.LogType : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUTypingIndicatorType : Swift.Equatable {}
extension SendbirdUIKit.SBUTypingIndicatorType : Swift.Hashable {}
extension SendbirdUIKit.SBUSuggestedRepliesRenderType : Swift.Equatable {}
extension SendbirdUIKit.SBUSuggestedRepliesRenderType : Swift.Hashable {}
extension SendbirdUIKit.SBUSuggestedRepliesDirection : Swift.Equatable {}
extension SendbirdUIKit.SBUSuggestedRepliesDirection : Swift.Hashable {}
extension SendbirdUIKit.SBUScrollPosition : Swift.Equatable {}
extension SendbirdUIKit.SBUScrollPosition : Swift.Hashable {}
extension SendbirdUIKit.SBUChannelType : Swift.Equatable {}
extension SendbirdUIKit.SBUChannelType : Swift.Hashable {}
@available(*, deprecated, message: "`SBUMessageContainerType` has been deprecated since 3.27.2.")
extension SendbirdUIKit.SBUMessageContainerType : Swift.Equatable {}
@available(*, deprecated, message: "`SBUMessageContainerType` has been deprecated since 3.27.2.")
extension SendbirdUIKit.SBUMessageContainerType : Swift.Hashable {}
@available(*, deprecated, message: "`SBUMessageContainerType` has been deprecated since 3.27.2.")
extension SendbirdUIKit.SBUMessageContainerType : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUFeedbackAnswer.Action : Swift.Equatable {}
extension SendbirdUIKit.SBUFeedbackAnswer.Action : Swift.Hashable {}
@available(*, unavailable, message: "Use `SendbirdChatSDK.Form`")
extension SendbirdUIKit.SBUForm.Field.InputTypeValue : Swift.Equatable {}
@available(*, unavailable, message: "Use `SendbirdChatSDK.Form`")
extension SendbirdUIKit.SBUForm.Field.InputTypeValue : Swift.Hashable {}
@available(*, unavailable, message: "Use `SendbirdChatSDK.Form`")
extension SendbirdUIKit.SBUForm.Field.InputTypeValue : Swift.RawRepresentable {}
@available(*, deprecated, message: "This method is deprecated in 3.27.0")
extension SendbirdUIKit.SBUFormFieldInputType : Swift.Equatable {}
@available(*, deprecated, message: "This method is deprecated in 3.27.0")
extension SendbirdUIKit.SBUFormFieldInputType : Swift.Hashable {}
@available(*, deprecated, message: "This method is deprecated in 3.27.0")
extension SendbirdUIKit.SBUFormFieldInputType : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUIconSetType : Swift.RawRepresentable {}
extension SendbirdUIKit.SBULayoutableButton.LabelAlignment : Swift.Equatable {}
extension SendbirdUIKit.SBULayoutableButton.LabelAlignment : Swift.Hashable {}
extension SendbirdUIKit.SBULayoutableButton.LabelAlignment : Swift.RawRepresentable {}
extension SendbirdUIKit.SBULayoutableButton.VerticalAlignment : Swift.Equatable {}
extension SendbirdUIKit.SBULayoutableButton.VerticalAlignment : Swift.Hashable {}
extension SendbirdUIKit.SBULayoutableButton.VerticalAlignment : Swift.RawRepresentable {}
extension SendbirdUIKit.SBULayoutableButton.HorizontalAlignment : Swift.Equatable {}
extension SendbirdUIKit.SBULayoutableButton.HorizontalAlignment : Swift.Hashable {}
extension SendbirdUIKit.SBULayoutableButton.HorizontalAlignment : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUMessageFormItemView.InputErrorType : Swift.Equatable {}
extension SendbirdUIKit.SBUMessageFormItemView.InputErrorType : Swift.Hashable {}
extension SendbirdUIKit.SBUMessageInputMode : Swift.Equatable {}
extension SendbirdUIKit.SBUMessageInputMode : Swift.Hashable {}
extension SendbirdUIKit.SBUMessageInputMode : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUMessageTemplate.ActionType : Swift.Equatable {}
extension SendbirdUIKit.SBUMessageTemplate.ActionType : Swift.Hashable {}
extension SendbirdUIKit.SBUMessageTemplate.ActionType : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUMessageTemplate.Container.ContainerType : Swift.Equatable {}
extension SendbirdUIKit.SBUMessageTemplate.Container.ContainerType : Swift.Hashable {}
extension SendbirdUIKit.SBUMessageTemplate.Container.ContainerType : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUPermissionManager.PermissionType : Swift.Equatable {}
extension SendbirdUIKit.SBUPermissionManager.PermissionType : Swift.Hashable {}
extension SendbirdUIKit.SBUPhotoAccessLevel : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUPhotoAccessibleStatus : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUQuoteMessageInputView.Edge : Swift.Equatable {}
extension SendbirdUIKit.SBUQuoteMessageInputView.Edge : Swift.Hashable {}
extension SendbirdUIKit.SBUQuoteMessageInputView.Edge : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUReplyType : Swift.Equatable {}
extension SendbirdUIKit.SBUReplyType : Swift.Hashable {}
extension SendbirdUIKit.SBUReplyType : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUThreadReplySelectType : Swift.Equatable {}
extension SendbirdUIKit.SBUThreadReplySelectType : Swift.Hashable {}
extension SendbirdUIKit.SBUThreadReplySelectType : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUThemeColorScheme : Swift.Equatable {}
extension SendbirdUIKit.SBUThemeColorScheme : Swift.Hashable {}
extension SendbirdUIKit.SBUVoiceMessageInputView.Status : Swift.Equatable {}
extension SendbirdUIKit.SBUVoiceMessageInputView.Status : Swift.Hashable {}
extension SendbirdUIKit.SBUVoicePlayerErrorStatus : Swift.Equatable {}
extension SendbirdUIKit.SBUVoicePlayerErrorStatus : Swift.Hashable {}
extension SendbirdUIKit.SBUVoicePlayerErrorStatus : Swift.RawRepresentable {}
extension SendbirdUIKit.SBUVoicePlayer.VoicePlayerStatus : Swift.Equatable {}
extension SendbirdUIKit.SBUVoicePlayer.VoicePlayerStatus : Swift.Hashable {}
extension SendbirdUIKit.SBUVoicePlayer.VoicePlayerStatus : Swift.RawRepresentable {}
extension SendbirdUIKit.VoiceRecorderStatus : Swift.Equatable {}
extension SendbirdUIKit.VoiceRecorderStatus : Swift.Hashable {}
extension SendbirdUIKit.VoiceRecorderStatus : Swift.RawRepresentable {}
extension SendbirdUIKit.VoiceRecorderErrorStatus : Swift.Equatable {}
extension SendbirdUIKit.VoiceRecorderErrorStatus : Swift.Hashable {}
extension SendbirdUIKit.VoiceRecorderErrorStatus : Swift.RawRepresentable {}
extension UIKit.UIImageView.ImageOption : Swift.Equatable {}
extension UIKit.UIImageView.ImageOption : Swift.Hashable {}
extension UIKit.UIImageView.LoadStatus : Swift.Equatable {}
extension UIKit.UIImageView.LoadStatus : Swift.Hashable {}
