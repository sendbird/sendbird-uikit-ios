// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SendBirdUIKit
import AVFoundation
import AVKit
import AssetsLibrary
import CoreGraphics
import DeveloperToolsSupport
import Foundation
import MobileCoreServices
import Photos
import QuartzCore
import SafariServices
import SendBirdSDK
@_exported import SendBirdUIKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUInviteUserViewController : SendBirdUIKit.SBUBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userCell: UIKit.UITableViewCell? {
    get
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUUserListTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var inviteListType: SendBirdUIKit.ChannelInviteListType {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDGroupChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelUrl: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userList: [SendBirdUIKit.SBUUser] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var selectedUserList: Swift.Set<SendBirdUIKit.SBUUser> {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var joinedUserIds: Swift.Set<Swift.String> {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userListQuery: SendBirdSDK.SBDApplicationUserListQuery? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var memberListQuery: SendBirdSDK.SBDGroupChannelMemberListQuery? {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUInviteUserViewController.init(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUInviteUserViewController.init(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDGroupChannel, type: SendBirdUIKit.ChannelInviteListType = .users)
  @objc @_Concurrency.MainActor(unsafe) public init(channelUrl: Swift.String, type: SendBirdUIKit.ChannelInviteListType = .users)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDGroupChannel, users: [SendBirdUIKit.SBUUser], type: SendBirdUIKit.ChannelInviteListType = .users)
  @objc @_Concurrency.MainActor(unsafe) public init(channelUrl: Swift.String, users: [SendBirdUIKit.SBUUser], type: SendBirdUIKit.ChannelInviteListType = .users)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func loadChannel(channelUrl: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func loadNextUserList(reset: Swift.Bool, users: [SendBirdUIKit.SBUUser]? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func inviteUsers()
  @objc @_Concurrency.MainActor(unsafe) public func inviteUsers(userIds: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) public func promoteToOperators()
  @objc @_Concurrency.MainActor(unsafe) public func promoteToOperators(memberIds: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) public func register(userCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func resetUserList()
  @objc @_Concurrency.MainActor(unsafe) public func reloadData()
  @objc @_Concurrency.MainActor(unsafe) public func onClickInviteOrPromote()
  @objc @_Concurrency.MainActor(unsafe) public func selectUser(user: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) public func popToChannel()
  @objc @_Concurrency.MainActor(unsafe) public func popToPrevious()
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @available(*, deprecated, renamed: "errorHandler", message: "deprecated in 2.1.12")
  @_Concurrency.MainActor(unsafe) open func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
extension SendBirdUIKit.SBUInviteUserViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
extension SendBirdUIKit.SBUInviteUserViewController {
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
}
extension SendBirdUIKit.SBUInviteUserViewController : SendBirdUIKit.SBUInviteUserListDatasource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func nextUserList() -> [SendBirdUIKit.SBUUser]?
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelUnknownMessageCell : SendBirdUIKit.SBUOpenChannelUserMessageCell {
  @_Concurrency.MainActor(unsafe) @objc override open func configure(_ message: SendBirdSDK.SBDBaseMessage, hideDateView: Swift.Bool, groupPosition: SendBirdUIKit.MessageGroupPosition, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public static func sbu_loadNib() -> UIKit.UINib
  @objc @_Concurrency.MainActor(unsafe) public static func sbu_loadViewFromNib() -> UIKit.UIView
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(equalTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_equalTo(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(greaterThanOrEqualTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_greater(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(lessThanOrEqualTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_less(leadingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, leading: CoreFoundation.CGFloat? = nil, trailingAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, trailing: CoreFoundation.CGFloat? = nil, leftAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, left: CoreFoundation.CGFloat? = nil, rightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, right: CoreFoundation.CGFloat? = nil, topAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, top: CoreFoundation.CGFloat? = nil, bottomAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, bottom: CoreFoundation.CGFloat? = nil, centerXAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutXAxisAnchor>? = nil, centerX: CoreFoundation.CGFloat? = nil, centerYAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutYAxisAnchor>? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_greaterThan(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func sbu_constraint_lessThan(widthAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, width: CoreFoundation.CGFloat? = nil, heightAnchor: UIKit.NSLayoutAnchor<UIKit.NSLayoutDimension>? = nil, height: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil) -> UIKit.UIView
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUCommonItem : ObjectiveC.NSObject {
  @objc public init(title: Swift.String? = nil, color: UIKit.UIColor? = SBUColorSet.onlight01, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, tintColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment = .left)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUUtils : ObjectiveC.NSObject {
  @objc(getFileTypeByFileMessage:) public static func getFileType(by fileMessage: SendBirdSDK.SBDFileMessage) -> SendBirdUIKit.MessageFileType
  @objc(getFileTypeByType:) public static func getFileType(by type: Swift.String) -> SendBirdUIKit.MessageFileType
  @objc public static func generateChannelName(channel: SendBirdSDK.SBDGroupChannel) -> Swift.String
  @objc public static func getMimeType(url: Foundation.URL) -> Swift.String?
  @objc @available(*, deprecated, renamed: "getReceiptStateIfExists", message: "deprecated in 2.0.5")
  public static func getReceiptState(channel: SendBirdSDK.SBDGroupChannel, message: SendBirdSDK.SBDBaseMessage) -> SendBirdUIKit.SBUMessageReceiptState
  public static func getReceiptStateIfExists(for channel: SendBirdSDK.SBDGroupChannel, message: SendBirdSDK.SBDBaseMessage) -> SendBirdUIKit.SBUMessageReceiptState?
  @objc public static func isValid(coverUrl: Swift.String) -> Swift.Bool
  @objc public static func isValid(channelName: Swift.String, type: SendBirdUIKit.ChannelType = .group) -> Swift.Bool
  @objc public static func emptyTitleForRowEditAction(for size: CoreFoundation.CGSize) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SBUCoverImageView : UIKit.UIView {
  @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUComponentTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public func setImage(withCoverUrl coverUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setImage(with coverURL: Swift.String, makeCircle: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func setPlaceholderImage(iconSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) public func setBroadcastIcon()
  @_Concurrency.MainActor(unsafe) public func setImage(withImage image: UIKit.UIImage, backgroundColor: UIKit.UIColor? = nil, makeCircle: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setImage(withUsers users: [SendBirdSDK.SBDUser])
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func sbu_setProfileImageView(for user: SendBirdSDK.SBDUser, defaultImage: UIKit.UIImage)
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUOpenChannelBaseMessageCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var message: SendBirdSDK.SBDBaseMessage
  @objc @_Concurrency.MainActor(unsafe) public var groupPosition: SendBirdUIKit.MessageGroupPosition
  @objc @_Concurrency.MainActor(unsafe) public var dateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageContentView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUMessageCellTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendBirdUIKit.SBUMessageCellTheme {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func configure(message: SendBirdSDK.SBDBaseMessage, hideDateView: Swift.Bool, groupPosition: SendBirdUIKit.MessageGroupPosition = .none, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUBaseChannelListViewController : SendBirdUIKit.SBUBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) open func showChannel(channelUrl: Swift.String, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelAdminMessageCell : SendBirdUIKit.SBUOpenChannelBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: SendBirdSDK.SBDAdminMessage, hideDateView: Swift.Bool, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUAdminMessageCell : SendBirdUIKit.SBUBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: SendBirdSDK.SBDAdminMessage, hideDateView: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol SBUChannelInfoHeaderViewDelegate {
  @objc optional func didSelectChannelInfo()
  @objc optional func didSelectChannelMembers()
  @objc optional func didSelectChannelParticipants()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class SBUChannelInfoHeaderView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var coverImage: SendBirdUIKit.SBUCoverImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var descriptionLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var infoButton: UIKit.UIButton? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDBaseChannel? {
    get
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendBirdUIKit.SBUComponentTheme {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func configure(channel: SendBirdSDK.SBDBaseChannel?, description: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func onClickChannelInfo()
  @objc @_Concurrency.MainActor(unsafe) public func onClickChannelMembers()
  @objc @_Concurrency.MainActor(unsafe) public func onClickChannelParticipants()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUChannelListViewController : SendBirdUIKit.SBUBaseChannelListViewController {
  @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    get
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUChannelListTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var createChannelTypeSelector: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelCell: SendBirdUIKit.SBUBaseChannelCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var customCell: SendBirdUIKit.SBUBaseChannelCell? {
    get
  }
  @objc @SendBirdUIKit.SBUAtomic @_Concurrency.MainActor(unsafe) public var channelList: [SendBirdSDK.SBDGroupChannel] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelListQuery: SendBirdSDK.SBDGroupChannelListQuery? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var lastUpdatedTimestamp: Swift.Int64 {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var lastUpdatedToken: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var limit: Swift.UInt {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var includeEmptyChannel: Swift.Bool {
    get
  }
  @available(*, unavailable, renamed: "SBUChannelListViewController()")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) public init(channelListQuery: SendBirdSDK.SBDGroupChannelListQuery? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func changePushTriggerOption(option: SendBirdSDK.SBDGroupChannelPushTriggerOption, channel: SendBirdSDK.SBDGroupChannel, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func leaveChannel(_ channel: SendBirdSDK.SBDGroupChannel, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func loadNextChannelList(reset: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func loadChannelChangeLogs(hasMore: Swift.Bool, token: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func sortChannelList(needReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func updateChannels(_ channels: [SendBirdSDK.SBDGroupChannel]?, needReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func upsertChannels(_ channels: [SendBirdSDK.SBDGroupChannel]?, needReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func deleteChannels(channelUrls: [Swift.String]?, needReload: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func showChannel(channelUrl: Swift.String, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func showCreateChannelTypeSelector()
  @objc @_Concurrency.MainActor(unsafe) open func showCreateChannel(type: SendBirdUIKit.ChannelType = .group)
  @objc @_Concurrency.MainActor(unsafe) public func register(channelCell: SendBirdUIKit.SBUBaseChannelCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func register(customCell: SendBirdUIKit.SBUBaseChannelCell?, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func reloadTableView()
  @objc @_Concurrency.MainActor(unsafe) public func setLoading(_ loadingState: Swift.Bool, _ showIndicator: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @available(*, deprecated, renamed: "errorHandler", message: "deprecated in 2.1.12")
  @_Concurrency.MainActor(unsafe) open func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
extension SendBirdUIKit.SBUChannelListViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
}
extension SendBirdUIKit.SBUChannelListViewController : SendBirdUIKit.SBUEmptyViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectRetry()
}
extension SendBirdUIKit.SBUChannelListViewController : SendBirdSDK.SBDChannelDelegate, SendBirdSDK.SBDConnectionDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDGroupChannel, userDidJoin user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDGroupChannel, userDidLeave user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasChanged(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, messageWasDeleted messageId: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasFrozen(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasUnfrozen(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, userWasBanned user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSucceedReconnection()
}
extension SendBirdUIKit.SBUChannelListViewController : SendBirdUIKit.SBUCreateChannelTypeSelectorDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectCloseSelector()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectCreateGroupChannel()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectCreateSuperGroupChannel()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectCreateBroadcastChannel()
}
extension SendBirdUIKit.SBUChannelListViewController {
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUGlobalCustomParams : ObjectiveC.NSObject {
  @objc public static var groupChannelParamsCreateBuilder: ((_ params: SendBirdSDK.SBDGroupChannelParams?) -> Swift.Void)?
  @objc public static var groupChannelParamsUpdateBuilder: ((_ params: SendBirdSDK.SBDGroupChannelParams?) -> Swift.Void)?
  @objc public static var openChannelParamsUpdateBuilder: ((_ params: SendBirdSDK.SBDOpenChannelParams?) -> Swift.Void)?
  @objc public static var userMessageParamsSendBuilder: ((_ params: SendBirdSDK.SBDUserMessageParams?) -> Swift.Void)?
  @objc public static var userMessageParamsUpdateBuilder: ((_ params: SendBirdSDK.SBDUserMessageParams?) -> Swift.Void)?
  @objc public static var fileMessageParamsSendBuilder: ((_ params: SendBirdSDK.SBDFileMessageParams?) -> Swift.Void)?
  @objc public static var messageListParamsBuilder: ((_ params: SendBirdSDK.SBDMessageListParams?) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class SBUUserCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var userImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mutedStateImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var userNameLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var operatorLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var checkboxButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var moreButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var separateView: UIKit.UIView
  @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUUserCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var type: SendBirdUIKit.UserListType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupViews()
  @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func configure(type: SendBirdUIKit.UserListType, user: SendBirdUIKit.SBUUser, isChecked: Swift.Bool = false, operatorMode: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func selectUser(_ selected: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onClickMoreMenu()
  @objc @_Concurrency.MainActor(unsafe) open func onTapUserProfileView(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
extension ObjectiveC.NSObject {
  @objc public static var sbu_className: Swift.String {
    @objc get
  }
  @objc dynamic public var sbu_className: Swift.String {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUFontSet : ObjectiveC.NSObject {
  @objc public static var h1: UIKit.UIFont
  @objc public static var h2: UIKit.UIFont
  @objc public static var h3: UIKit.UIFont
  @objc public static var body1: UIKit.UIFont
  @objc public static var body2: UIKit.UIFont
  @objc public static var body3: UIKit.UIFont
  @objc public static var button1: UIKit.UIFont
  @objc public static var button2: UIKit.UIFont
  @objc public static var button3: UIKit.UIFont
  @objc public static var caption1: UIKit.UIFont
  @objc public static var caption2: UIKit.UIFont
  @objc public static var caption3: UIKit.UIFont
  @objc public static var caption4: UIKit.UIFont
  @objc public static var subtitle1: UIKit.UIFont
  @objc public static var subtitle2: UIKit.UIFont
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelContentBaseMessageCell : SendBirdUIKit.SBUOpenChannelBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var baseStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var profileView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentsStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var infoStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userNameView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageTimeLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mainContainerView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isFileType: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isWebType: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: SendBirdSDK.SBDBaseMessage, hideDateView: Swift.Bool, groupPosition: SendBirdUIKit.MessageGroupPosition, isOverlay: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) public func setMessageGrouping()
  @objc @_Concurrency.MainActor(unsafe) public func setUsernameColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onLongPressContentView(sender: UIKit.UILongPressGestureRecognizer?)
  @objc @_Concurrency.MainActor(unsafe) open func onTapContentView(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func onTapUserProfileView(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelViewController : SendBirdUIKit.SBUBaseChannelViewController {
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendBirdUIKit.SBUChannelTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var newMessageInfoView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelStateBanner: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelInfoView: SendBirdUIKit.SBUChannelInfoHeaderView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var adminMessageCell: SendBirdUIKit.SBUOpenChannelBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userMessageCell: SendBirdUIKit.SBUOpenChannelBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileMessageCell: SendBirdUIKit.SBUOpenChannelBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var customMessageCell: SendBirdUIKit.SBUOpenChannelBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var unknownMessageCell: SendBirdUIKit.SBUOpenChannelBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var hideNavigationBar: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var hideChannelInfoView: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var channelDescription: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var mediaView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) public var isMediaViewEnabled: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var mediaViewRatio: CoreFoundation.CGFloat {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageListRatio: CoreFoundation.CGFloat {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isMediaViewOverlaying: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isMediaViewIgnoringSafeArea: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public func enableMediaView(_ enabled: Swift.Bool = true)
  @available(*, deprecated, renamed: "updateMessageListRatio", message: "deprecated in 2.0.6")
  @_Concurrency.MainActor(unsafe) public func updateRatio(mediaView: CoreFoundation.CGFloat? = nil, messageList: CoreFoundation.CGFloat? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func updateMessageListRatio(to ratio: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public func overlayMediaView(_ overlaying: Swift.Bool, messageListRatio: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public func mediaViewIgnoringSafeArea(_ enabled: Swift.Bool = true)
  @objc @_Concurrency.MainActor(unsafe) public var currentOrientation: UIKit.UIDeviceOrientation
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDOpenChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelName: Swift.String?
  @available(*, unavailable, renamed: "SBUOpenChannelViewController(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUOpenChannelViewController(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDOpenChannel, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) @objc public init(channelUrl: Swift.String, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func updateAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override public func deleteMessage(message: SendBirdSDK.SBDBaseMessage)
  @_Concurrency.MainActor(unsafe) @objc override public func loadChannel(channelUrl: Swift.String?, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func updateMessagesInList(messages: [SendBirdSDK.SBDBaseMessage]?, needReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func showChannelSettings()
  @objc @_Concurrency.MainActor(unsafe) open func showParticipantsList()
  @objc @_Concurrency.MainActor(unsafe) public func register(adminMessageCell: SendBirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func register(userMessageCell: SendBirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func register(fileMessageCell: SendBirdUIKit.SBUOpenChannelBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func register(customMessageCell: SendBirdUIKit.SBUOpenChannelBaseMessageCell?, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func setTapGestureHandler(_ cell: SendBirdUIKit.SBUOpenChannelBaseMessageCell, message: SendBirdSDK.SBDBaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func setLongTapGestureHandler(_ cell: SendBirdUIKit.SBUOpenChannelBaseMessageCell, message: SendBirdSDK.SBDBaseMessage, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override open func setUserProfileTapGestureHandler(_ user: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) public func updateBarButton()
  @objc @_Concurrency.MainActor(unsafe) public func updateMessageInputModeState()
  @objc @_Concurrency.MainActor(unsafe) public func checkSameDayAsNextMessage(currentIndex: Swift.Int) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func configureOffset()
  @_Concurrency.MainActor(unsafe) @objc override public func setLoading(_ loadingState: Swift.Bool, _ showIndicator: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func getMessageGroupingPosition(currentIndex: Swift.Int) -> SendBirdUIKit.MessageGroupPosition
  @_Concurrency.MainActor(unsafe) @objc override public func onClickBack()
  @objc @_Concurrency.MainActor(unsafe) public func onClickSetting()
  @objc @_Concurrency.MainActor(unsafe) public func onClickParticipantsList()
  @objc @_Concurrency.MainActor(unsafe) open func onClickScrollBottom(sender: UIKit.UIButton?)
  @_Concurrency.MainActor(unsafe) override public func setScrollBottomView(hidden: Swift.Bool?)
  @_Concurrency.MainActor(unsafe) @objc open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc @_Concurrency.MainActor(unsafe) open func setUserMessageCellGestures(_ cell: SendBirdUIKit.SBUOpenChannelUserMessageCell, userMessage: SendBirdSDK.SBDUserMessage, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func setFileMessageCellGestures(_ cell: SendBirdUIKit.SBUOpenChannelFileMessageCell, fileMessage: SendBirdSDK.SBDFileMessage, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func setUnkownMessageCellGestures(_ cell: SendBirdUIKit.SBUOpenChannelUnknownMessageCell, unknownMessage: SendBirdSDK.SBDBaseMessage, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func calculatorMenuPoint(indexPath: Foundation.IndexPath) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) public func showMenuModal(_ cell: UIKit.UITableViewCell, indexPath: Foundation.IndexPath, message: SendBirdSDK.SBDBaseMessage, types: [SendBirdUIKit.MessageMenuItem])
  @objc @_Concurrency.MainActor(unsafe) public func showFailedMessageMenu(message: SendBirdSDK.SBDBaseMessage)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc @_Concurrency.MainActor(unsafe) open func generateCellIdentifier(by message: SendBirdSDK.SBDBaseMessage) -> Swift.String
}
extension SendBirdUIKit.SBUOpenChannelViewController : SendBirdUIKit.SBUChannelInfoHeaderViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectChannelInfo()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectChannelParticipants()
}
extension SendBirdUIKit.SBUOpenChannelViewController : SendBirdSDK.SBDChannelDelegate, SendBirdSDK.SBDConnectionDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, didReceive message: SendBirdSDK.SBDBaseMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, didUpdate message: SendBirdSDK.SBDBaseMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, messageWasDeleted messageId: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasChanged(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasFrozen(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasUnfrozen(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, userWasMuted user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, userWasUnmuted user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelDidUpdateOperators(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, userWasBanned user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDOpenChannel, userDidEnter user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDOpenChannel, userDidExit user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasDeleted(_ channelUrl: Swift.String, channelType: SendBirdSDK.SBDChannelType)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSucceedReconnection()
}
extension SendBirdUIKit.SBUOpenChannelViewController : UIKit.UIDocumentInteractionControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentInteractionControllerViewControllerForPreview(_ controller: UIKit.UIDocumentInteractionController) -> UIKit.UIViewController
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUContentBaseMessageCell : SendBirdUIKit.SBUBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var userNameStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentsStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userNameView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var profileView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var stateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var useReaction: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(_ message: SendBirdSDK.SBDBaseMessage, hideDateView: Swift.Bool, position: SendBirdUIKit.MessagePosition, groupPosition: SendBirdUIKit.MessageGroupPosition, receiptState: SendBirdUIKit.SBUMessageReceiptState?)
  @objc @_Concurrency.MainActor(unsafe) public func setMessageGrouping()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func onLongPressContentView(sender: UIKit.UILongPressGestureRecognizer?)
  @objc @_Concurrency.MainActor(unsafe) open func onTapContentView(sender: UIKit.UITapGestureRecognizer)
  @available(*, deprecated, renamed: "onTapUserProfileView(sender:)", message: "deprecated in 1.2.2")
  @objc @_Concurrency.MainActor(unsafe) open func onTapProfileImageView(sender: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func onTapUserProfileView(sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias SBUActionSheetHandler = () -> Swift.Void
@objc public protocol SBUActionSheetDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUActionSheetItem : SendBirdUIKit.SBUCommonItem {
  @objc override public init(title: Swift.String? = nil, color: UIKit.UIColor? = SBUColorSet.onlight01, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, tintColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment = .left)
  @objc public init(title: Swift.String? = nil, color: UIKit.UIColor? = nil, image: UIKit.UIImage? = nil, font: UIKit.UIFont? = nil, textAlignment: UIKit.NSTextAlignment = .left, completionHandler: SendBirdUIKit.SBUActionSheetHandler?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SBUActionSheet : ObjectiveC.NSObject {
  @objc public static func show(items: [SendBirdUIKit.SBUActionSheetItem], cancelItem: SendBirdUIKit.SBUActionSheetItem, identifier: Swift.Int = -1, oneTimetheme: SendBirdUIKit.SBUComponentTheme? = nil, delegate: (any SendBirdUIKit.SBUActionSheetDelegate)? = nil)
  @objc public static func dismiss()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUColorSet : ObjectiveC.NSObject {
  @objc public static var primary100: UIKit.UIColor
  @objc public static var primary200: UIKit.UIColor
  @objc public static var primary300: UIKit.UIColor
  @objc public static var primary400: UIKit.UIColor
  @objc public static var primary500: UIKit.UIColor
  @objc public static var secondary100: UIKit.UIColor
  @objc public static var secondary200: UIKit.UIColor
  @objc public static var secondary300: UIKit.UIColor
  @objc public static var secondary400: UIKit.UIColor
  @objc public static var secondary500: UIKit.UIColor
  @objc public static var background50: UIKit.UIColor
  @objc public static var background100: UIKit.UIColor
  @objc public static var background200: UIKit.UIColor
  @objc public static var background300: UIKit.UIColor
  @objc public static var background400: UIKit.UIColor
  @objc public static var background500: UIKit.UIColor
  @objc public static var background600: UIKit.UIColor
  @objc public static var background700: UIKit.UIColor
  @objc public static var overlay01: UIKit.UIColor
  @objc public static var overlay02: UIKit.UIColor
  @objc public static var onlight01: UIKit.UIColor
  @objc public static var onlight02: UIKit.UIColor
  @objc public static var onlight03: UIKit.UIColor
  @objc public static var onlight04: UIKit.UIColor
  @objc public static var ondark01: UIKit.UIColor
  @objc public static var ondark02: UIKit.UIColor
  @objc public static var ondark03: UIKit.UIColor
  @objc public static var ondark04: UIKit.UIColor
  @objc public static var error100: UIKit.UIColor
  @objc public static var error200: UIKit.UIColor
  @objc public static var error300: UIKit.UIColor
  @objc public static var error400: UIKit.UIColor
  @objc public static var error500: UIKit.UIColor
  @objc public static var information: UIKit.UIColor
  @objc public static var highlight: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
public typealias SBUNewMessageInfoHandler = () -> Swift.Void
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUNewMessageInfo : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var messageInfoButton: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var actionHandler: SendBirdUIKit.SBUNewMessageInfoHandler?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public init(type: SendBirdUIKit.NewMessageInfoItemType = .tooltip)
  @available(*, unavailable, renamed: "SBUNewMessageInfo.init(frame:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupViews()
  @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func onClickNewMessageInfo()
  @_Concurrency.MainActor(unsafe) open func updateCount(count: Swift.Int, actionHandler: SendBirdUIKit.SBUNewMessageInfoHandler?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUBaseChannelViewController : SendBirdUIKit.SBUBaseViewController {
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUChannelTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageInputView: SendBirdUIKit.SBUMessageInputView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userProfileView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public let startingPoint: Swift.Int64?
  @objc @_Concurrency.MainActor(unsafe) public var channelUrl: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var inEditingMessage: SendBirdSDK.SBDUserMessage? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageListParams: SendBirdSDK.SBDMessageListParams {
    @objc get
  }
  @objc @SendBirdUIKit.SBUAtomic @_Concurrency.MainActor(unsafe) public var messageList: [SendBirdSDK.SBDBaseMessage] {
    @objc get
  }
  @objc @SendBirdUIKit.SBUAtomic @_Concurrency.MainActor(unsafe) public var fullMessageList: [SendBirdSDK.SBDBaseMessage] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) open func setUserProfileTapGestureHandler(_ user: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) public func keyboardWillShow(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) public func keyboardWillHide(_ notification: Foundation.Notification)
  @objc @_Concurrency.MainActor(unsafe) public func dismissKeyboard()
  @objc @_Concurrency.MainActor(unsafe) public func addGestureHideKeyboard()
  @objc @_Concurrency.MainActor(unsafe) public func loadChannel(channelUrl: Swift.String?, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func clearMessageList()
  @objc @_Concurrency.MainActor(unsafe) public func upsertMessagesInList(messages: [SendBirdSDK.SBDBaseMessage]?, needUpdateNewMessage: Swift.Bool = false, needReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func deleteMessagesInList(messageIds: [Swift.Int64]?, needReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func deleteMessagesInList(messageIds: [Swift.Int64]?, excludeResendableMessages: Swift.Bool, needReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func deleteResendableMessages(requestIds: [Swift.String], needReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func deleteMessage(message: SendBirdSDK.SBDBaseMessage)
  @objc @_Concurrency.MainActor(unsafe) public func sortAllMessageList(needReload: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func increaseNewMessageCount()
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @available(*, deprecated, renamed: "errorHandler", message: "deprecated in 2.1.12")
  @_Concurrency.MainActor(unsafe) open func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func setEditMode(for userMessage: SendBirdSDK.SBDUserMessage?)
  @objc @_Concurrency.MainActor(unsafe) open func sendUserMessage(text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func sendUserMessage(messageParams: SendBirdSDK.SBDUserMessageParams)
  @objc @_Concurrency.MainActor(unsafe) open func sendFileMessage(fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func sendFileMessage(messageParams: SendBirdSDK.SBDFileMessageParams)
  @objc @_Concurrency.MainActor(unsafe) public func updateUserMessage(message: SendBirdSDK.SBDUserMessage, text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func updateUserMessage(message: SendBirdSDK.SBDUserMessage, messageParams: SendBirdSDK.SBDUserMessageParams)
  @objc @_Concurrency.MainActor(unsafe) public func resendMessage(failedMessage: SendBirdSDK.SBDBaseMessage)
  @objc @_Concurrency.MainActor(unsafe) public func scrollToBottom(animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setScrollBottomView(hidden: Swift.Bool?)
  @objc @_Concurrency.MainActor(unsafe) public func sendImageFileMessage(info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc @_Concurrency.MainActor(unsafe) public func sendVideoFileMessage(info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc @_Concurrency.MainActor(unsafe) public func sendDocumentFileMessage(documentUrls: [Foundation.URL])
  @objc @_Concurrency.MainActor(unsafe) public func setLoading(_ loadingState: Swift.Bool, _ showIndicator: Swift.Bool)
}
extension SendBirdUIKit.SBUBaseChannelViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension SendBirdUIKit.SBUBaseChannelViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
extension SendBirdUIKit.SBUBaseChannelViewController : SendBirdUIKit.SBUUserProfileViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectMessage(userId: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectClose()
}
extension SendBirdUIKit.SBUBaseChannelViewController : SendBirdUIKit.SBUEmptyViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectRetry()
}
extension SendBirdUIKit.SBUBaseChannelViewController {
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
}
extension SendBirdUIKit.SBUBaseChannelViewController : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
}
extension SendBirdUIKit.SBUBaseChannelViewController : UIKit.UIImagePickerControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension SendBirdUIKit.SBUBaseChannelViewController : UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
}
extension SendBirdUIKit.SBUBaseChannelViewController : SendBirdUIKit.SBUMessageInputViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func messageInputView(_ messageInputView: SendBirdUIKit.SBUMessageInputView, didSelectSend text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func messageInputView(_ messageInputView: SendBirdUIKit.SBUMessageInputView, didSelectResource type: SendBirdUIKit.MediaResourceType)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func messageInputView(_ messageInputView: SendBirdUIKit.SBUMessageInputView, didSelectEdit text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func messageInputViewDidStartTyping()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func messageInputViewDidEndTyping()
}
extension SendBirdUIKit.SBUBaseChannelViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectDeleteImage(message: SendBirdSDK.SBDFileMessage)
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class SBUModerationsViewController : SendBirdUIKit.SBUBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUChannelSettingsTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDGroupChannel? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelUrl: Swift.String? {
    get
  }
  @available(*, unavailable, renamed: "SBUModerationsViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDGroupChannel)
  @objc @_Concurrency.MainActor(unsafe) public init(channelUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func loadChannel(channelUrl: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func freezeChannel(completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func unfreezeChannel(completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func showOperatorList()
  @objc @available(*, deprecated, renamed: "showMutedMemberList", message: "deprecated in 2.1.9")
  @_Concurrency.MainActor(unsafe) open func showMutedMeberList()
  @objc @_Concurrency.MainActor(unsafe) open func showMutedMemberList()
  @objc @available(*, deprecated, renamed: "showMutedMemberList", message: "deprecated in 2.1.9")
  @_Concurrency.MainActor(unsafe) open func showBannedMeberList()
  @objc @_Concurrency.MainActor(unsafe) open func showBannedMemberList()
  @objc @_Concurrency.MainActor(unsafe) public func changeFreeze(_ freeze: Swift.Bool, _ completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @available(*, deprecated, renamed: "errorHandler", message: "deprecated in 2.1.12")
  @_Concurrency.MainActor(unsafe) open func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
extension SendBirdUIKit.SBUModerationsViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
}
extension SendBirdUIKit.SBUModerationsViewController {
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUBaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) public func onClickBack()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SendBirdUIKit.SBUBaseViewController : UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUChannelViewController : SendBirdUIKit.SBUBaseChannelViewController {
  @objc @_Concurrency.MainActor(unsafe) public var channelName: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var newMessageInfoView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelStateBanner: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var scrollBottomView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var adminMessageCell: SendBirdUIKit.SBUBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userMessageCell: SendBirdUIKit.SBUBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileMessageCell: SendBirdUIKit.SBUBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var customMessageCell: SendBirdUIKit.SBUBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var unknownMessageCell: SendBirdUIKit.SBUBaseMessageCell? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDGroupChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var highlightInfo: SendBirdUIKit.SBUHighlightMessageInfo?
  @objc @_Concurrency.MainActor(unsafe) public var useRightBarButtonItem: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) public var preSendMessages: [Swift.String : SendBirdSDK.SBDBaseMessage] {
    get
  }
  @objc @available(*, deprecated, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) public var resendableMessages: [Swift.String : SendBirdSDK.SBDBaseMessage] {
    get
  }
  @objc @available(*, deprecated, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) public var preSendFileData: [Swift.String : [Swift.String : Swift.AnyObject]] {
    get
  }
  @objc @available(*, deprecated, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) public var resendableFileData: [Swift.String : [Swift.String : Swift.AnyObject]] {
    get
  }
  @objc @available(*, deprecated, message: "deprecated in 1.2.10")
  @_Concurrency.MainActor(unsafe) public var fileTransferProgress: [Swift.String : CoreFoundation.CGFloat] {
    get
  }
  @available(*, unavailable, renamed: "SBUChannelViewController(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUChannelViewController(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDGroupChannel, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) @objc public init(channelUrl: Swift.String, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) @objc public init(channelUrl: Swift.String, startingPoint: Swift.Int64, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override public func loadChannel(channelUrl: Swift.String?, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func setReaction(message: SendBirdSDK.SBDBaseMessage, emojiKey: Swift.String, didSelect: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func updateMessagesInList(messages: [SendBirdSDK.SBDBaseMessage]?, needReload: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func increaseNewMessageCount()
  @objc @_Concurrency.MainActor(unsafe) open func showChannelSettings()
  @objc @_Concurrency.MainActor(unsafe) open func showEmojiListModal(message: SendBirdSDK.SBDBaseMessage)
  @objc @_Concurrency.MainActor(unsafe) public func register(adminMessageCell: SendBirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func register(userMessageCell: SendBirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func register(fileMessageCell: SendBirdUIKit.SBUBaseMessageCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func register(customMessageCell: SendBirdUIKit.SBUBaseMessageCell?, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func setTapGestureHandler(_ cell: SendBirdUIKit.SBUBaseMessageCell, message: SendBirdSDK.SBDBaseMessage)
  @objc @_Concurrency.MainActor(unsafe) open func setLongTapGestureHandler(_ cell: SendBirdUIKit.SBUBaseMessageCell, message: SendBirdSDK.SBDBaseMessage, indexPath: Foundation.IndexPath)
  @objc @available(*, deprecated, renamed: "setEmojiTapGestureHandler(_:emojiKey:)", message: "deprecated in 1.2.2")
  @_Concurrency.MainActor(unsafe) open func setTapEmojiGestureHandler(_ cell: SendBirdUIKit.SBUBaseMessageCell, emojiKey: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func setEmojiTapGestureHandler(_ cell: SendBirdUIKit.SBUBaseMessageCell, emojiKey: Swift.String)
  @objc @available(*, deprecated, renamed: "setEmojiLongTapGestureHandler(_:emojiKey:)", message: "deprecated in 1.2.2")
  @_Concurrency.MainActor(unsafe) open func setLongTapEmojiGestureHandler(_ cell: SendBirdUIKit.SBUBaseMessageCell, emojiKey: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) open func setEmojiLongTapGestureHandler(_ cell: SendBirdUIKit.SBUBaseMessageCell, emojiKey: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func updateMessageInputModeState()
  @objc @_Concurrency.MainActor(unsafe) public func checkSameDayAsNextMessage(currentIndex: Swift.Int) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override public func setLoading(_ loadingState: Swift.Bool, _ showIndicator: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func getMessageGroupingPosition(currentIndex: Swift.Int) -> SendBirdUIKit.MessageGroupPosition
  @objc @_Concurrency.MainActor(unsafe) public func onClickSetting()
  @objc @_Concurrency.MainActor(unsafe) open func onClickScrollBottom(sender: UIKit.UIButton?)
  @_Concurrency.MainActor(unsafe) @objc open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) override public func setScrollBottomView(hidden: Swift.Bool?)
  @_Concurrency.MainActor(unsafe) @objc override public func scrollToBottom(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func setUserMessageCellGestures(_ cell: SendBirdUIKit.SBUUserMessageCell, userMessage: SendBirdSDK.SBDUserMessage, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func setFileMessageCellGestures(_ cell: SendBirdUIKit.SBUFileMessageCell, fileMessage: SendBirdSDK.SBDFileMessage, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) open func setUnkownMessageCellGestures(_ cell: SendBirdUIKit.SBUUnknownMessageCell, unknownMessage: SendBirdSDK.SBDBaseMessage, indexPath: Foundation.IndexPath)
  @objc @_Concurrency.MainActor(unsafe) public func calculatorMenuPoint(indexPath: Foundation.IndexPath, position: SendBirdUIKit.MessagePosition) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) public func showMenuViewController(_ cell: UIKit.UITableViewCell, message: SendBirdSDK.SBDBaseMessage, types: [SendBirdUIKit.MessageMenuItem])
  @_Concurrency.MainActor(unsafe) public func showMenuModal(_ cell: UIKit.UITableViewCell, indexPath: Foundation.IndexPath, message: SendBirdSDK.SBDBaseMessage, types: [SendBirdUIKit.MessageMenuItem])
  @objc @_Concurrency.MainActor(unsafe) public func showFailedMessageMenu(message: SendBirdSDK.SBDBaseMessage)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc @_Concurrency.MainActor(unsafe) open func generateCellIdentifier(by message: SendBirdSDK.SBDBaseMessage) -> Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func messageInputViewDidEndTyping()
}
extension SendBirdUIKit.SBUChannelViewController : SendBirdSDK.SBDChannelDelegate, SendBirdSDK.SBDConnectionDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, didReceive message: SendBirdSDK.SBDBaseMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, didUpdate message: SendBirdSDK.SBDBaseMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, messageWasDeleted messageId: Swift.Int64)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, updatedReaction reactionEvent: SendBirdSDK.SBDReactionEvent)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelDidUpdateReadReceipt(_ sender: SendBirdSDK.SBDGroupChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelDidUpdateDeliveryReceipt(_ sender: SendBirdSDK.SBDGroupChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelDidUpdateTypingStatus(_ sender: SendBirdSDK.SBDGroupChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasChanged(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasFrozen(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelWasUnfrozen(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, userWasMuted user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, userWasUnmuted user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelDidUpdateOperators(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDBaseChannel, userWasBanned user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSucceedReconnection()
}
extension SendBirdUIKit.SBUChannelViewController : UIKit.UIDocumentInteractionControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentInteractionControllerViewControllerForPreview(_ controller: UIKit.UIDocumentInteractionController) -> UIKit.UIViewController
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SBUPendingMessageManager : ObjectiveC.NSObject {
  @objc public static let shared: SendBirdUIKit.SBUPendingMessageManager
  @objc public func addFileInfo(requestId: Swift.String?, params: SendBirdSDK.SBDFileMessageParams?)
  @objc public func getFileInfo(requestId: Swift.String?) -> SendBirdSDK.SBDFileMessageParams?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SBULoading : ObjectiveC.NSObject {
  public static func start()
  public static func stop()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUEmojiManager : ObjectiveC.NSObject {
  @objc public static func getEmojiCategories() -> [SendBirdSDK.SBDEmojiCategory]
  @objc public static func getAllEmojis() -> [SendBirdSDK.SBDEmoji]
  @objc public static func getEmojis(emojiCategoryId: Swift.Int64) -> [SendBirdSDK.SBDEmoji]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUIconSet : ObjectiveC.NSObject {
  @objc public static var iconAdd: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconBack: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconBan: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconBroadcast: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconCamera: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconChat: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconCheckboxChecked: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconCheckboxUnchecked: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconChevronDown: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconChevronRight: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconClose: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconCopy: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconCreate: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconDelete: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconDocument: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconDone: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconDoneAll: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconDownload: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconEdit: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconEmojiMore: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconError: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconFileAudio: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconFileDocument: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconFreeze: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconGif: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconInfo: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconLeave: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconMembers: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconMessage: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconModerations: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconMore: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconMute: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconNotificationFilled: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconNotificationOffFilled: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconNotifications: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconOperator: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconPhoto: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconPlay: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconPlus: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconQuestion: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconRefresh: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconRemove: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconSearch: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconSend: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconSpinner: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconSupergroup: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconThumbnailNone: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static var iconUser: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public static func restoreDefaultIcons()
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SBUCreateChannelTypeSelectorDelegate {
  @objc func didSelectCloseSelector()
  @objc func didSelectCreateGroupChannel()
  @objc func didSelectCreateSuperGroupChannel()
  @objc func didSelectCreateBroadcastChannel()
}
@objc public protocol SBUCreateChannelTypeSelectorProtocol {
  @objc func show()
  @objc func dismiss()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUBaseChannelCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDBaseChannel? {
    get
  }
  @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUChannelCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupViews()
  @_Concurrency.MainActor(unsafe) open func setupActions()
  @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(channel: SendBirdSDK.SBDBaseChannel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUAvailable : ObjectiveC.NSObject {
  @objc public static func isSupportSuperGroupChannel() -> Swift.Bool
  @objc public static func isSupportBroadcastChannel() -> Swift.Bool
  @objc public static func isSupportReactions() -> Swift.Bool
  @objc public static func isSupportOgTag() -> Swift.Bool
  @objc public static func isSupportMessageSearch() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUMessageSearchResultCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var coverImage: SendBirdUIKit.SBUCoverImageView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileMessageLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileMessageIcon: UIKit.UIImageView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var fileStackView: UIKit.UIStackView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var createdAtLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var separatorLine: UIKit.UIView {
    get
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUMessageSearchResultCellTheme {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @objc @_Concurrency.MainActor(unsafe) open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) public func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) open func configure(message: SendBirdSDK.SBDBaseMessage)
  @objc @_Concurrency.MainActor(unsafe) public func setupFileIcon()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUOpenChannelSettingsViewController : SendBirdUIKit.SBUBaseChannelSettingViewController {
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDOpenChannel? {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUOpenChannelSettingsViewController(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUOpenChannelSettingsViewController(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDOpenChannel)
  @objc @_Concurrency.MainActor(unsafe) public init(channelUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override public func loadChannel(channelUrl: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override public func updateChannel(channelName: Swift.String? = nil, coverImage: UIKit.UIImage? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func updateChannel(params: SendBirdSDK.SBDOpenChannelParams)
  @objc @_Concurrency.MainActor(unsafe) public func deleteChannel()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SBUChannelCell : SendBirdUIKit.SBUBaseChannelCell {
  @_Concurrency.MainActor(unsafe) public var coverImage: SendBirdUIKit.SBUCoverImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var titleStackView: UIKit.UIStackView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var broadcastIcon: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var memberCountLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var freezeState: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var notificationState: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var lastUpdatedTimeLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var messageLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var unreadCount: UIKit.UIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) public var separatorLine: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public let kCoverImageSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) final public let kUnreadCountSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) final public let kSideMarging: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) final public let kInfoIconSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) override public func setupViews()
  @_Concurrency.MainActor(unsafe) override public func setupActions()
  @_Concurrency.MainActor(unsafe) override public func setupAutolayout()
  @_Concurrency.MainActor(unsafe) override public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
  @_Concurrency.MainActor(unsafe) override open func configure(channel: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) public func buildLastUpdatedDate() -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public protocol SBUMessageInputViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func messageInputView(_ messageInputView: SendBirdUIKit.SBUMessageInputView, didSelectSend text: Swift.String)
  @objc optional func messageInputView(_ messageInputView: SendBirdUIKit.SBUMessageInputView, didSelectResource type: SendBirdUIKit.MediaResourceType)
  @objc optional func messageInputView(_ messageInputView: SendBirdUIKit.SBUMessageInputView, didSelectEdit text: Swift.String)
  @objc optional func messageInputViewDidStartTyping()
  @objc optional func messageInputViewDidEndTyping()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUMessageInputView : UIKit.UIView, SendBirdUIKit.SBUActionSheetDelegate, UIKit.UITextViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var addButton: UIKit.UIButton? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var placeholderLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var textView: UIKit.UITextView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var sendButton: UIKit.UIButton? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var editView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIButton? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var saveButton: UIKit.UIButton? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var inputHStackView: UIKit.UIStackView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var textViewMinHeight: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var textViewMaxHeight: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var showsSendButton: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var textViewLeadingSpacing: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var textViewTrailingSpacing: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var layoutInsets: UIKit.UIEdgeInsets
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendBirdUIKit.SBUMessageInputTheme {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "SBUMessageInputView()")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func startEditMode(text: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func endEditMode()
  @objc @_Concurrency.MainActor(unsafe) public func setFrozenModeState(_ isFrozen: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func setMutedModeState(_ isMuted: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func setErrorState()
  @objc @_Concurrency.MainActor(unsafe) public func endTypingMode()
  @objc @_Concurrency.MainActor(unsafe) public func setupTextViewHeight(textView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) public func updateTextViewHeight()
  @objc @_Concurrency.MainActor(unsafe) open func onClickAddButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickSendButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickCancelButton(_ sender: Any)
  @objc @_Concurrency.MainActor(unsafe) open func onClickSaveButton(_ sender: Any)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUCreateChannelViewController : SendBirdUIKit.SBUBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userCell: UIKit.UITableViewCell? {
    get
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUUserListTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelType: SendBirdUIKit.ChannelType {
    get
  }
  @objc @SendBirdUIKit.SBUAtomic @_Concurrency.MainActor(unsafe) public var userList: [SendBirdUIKit.SBUUser] {
    @objc get
  }
  @objc @SendBirdUIKit.SBUAtomic @_Concurrency.MainActor(unsafe) public var selectedUserList: Swift.Set<SendBirdUIKit.SBUUser> {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userListQuery: SendBirdSDK.SBDApplicationUserListQuery? {
    get
  }
  @available(*, unavailable, renamed: "SBUCreateChannelViewController(type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUCreateChannelViewController.init()")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public init(users: [SendBirdUIKit.SBUUser]? = nil, type: SendBirdUIKit.ChannelType = .group)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func loadNextUserList(reset: Swift.Bool, users: [SendBirdUIKit.SBUUser]? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func nextUserList() -> [SendBirdUIKit.SBUUser]?
  @objc @_Concurrency.MainActor(unsafe) public func createChannel(userIds: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) public func createChannel(params: SendBirdSDK.SBDGroupChannelParams, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func register(userCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "reloadData()", message: "deprecated in 2.1.11")
  @_Concurrency.MainActor(unsafe) public func reloadUserList()
  @objc @_Concurrency.MainActor(unsafe) public func reloadData()
  @objc @_Concurrency.MainActor(unsafe) public func showLoading(state: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func onClickCreate()
  @objc @_Concurrency.MainActor(unsafe) public func selectUser(user: SendBirdUIKit.SBUUser)
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @available(*, deprecated, renamed: "errorHandler", message: "deprecated in 2.1.12")
  @_Concurrency.MainActor(unsafe) open func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
extension SendBirdUIKit.SBUCreateChannelViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
extension SendBirdUIKit.SBUCreateChannelViewController : SendBirdUIKit.SBUEmptyViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectRetry()
}
extension SendBirdUIKit.SBUCreateChannelViewController {
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
}
@objc @objcMembers public class SBUUser : ObjectiveC.NSObject {
  @objc public var userId: Swift.String {
    get
  }
  @objc public var nickname: Swift.String? {
    get
  }
  @objc public var profileUrl: Swift.String? {
    get
  }
  @objc public var isOperator: Swift.Bool {
    get
  }
  @objc public var isMuted: Swift.Bool {
    get
  }
  @objc public init(userId: Swift.String, nickname: Swift.String? = nil, profileUrl: Swift.String? = nil)
  @objc public init(user: SendBirdSDK.SBDUser)
  @objc public init(user: SendBirdUIKit.SBUUser, isOperator: Swift.Bool = false, isMuted: Swift.Bool = false)
  @objc public init(member: SendBirdSDK.SBDMember)
  @objc public init(sender: SendBirdSDK.SBDSender)
  @objc public func refinedNickname() -> Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUGlobals : ObjectiveC.NSObject {
  @objc public static var ApplicationId: Swift.String?
  @objc public static var AccessToken: Swift.String?
  @objc public static var CurrentUser: SendBirdUIKit.SBUUser?
  @objc public static var UsingMessageGrouping: Swift.Bool
  @objc public static var UsingUserProfile: Swift.Bool
  @objc public static var UsingUserProfileInOpenChannel: Swift.Bool
  @objc public static var UsingImageCompression: Swift.Bool
  @objc public static var imageCompressionRate: CoreFoundation.CGFloat
  @objc public static var imageResizingSize: CoreFoundation.CGSize
  @objc override dynamic public init()
  @objc deinit
}
public typealias AlertButtonHandler = (_ info: Any?) -> Swift.Void
@objc @objcMembers public class SBUAlertButtonItem : ObjectiveC.NSObject {
  @objc public init(title: Swift.String, color: UIKit.UIColor? = nil, completionHandler: @escaping SendBirdUIKit.AlertButtonHandler)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SBUAlertView : ObjectiveC.NSObject {
  public static func show(title: Swift.String, message: Swift.String? = nil, needInputField: Swift.Bool = false, placeHolder: Swift.String? = "", centerYRatio: CoreFoundation.CGFloat? = 1.0, oneTimetheme: SendBirdUIKit.SBUComponentTheme? = nil, confirmButtonItem: SendBirdUIKit.SBUAlertButtonItem, cancelButtonItem: SendBirdUIKit.SBUAlertButtonItem?)
  @objc public static func dismiss()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUStringSet : ObjectiveC.NSObject {
  @objc public static var Cancel: Swift.String
  @objc public static var OK: Swift.String
  @objc public static var Retry: Swift.String
  @objc public static var Save: Swift.String
  @objc public static var Copy: Swift.String
  @objc public static var Delete: Swift.String
  @objc public static var Edit: Swift.String
  @objc public static var Remove: Swift.String
  @objc public static var Camera: Swift.String
  @objc public static var PhotoVideoLibrary: Swift.String
  @objc public static var Document: Swift.String
  @objc public static var Loading: Swift.String
  @objc public static var Invite: Swift.String
  @objc public static var TakePhoto: Swift.String
  @objc public static var ChoosePhoto: Swift.String
  @objc public static var RemovePhoto: Swift.String
  @objc public static var Search: Swift.String
  @objc public static var Alert_Delete: Swift.String
  @objc public static var Date_Yesterday: Swift.String
  @objc public static var Date_Year: (_ interval: Swift.Int) -> Swift.String
  @objc public static var Date_Day: (_ interval: Swift.Int) -> Swift.String
  @objc public static var Date_Month: (_ interval: Swift.Int) -> Swift.String
  @objc public static var Date_Hour: (_ interval: Swift.Int) -> Swift.String
  @objc public static var Date_Min: (_ interval: Swift.Int) -> Swift.String
  @objc public static var Date_Ago: Swift.String
  @objc public static var Date_On: Swift.String
  @objc public static var ChannelList_Header_Title: Swift.String
  @objc public static var ChannelList_Last_File_Message: Swift.String
  @objc public static var Channel_Name_Default: Swift.String
  @objc public static var Channel_Name_No_Members: Swift.String
  @objc public static var Channel_Header_LastSeen: Swift.String
  @objc public static var Channel_Header_Typing: (_ members: [SendBirdSDK.SBDUser]) -> Swift.String
  @objc public static var Channel_Success_Download_file: Swift.String
  @objc public static var Channel_Failure_Download_file: Swift.String
  @objc public static var Channel_Failure_Open_file: Swift.String
  @objc public static var Channel_New_Message_File: Swift.String
  @objc public static var Channel_New_Message: (_ count: Swift.Int) -> Swift.String
  @objc public static var Channel_State_Banner_Frozen: Swift.String
  @objc public static var Open_Channel_Name_Default: Swift.String
  @objc public static var Open_Channel_Participants: Swift.String
  @objc public static var Open_Channel_Participants_Count: (_ count: Swift.Int) -> Swift.String
  @objc public static var ChannelSettings_Header_Title: Swift.String
  @objc public static var ChannelSettings_Change_Name: Swift.String
  @objc public static var ChannelSettings_Change_Image: Swift.String
  @objc public static var ChannelSettings_Enter_New_Name: Swift.String
  @objc public static var ChannelSettings_Enter_New_Channel_Name: Swift.String
  @objc public static var ChannelSettings_Notifications: Swift.String
  @objc public static var ChannelSettings_Members_Title: Swift.String
  @objc public static var ChannelSettings_Participants_Title: Swift.String
  @objc public static var ChannelSettings_Members: (_ count: Swift.UInt) -> Swift.String
  @objc public static var ChannelSettings_Leave: Swift.String
  @objc public static var ChannelSettings_Delete: Swift.String
  @objc public static var ChannelSettings_Search: Swift.String
  @objc public static var ChannelSettings_Moderations: Swift.String
  @objc public static var ChannelSettings_Operators: Swift.String
  @objc public static var ChannelSettings_Muted_Members: Swift.String
  @objc public static var ChannelSettings_Banned_Members: Swift.String
  @objc public static var ChannelSettings_Freeze_Channel: Swift.String
  @objc public static var ChannelSettings_URL: Swift.String
  @objc public static var MessageInput_Text_Placeholder: Swift.String
  @objc public static var MessageInput_Text_Unavailable: Swift.String
  @objc public static var MessageInput_Text_Muted: Swift.String
  @objc public static var Message_Edited: Swift.String
  @objc public static var Message_System: Swift.String
  @objc public static var Message_Unknown_Title: Swift.String
  @objc public static var Message_Unknown_Desctiption: Swift.String
  @objc public static var Empty_No_Channels: Swift.String
  @objc public static var Empty_No_Messages: Swift.String
  @objc public static var Empty_No_Users: Swift.String
  @objc public static var Empty_No_Muted_Members: Swift.String
  @objc public static var Empty_No_Banned_Members: Swift.String
  @objc public static var Empty_Search_Result: Swift.String
  @objc public static var Empty_Wrong: Swift.String
  @objc public static var CreateChannel_Create: (_ count: Swift.Int) -> Swift.String
  @objc public static var CreateChannel_Header_Title: Swift.String
  @objc public static var CreateChannel_Header_Select_Members: Swift.String
  @objc public static var CreateChannel_Header_Title_Profile: Swift.String
  @objc public static var InviteChannel_Header_Title: Swift.String
  @objc public static var InviteChannel_Header_Select_Members: Swift.String
  @objc public static var InviteChannel_Invite: (_ count: Swift.Int) -> Swift.String
  @objc public static var InviteChannel_Add: (_ count: Swift.Int) -> Swift.String
  @objc public static var MemberList_Header_Title: Swift.String
  @objc public static var MemberList_Me: Swift.String
  @objc public static var MemberList_Ban: Swift.String
  @objc public static var MemberList_Unban: Swift.String
  @objc public static var MemberList_Mute: Swift.String
  @objc public static var MemberList_Unmute: Swift.String
  @objc public static var MemberList_Dismiss_Operator: Swift.String
  @objc public static var MemberList_Promote_Operator: Swift.String
  @objc public static var MemberList_Title_Members: Swift.String
  @objc public static var MemberList_Title_Operators: Swift.String
  @objc public static var MemberList_Title_Muted_Members: Swift.String
  @objc public static var MemberList_Title_Banned_Members: Swift.String
  @objc public static var MemberList_Title_Participants: Swift.String
  @objc public static var User_No_Name: Swift.String
  @objc public static var User_Operator: Swift.String
  @objc public static var UserProfile_Role_Operator: Swift.String
  @objc public static var UserProfile_Role_Member: Swift.String
  @objc public static var UserProfile_UserID: Swift.String
  @objc public static var UserProfile_Message: Swift.String
  @objc public static var UserProfile_Promote: Swift.String
  @objc public static var UserProfile_Dismiss: Swift.String
  @objc public static var UserProfile_Mute: Swift.String
  @objc public static var UserProfile_Unmute: Swift.String
  @objc public static var UserProfile_Ban: Swift.String
  @objc public static var ChannelType_Group: Swift.String
  @objc public static var ChannelType_SuperGroup: Swift.String
  @objc public static var ChannelType_Broadcast: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUUnknownMessageCell : SendBirdUIKit.SBUUserMessageCell {
  @_Concurrency.MainActor(unsafe) override open func configure(_ message: SendBirdSDK.SBDBaseMessage, hideDateView: Swift.Bool, groupPosition: SendBirdUIKit.MessageGroupPosition, receiptState: SendBirdUIKit.SBUMessageReceiptState?, useReaction: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUBaseChannelSettingViewController : SendBirdUIKit.SBUBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUChannelSettingsTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelName: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var channelUrl: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isOperator: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userInfoView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @objc @_Concurrency.MainActor(unsafe) public func loadChannel(channelUrl: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func updateChannel(channelName: Swift.String? = nil, coverImage: UIKit.UIImage? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func showMemberList()
  @objc @_Concurrency.MainActor(unsafe) open func showModerationList()
  @objc @_Concurrency.MainActor(unsafe) open func showSearch()
  @objc @_Concurrency.MainActor(unsafe) open func showParticipantsList()
  @objc @_Concurrency.MainActor(unsafe) public func onClickEdit()
  @objc @_Concurrency.MainActor(unsafe) public func selectChannelImage()
  @objc @_Concurrency.MainActor(unsafe) public func changeChannelName()
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @available(*, deprecated, renamed: "errorHandler", message: "deprecated in 2.1.12")
  @_Concurrency.MainActor(unsafe) open func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SendBirdUIKit.SBUBaseChannelSettingViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
}
extension SendBirdUIKit.SBUBaseChannelSettingViewController : SendBirdSDK.SBDChannelDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDOpenChannel, userDidEnter user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDOpenChannel, userDidExit user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDGroupChannel, userDidJoin user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDGroupChannel, userDidLeave user: SendBirdSDK.SBDUser)
}
extension SendBirdUIKit.SBUBaseChannelSettingViewController : SendBirdUIKit.SBUActionSheetDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectActionSheetItem(index: Swift.Int, identifier: Swift.Int)
}
extension SendBirdUIKit.SBUBaseChannelSettingViewController : UIKit.UIImagePickerControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
extension SendBirdUIKit.SBUBaseChannelSettingViewController {
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class SBUNavigationTitleView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var text: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var textAlignment: UIKit.NSTextAlignment
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "SBUNavigationTitleView.init(frame:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public func setupViews()
  @objc @_Concurrency.MainActor(unsafe) public func setupAutolayout()
  @objc @_Concurrency.MainActor(unsafe) public func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc public enum ChannelType : Swift.Int {
  case group
  case supergroup
  case broadcast
  case open
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ChannelSettingItemType : Swift.Int {
  case moderations
  case notifications
  case members
  case search
  case leave
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum OpenChannelSettingItemType : Swift.Int {
  case participants
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ModerationItemType : Swift.Int {
  case operators
  case mutedMembers
  case bannedMembers
  case freezeChannel
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum UserListType : Swift.Int {
  case none
  case createChannel
  case channelMembers
  case inviteUser
  case reaction
  case operators
  case mutedMembers
  case bannedMembers
  case participants
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ChannelMemberListType : Swift.Int {
  case none
  case channelMembers
  case operators
  case mutedMembers
  case bannedMembers
  case participants
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ChannelInviteListType : Swift.Int {
  case none
  case users
  case operators
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, renamed: "UserListType", message: "deprecated in 1.2.0")
@objc public enum MemberListType : Swift.Int {
  case none
  case createChannel
  case channelMembers
  case inviteUser
  case reaction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum EmptyViewType : Swift.Int {
  case none
  case noChannels
  case noMessages
  case noMembers
  case noMutedMembers
  case noBannedMembers
  case noSearchResults
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MediaResourceType : Swift.Int {
  case camera
  case library
  case document
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ChannelEditType : Swift.Int {
  case name
  case image
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessagePosition : Swift.Int {
  case left
  case right
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessageGroupPosition : Swift.Int {
  case none
  case top
  case middle
  case bottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessageFileType : Swift.Int {
  case image
  case video
  case audio
  case pdf
  case etc
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SBUMessageReceiptState : Swift.Int {
  case none
  case readReceipt
  case deliveryReceipt
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessageEditItem : Swift.Int {
  case copy
  case edit
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessageMenuItem : Swift.Int {
  case save
  case copy
  case edit
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NewMessageInfoItemType : Swift.Int {
  case tooltip
  case button
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LogType : Swift.UInt8 {
  case none = 0b00000000
  case error = 0b00000001
  case warning = 0b00000010
  case info = 0b00000100
  case all = 0b00000111
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open func sbu_setupNavigationBarAppearance(tintColor: UIKit.UIColor)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SBUMessageStateView : UIKit.UIView {
  @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUMessageCellTheme {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var stateImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var timeLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var timeFormat: Swift.String
  @_Concurrency.MainActor(unsafe) public var timeLabelCustomSize: CoreFoundation.CGSize?
  @_Concurrency.MainActor(unsafe) public init(sendingState: SendBirdSDK.SBDMessageSendingStatus, receiptState: SendBirdUIKit.SBUMessageReceiptState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "MessageStateView(type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupViews()
  @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func configure(timestamp: Swift.Int64, sendingState: SendBirdSDK.SBDMessageSendingStatus, receiptState: SendBirdUIKit.SBUMessageReceiptState?, position: SendBirdUIKit.MessagePosition)
  @objc deinit
}
extension Foundation.Date {
  public enum SBUDateFormat : Swift.String {
    case EMMMyyyy
    case MMMddyyyy
    case EMMMdd
    case MMMdd
    case hhmma
    case hhmm
    case yyyyMMddhhmm
    case yyyyMMddhhmmss
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func sbu_toString(format: Foundation.Date.SBUDateFormat, localizedFormat: Swift.Bool = true) -> Swift.String
  public func sbu_toString(formatString: Swift.String, localizedFormat: Swift.Bool = true) -> Swift.String
}
extension Swift.Array where Element : SendBirdUIKit.SBUUser {
  public func sbu_getUserIds() -> [Swift.String]
  public func sbu_getUserNicknames() -> [Swift.String]
}
extension Swift.Array where Element : SendBirdSDK.SBDUser {
  public func sbu_convertUserList() -> [SendBirdUIKit.SBUUser]
}
extension Swift.Array where Element : SendBirdSDK.SBDMember {
  public func sbu_convertUserList() -> [SendBirdUIKit.SBUUser]
}
extension Foundation.NSArray {
  @objc dynamic public func sbu_getUserIds() -> [Swift.String]
  @objc dynamic public func sbu_getUserNicknames() -> [Swift.String]
  @objc dynamic public func sbu_convertUserList() -> [SendBirdUIKit.SBUUser]
}
@_hasMissingDesignatedInitializers @available(*, deprecated, renamed: "SBUBaseMessageCell")
@IBDesignable open class SBUMessageBaseCell {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUBaseMessageCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var message: SendBirdSDK.SBDBaseMessage
  @objc @_Concurrency.MainActor(unsafe) public var position: SendBirdUIKit.MessagePosition
  @objc @_Concurrency.MainActor(unsafe) public var groupPosition: SendBirdUIKit.MessageGroupPosition
  @objc @_Concurrency.MainActor(unsafe) public var receiptState: SendBirdUIKit.SBUMessageReceiptState
  @objc @_Concurrency.MainActor(unsafe) public var messageContentView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var dateView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUMessageCellTheme {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) open func setupActions()
  @objc @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func configure(message: SendBirdSDK.SBDBaseMessage, position: SendBirdUIKit.MessagePosition, hideDateView: Swift.Bool, groupPosition: SendBirdUIKit.MessageGroupPosition = .none, receiptState: SendBirdUIKit.SBUMessageReceiptState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SBUMessageProfileView", message: "deprecated in 2.0.0")
@_Concurrency.MainActor(unsafe) public class MessageProfileView : SendBirdUIKit.SBUMessageProfileView {
  @_Concurrency.MainActor(unsafe) override public init(urlString: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SBUUserNameView", message: "deprecated in 2.0.0")
@_Concurrency.MainActor(unsafe) public class UserNameView : SendBirdUIKit.SBUUserNameView {
  @_Concurrency.MainActor(unsafe) override public init(username: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SBUMessageStateView", message: "deprecated in 2.0.0")
@_Concurrency.MainActor(unsafe) public class MessageStateView : SendBirdUIKit.SBUMessageStateView {
  @_Concurrency.MainActor(unsafe) override public init(sendingState: SendBirdSDK.SBDMessageSendingStatus, receiptState: SendBirdUIKit.SBUMessageReceiptState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SBUMessageProfileView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(urlString: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUMain : ObjectiveC.NSObject {
  @objc public static func initialize(applicationId: Swift.String)
  @objc public static func connect(completionHandler: @escaping (_ user: SendBirdSDK.SBDUser?, _ error: SendBirdSDK.SBDError?) -> Swift.Void)
  @objc public static func connectionCheck(completionHandler: @escaping (_ user: SendBirdSDK.SBDUser?, _ error: SendBirdSDK.SBDError?) -> Swift.Void)
  @objc public static func disconnect(completionHandler: (() -> Swift.Void)?)
  @objc public static func updateUserInfo(nickname: Swift.String?, profileUrl: Swift.String?, completionHandler: ((_ error: SendBirdSDK.SBDError?) -> Swift.Void)?)
  @objc public static func updateUserInfo(nickname: Swift.String?, profileImage: Foundation.Data?, completionHandler: ((_ error: SendBirdSDK.SBDError?) -> Swift.Void)?)
  @objc @available(*, deprecated, renamed: "shortVersionString()")
  public static func getUIKitVersion() -> Swift.String
  @objc public static func versionString() -> Swift.String?
  @objc public static func shortVersionString() -> Swift.String?
  @objc public static func registerPush(deviceToken: Foundation.Data, completionHandler: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc public static func unregisterPushToken(completionHandler: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc public static func unregisterAllPushToken(completionHandler: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "moveToChannel(channelUrl:basedOnChannelList:messageListParams:)", message: "deprecated in 1.2.2")
  public static func openChannel(channelUrl: Swift.String, basedOnChannelList: Swift.Bool = true, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @objc public static func moveToChannel(channelUrl: Swift.String, basedOnChannelList: Swift.Bool = true, messageListParams: SendBirdSDK.SBDMessageListParams? = nil, channelType: SendBirdUIKit.ChannelType = .group)
  @objc public static func createAndMoveToChannel(userIds: [Swift.String], messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @objc public static func createAndMoveToChannel(params: SendBirdSDK.SBDGroupChannelParams, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
  @objc public static func setLogLevel(_ type: SendBirdUIKit.LogType)
  public static func setLogLevel(_ types: [SendBirdUIKit.LogType])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SBUUserNameView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var usernameColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public init(username: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUChannelSettingsViewController : SendBirdUIKit.SBUBaseChannelSettingViewController {
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDGroupChannel? {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUChannelSettingsViewController.init(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUChannelSettingsViewController.init(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDGroupChannel)
  @objc @_Concurrency.MainActor(unsafe) public init(channelUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override public func loadChannel(channelUrl: Swift.String?)
  @objc @available(*, deprecated, renamed: "updateChannel(channelName:coverImage:)", message: "deprecated in 1.0.9")
  @_Concurrency.MainActor(unsafe) public func updateChannelInfo(channelName: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override public func updateChannel(channelName: Swift.String? = nil, coverImage: UIKit.UIImage? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func updateChannel(params: SendBirdSDK.SBDGroupChannelParams)
  @objc @_Concurrency.MainActor(unsafe) public func changeNotification(isOn: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func leaveChannel()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@objc public protocol SBUEmptyViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didSelectRetry()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUEmptyView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var type: SendBirdUIKit.EmptyViewType
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any SendBirdUIKit.SBUEmptyViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var statusImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var statusLabel: UIKit.UILabel
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUComponentTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var overlayTheme: SendBirdUIKit.SBUComponentTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var retryButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "SBUEmptyView.init(frame:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupViews()
  @objc @_Concurrency.MainActor(unsafe) open func setupAutolayout()
  @objc @_Concurrency.MainActor(unsafe) open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func reloadData(_ type: SendBirdUIKit.EmptyViewType)
  @objc @_Concurrency.MainActor(unsafe) open func updateViews()
  @objc @_Concurrency.MainActor(unsafe) open func onClickRetry(_ sender: Any)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUMessageSearchViewController : SendBirdUIKit.SBUBaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUMessageSearchTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDBaseChannel? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageListParams: SendBirdSDK.SBDMessageListParams?
  @objc @_Concurrency.MainActor(unsafe) public var customMessageSearchQueryBuilder: ((SendBirdSDK.SBDMessageSearchQueryBuilder) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var searchResultList: [SendBirdSDK.SBDBaseMessage] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var messageSearchResultCell: SendBirdUIKit.SBUMessageSearchResultCell?
  @objc @_Concurrency.MainActor(unsafe) public var searchBar: UIKit.UIView! {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUMessageSearchViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUMessageSearchViewController(channel:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @available(*, deprecated, renamed: "errorHandler", message: "deprecated in 2.1.12")
  @_Concurrency.MainActor(unsafe) open func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func register(messageSearchResultCell: SendBirdUIKit.SBUMessageSearchResultCell, nib: UIKit.UINib? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func search(keyword: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override public func onClickBack()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @objc @_Concurrency.MainActor(unsafe) public func setupSearchBarStyle(searchBar: UIKit.UISearchBar)
  @objc @_Concurrency.MainActor(unsafe) open func message(at indexPath: Foundation.IndexPath) -> SendBirdSDK.SBDBaseMessage?
  @objc @_Concurrency.MainActor(unsafe) public func enterChannel(with message: SendBirdSDK.SBDBaseMessage, highlightInfo: SendBirdUIKit.SBUHighlightMessageInfo?, messageListParams: SendBirdSDK.SBDMessageListParams? = nil)
}
extension SendBirdUIKit.SBUMessageSearchViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
extension SendBirdUIKit.SBUMessageSearchViewController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func searchBarTextDidEndEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
}
extension SendBirdUIKit.SBUMessageSearchViewController : SendBirdUIKit.SBUEmptyViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectRetry()
}
extension SendBirdUIKit.SBUMessageSearchViewController {
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
}
extension Swift.Sequence where Self.Element : Swift.Hashable {
  public func sbu_unique() -> [Self.Iterator.Element]
}
@propertyWrapper public class SBUAtomic<Value> {
  public init(wrappedValue value: Value)
  public var wrappedValue: Value {
    get
    set
  }
  @objc deinit
}
@propertyWrapper public struct SBUAutoLayout<T> where T : UIKit.UIView {
  public var wrappedValue: T {
    get
    set
  }
  public init(wrappedValue: T)
}
@propertyWrapper public struct SBUThemeWrapper<T> {
  public var wrappedValue: T {
    get
    set
  }
  public init(theme: T, setToDefault: Swift.Bool = false)
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUUserMessageCell : SendBirdUIKit.SBUContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var messageTextView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userMessage: SendBirdSDK.SBDUserMessage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(_ message: SendBirdSDK.SBDUserMessage, hideDateView: Swift.Bool, groupPosition: SendBirdUIKit.MessageGroupPosition, receiptState: SendBirdUIKit.SBUMessageReceiptState?, useReaction: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func configure(_ message: SendBirdSDK.SBDBaseMessage, hideDateView: Swift.Bool, receiptState: SendBirdUIKit.SBUMessageReceiptState?, groupPosition: SendBirdUIKit.MessageGroupPosition, withTextView: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func configure(highlightInfo: SendBirdUIKit.SBUHighlightMessageInfo?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class SBUHighlightMessageInfo : ObjectiveC.NSObject {
  @objc final public let messageId: Swift.Int64
  @objc final public let updatedAt: Swift.Int64
  @objc public init(messageId: Swift.Int64, updatedAt: Swift.Int64)
  @objc deinit
}
extension UIKit.UIColor {
  public static func sbu_from(image: UIKit.UIImage, imageView: UIKit.UIImageView? = nil, size: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor) -> UIKit.UIColor
}
@objc public protocol SBUUserProfileViewDelegate {
  @objc func didSelectClose()
  @objc func didSelectMessage(userId: Swift.String?)
}
@objc public protocol SBUUserProfileViewProtocol {
  @objc func show(baseView: UIKit.UIView, user: SendBirdUIKit.SBUUser?)
  @objc func show(baseView: UIKit.UIView, user: SendBirdUIKit.SBUUser?, isOpenChannel: Swift.Bool)
  @objc func dismiss()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUTheme : ObjectiveC.NSObject {
  @objc public init(channelListTheme: SendBirdUIKit.SBUChannelListTheme = .light, channelCellTheme: SendBirdUIKit.SBUChannelCellTheme = .light, channelTheme: SendBirdUIKit.SBUChannelTheme = .light, messageInputTheme: SendBirdUIKit.SBUMessageInputTheme = .light, messageCellTheme: SendBirdUIKit.SBUMessageCellTheme = .light, userListTheme: SendBirdUIKit.SBUUserListTheme = .light, userCellTheme: SendBirdUIKit.SBUUserCellTheme = .light, channelSettingsTheme: SendBirdUIKit.SBUChannelSettingsTheme = .light, userProfileTheme: SendBirdUIKit.SBUUserProfileTheme = .light, componentTheme: SendBirdUIKit.SBUComponentTheme = .light, overlayTheme: SendBirdUIKit.SBUOverlayTheme = .init(), messageSearchTheme: SendBirdUIKit.SBUMessageSearchTheme = .light, messageSearchResultCellTheme: SendBirdUIKit.SBUMessageSearchResultCellTheme = .light)
  @objc public static func set(theme: SendBirdUIKit.SBUTheme)
  @objc public static func setChannelList(channelListTheme: SendBirdUIKit.SBUChannelListTheme, channelCellTheme: SendBirdUIKit.SBUChannelCellTheme)
  @objc public static func setChannel(channelTheme: SendBirdUIKit.SBUChannelTheme, messageCellTheme: SendBirdUIKit.SBUMessageCellTheme, messageInputTheme: SendBirdUIKit.SBUMessageInputTheme, componentTheme: SendBirdUIKit.SBUComponentTheme)
  @objc public static func setUserList(userListTheme: SendBirdUIKit.SBUUserListTheme, userCellTheme: SendBirdUIKit.SBUUserCellTheme)
  @objc public static func setChannelSettings(channelSettingsTheme: SendBirdUIKit.SBUChannelSettingsTheme)
  @objc public static func setUserProfile(userProfileTheme: SendBirdUIKit.SBUUserProfileTheme)
  @objc public static var dark: SendBirdUIKit.SBUTheme {
    @objc get
  }
  @objc public static var light: SendBirdUIKit.SBUTheme {
    @objc get
  }
  @objc public static var channelListTheme: SendBirdUIKit.SBUChannelListTheme {
    @objc get
    @objc set
  }
  @objc public static var channelCellTheme: SendBirdUIKit.SBUChannelCellTheme {
    @objc get
    @objc set
  }
  @objc public static var channelTheme: SendBirdUIKit.SBUChannelTheme {
    @objc get
    @objc set
  }
  @objc public static var messageInputTheme: SendBirdUIKit.SBUMessageInputTheme {
    @objc get
    @objc set
  }
  @objc public static var messageCellTheme: SendBirdUIKit.SBUMessageCellTheme {
    @objc get
    @objc set
  }
  @objc public static var userListTheme: SendBirdUIKit.SBUUserListTheme {
    @objc get
    @objc set
  }
  @objc public static var userCellTheme: SendBirdUIKit.SBUUserCellTheme {
    @objc get
    @objc set
  }
  @objc public static var channelSettingsTheme: SendBirdUIKit.SBUChannelSettingsTheme {
    @objc get
    @objc set
  }
  @objc public static var userProfileTheme: SendBirdUIKit.SBUUserProfileTheme {
    @objc get
    @objc set
  }
  @objc public static var componentTheme: SendBirdUIKit.SBUComponentTheme {
    @objc get
    @objc set
  }
  @objc public static var overlayTheme: SendBirdUIKit.SBUOverlayTheme {
    @objc get
    @objc set
  }
  @objc public static var messageSearchTheme: SendBirdUIKit.SBUMessageSearchTheme {
    @objc get
    @objc set
  }
  @objc public static var messageSearchResultCellTheme: SendBirdUIKit.SBUMessageSearchResultCellTheme {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUOverlayTheme : ObjectiveC.NSObject {
  @objc public init(channelTheme: SendBirdUIKit.SBUChannelTheme = .overlay, messageInputTheme: SendBirdUIKit.SBUMessageInputTheme = .overlay, messageCellTheme: SendBirdUIKit.SBUMessageCellTheme = .overlay, componentTheme: SendBirdUIKit.SBUComponentTheme = .overlay)
  @objc override convenience dynamic public init()
  @objc public var channelTheme: SendBirdUIKit.SBUChannelTheme
  @objc public var messageInputTheme: SendBirdUIKit.SBUMessageInputTheme
  @objc public var messageCellTheme: SendBirdUIKit.SBUMessageCellTheme
  @objc public var componentTheme: SendBirdUIKit.SBUComponentTheme
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUChannelListTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUChannelListTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUChannelListTheme {
    @objc get
  }
  @objc public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primary300, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.primary300, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationBarShadowColor: UIKit.UIColor = SBUColorSet.onlight04, backgroundColor: UIKit.UIColor = SBUColorSet.background50, notificationOnBackgroundColor: UIKit.UIColor = SBUColorSet.primary300, notificationOnTintColor: UIKit.UIColor = SBUColorSet.background50, notificationOffBackgroundColor: UIKit.UIColor = SBUColorSet.background100, notificationOffTintColor: UIKit.UIColor = SBUColorSet.onlight01, leaveBackgroundColor: UIKit.UIColor = SBUColorSet.error300, leaveTintColor: UIKit.UIColor = SBUColorSet.background50, alertBackgroundColor: UIKit.UIColor = SBUColorSet.background50)
  @objc public var statusBarStyle: UIKit.UIStatusBarStyle
  @objc public var leftBarButtonTintColor: UIKit.UIColor
  @objc public var rightBarButtonTintColor: UIKit.UIColor
  @objc public var navigationBarTintColor: UIKit.UIColor
  @objc public var navigationBarShadowColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var notificationOnBackgroundColor: UIKit.UIColor
  @objc public var notificationOnTintColor: UIKit.UIColor
  @objc public var notificationOffBackgroundColor: UIKit.UIColor
  @objc public var notificationOffTintColor: UIKit.UIColor
  @objc public var leaveBackgroundColor: UIKit.UIColor
  @objc public var leaveTintColor: UIKit.UIColor
  @objc public var alertBackgroundColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUChannelCellTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUChannelCellTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUChannelCellTheme {
    @objc get
  }
  @objc public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, titleFont: UIKit.UIFont = SBUFontSet.subtitle1, titleTextColor: UIKit.UIColor = SBUColorSet.onlight01, memberCountFont: UIKit.UIFont = SBUFontSet.caption1, memberCountTextColor: UIKit.UIColor = SBUColorSet.onlight02, lastUpdatedTimeFont: UIKit.UIFont = SBUFontSet.caption2, lastUpdatedTimeTextColor: UIKit.UIColor = SBUColorSet.onlight02, messageFont: UIKit.UIFont = SBUFontSet.body3, messageTextColor: UIKit.UIColor = SBUColorSet.onlight03, broadcastMarkTintColor: UIKit.UIColor = SBUColorSet.secondary300, freezeStateTintColor: UIKit.UIColor = SBUColorSet.primary300, unreadCountBackgroundColor: UIKit.UIColor = SBUColorSet.primary300, unreadCountTextColor: UIKit.UIColor = SBUColorSet.ondark01, unreadCountFont: UIKit.UIFont = SBUFontSet.caption1, separatorLineColor: UIKit.UIColor = SBUColorSet.onlight04)
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var titleFont: UIKit.UIFont
  @objc public var titleTextColor: UIKit.UIColor
  @objc public var memberCountFont: UIKit.UIFont
  @objc public var memberCountTextColor: UIKit.UIColor
  @objc public var lastUpdatedTimeFont: UIKit.UIFont
  @objc public var lastUpdatedTimeTextColor: UIKit.UIColor
  @objc public var messageFont: UIKit.UIFont
  @objc public var messageTextColor: UIKit.UIColor
  @objc public var broadcastMarkTintColor: UIKit.UIColor
  @objc public var freezeStateTintColor: UIKit.UIColor
  @objc public var unreadCountBackgroundColor: UIKit.UIColor
  @objc public var unreadCountTextColor: UIKit.UIColor
  @objc public var unreadCountFont: UIKit.UIFont
  @objc public var separatorLineColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUChannelTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUChannelTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUChannelTheme {
    @objc get
  }
  @objc public static var overlay: SendBirdUIKit.SBUChannelTheme {
    @objc get
  }
  @objc public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationBarShadowColor: UIKit.UIColor = SBUColorSet.onlight04, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primary300, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.primary300, backgroundColor: UIKit.UIColor = SBUColorSet.background50, removeItemColor: UIKit.UIColor = SBUColorSet.error300, deleteItemColor: UIKit.UIColor = SBUColorSet.error300, cancelItemColor: UIKit.UIColor = SBUColorSet.primary300, alertRemoveColor: UIKit.UIColor = SBUColorSet.error300, alertCancelColor: UIKit.UIColor = SBUColorSet.primary300, menuTextColor: UIKit.UIColor = SBUColorSet.onlight01, menuItemTintColor: UIKit.UIColor = SBUColorSet.onlight01, channelStateBannerFont: UIKit.UIFont = SBUFontSet.caption2, channelStateBannerTextColor: UIKit.UIColor = SBUColorSet.onlight01, channelStateBannerBackgroundColor: UIKit.UIColor = SBUColorSet.information)
  @objc public var statusBarStyle: UIKit.UIStatusBarStyle
  @objc public var navigationBarTintColor: UIKit.UIColor
  @objc public var navigationBarShadowColor: UIKit.UIColor
  @objc public var leftBarButtonTintColor: UIKit.UIColor
  @objc public var rightBarButtonTintColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var removeItemColor: UIKit.UIColor
  @objc public var deleteItemColor: UIKit.UIColor
  @objc public var cancelItemColor: UIKit.UIColor
  @objc public var alertRemoveColor: UIKit.UIColor
  @objc public var alertCancelColor: UIKit.UIColor
  @objc public var menuTextColor: UIKit.UIColor
  @objc public var menuItemTintColor: UIKit.UIColor
  @objc public var channelStateBannerFont: UIKit.UIFont
  @objc public var channelStateBannerTextColor: UIKit.UIColor
  @objc public var channelStateBannerBackgroundColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUMessageInputTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUMessageInputTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUMessageInputTheme {
    @objc get
  }
  @objc public static var overlay: SendBirdUIKit.SBUMessageInputTheme {
    @objc get
  }
  @objc public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, textFieldBackgroundColor: UIKit.UIColor = SBUColorSet.background100, textFieldPlaceholderColor: UIKit.UIColor = SBUColorSet.onlight03, textFieldPlaceholderFont: UIKit.UIFont = SBUFontSet.body3, textFieldDisabledColor: UIKit.UIColor = SBUColorSet.onlight04, textFieldTintColor: UIKit.UIColor = SBUColorSet.primary300, textFieldTextColor: UIKit.UIColor = SBUColorSet.onlight01, textFieldBorderColor: UIKit.UIColor = SBUColorSet.background100, buttonTintColor: UIKit.UIColor = SBUColorSet.primary300, buttonDisabledTintColor: UIKit.UIColor = SBUColorSet.onlight04, cancelButtonFont: UIKit.UIFont = SBUFontSet.button2, saveButtonFont: UIKit.UIFont = SBUFontSet.button2, saveButtonTextColor: UIKit.UIColor = SBUColorSet.ondark01)
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var textFieldBackgroundColor: UIKit.UIColor
  @objc public var textFieldPlaceholderColor: UIKit.UIColor
  @objc public var textFieldPlaceholderFont: UIKit.UIFont
  @objc public var textFieldDisabledColor: UIKit.UIColor
  @objc public var textFieldTintColor: UIKit.UIColor
  @objc public var textFieldTextColor: UIKit.UIColor
  @objc public var textFieldBorderColor: UIKit.UIColor
  @objc public var buttonTintColor: UIKit.UIColor
  @objc public var buttonDisabledTintColor: UIKit.UIColor
  @objc public var cancelButtonFont: UIKit.UIFont
  @objc public var saveButtonFont: UIKit.UIFont
  @objc public var saveButtonTextColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUMessageCellTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUMessageCellTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUMessageCellTheme {
    @objc get
  }
  @objc public static var overlay: SendBirdUIKit.SBUMessageCellTheme {
    @objc get
  }
  @objc public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, leftBackgroundColor: UIKit.UIColor = SBUColorSet.background100, leftPressedBackgroundColor: UIKit.UIColor = SBUColorSet.primary100, rightBackgroundColor: UIKit.UIColor = SBUColorSet.primary300, rightPressedBackgroundColor: UIKit.UIColor = SBUColorSet.primary400, openChannelBackgroundColor: UIKit.UIColor = .clear, openChannelPressedBackgroundColor: UIKit.UIColor = SBUColorSet.background100, dateFont: UIKit.UIFont = SBUFontSet.caption1, dateTextColor: UIKit.UIColor = SBUColorSet.ondark01, dateBackgroundColor: UIKit.UIColor = SBUColorSet.overlay02, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.ondark01, userNameFont: UIKit.UIFont = SBUFontSet.caption1, userNameTextColor: UIKit.UIColor = SBUColorSet.onlight02, currentUserNameTextColor: UIKit.UIColor = SBUColorSet.secondary300, timeFont: UIKit.UIFont = SBUFontSet.caption4, timeTextColor: UIKit.UIColor = SBUColorSet.onlight03, pendingStateColor: UIKit.UIColor = SBUColorSet.primary300, failedStateColor: UIKit.UIColor = SBUColorSet.error300, succeededStateColor: UIKit.UIColor = SBUColorSet.onlight03, readReceiptStateColor: UIKit.UIColor = SBUColorSet.secondary300, deliveryReceiptStateColor: UIKit.UIColor = SBUColorSet.onlight03, userMessageFont: UIKit.UIFont = SBUFontSet.body3, userMessageLeftTextColor: UIKit.UIColor = SBUColorSet.onlight01, userMessageLeftEditTextColor: UIKit.UIColor = SBUColorSet.onlight02, userMessageLeftHighlightTextColor: UIKit.UIColor = SBUColorSet.onlight01, userMessageRightTextColor: UIKit.UIColor = SBUColorSet.ondark01, userMessageRightEditTextColor: UIKit.UIColor = SBUColorSet.ondark02, userMessageRightHighlightTextColor: UIKit.UIColor = SBUColorSet.onlight01, fileIconBackgroundColor: UIKit.UIColor = SBUColorSet.background50, fileImageBackgroundColor: UIKit.UIColor = SBUColorSet.ondark01, fileImageIconColor: UIKit.UIColor = SBUColorSet.onlight02, fileIconColor: UIKit.UIColor = SBUColorSet.primary300, fileMessageNameFont: UIKit.UIFont = SBUFontSet.body3, fileMessageLeftTextColor: UIKit.UIColor = SBUColorSet.onlight01, fileMessageRightTextColor: UIKit.UIColor = SBUColorSet.ondark01, fileMessagePlaceholderColor: UIKit.UIColor = SBUColorSet.onlight02, adminMessageFont: UIKit.UIFont = SBUFontSet.caption2, adminMessageTextColor: UIKit.UIColor = SBUColorSet.onlight02, unknownMessageDescFont: UIKit.UIFont = SBUFontSet.body3, unknownMessageDescTextColor: UIKit.UIColor = SBUColorSet.onlight03, ogTitleFont: UIKit.UIFont = SBUFontSet.body2, ogTitleColor: UIKit.UIColor = SBUColorSet.onlight01, ogDescriptionFont: UIKit.UIFont = SBUFontSet.caption2, ogDescriptionColor: UIKit.UIColor = SBUColorSet.onlight01, ogURLAddressFont: UIKit.UIFont = SBUFontSet.caption2, ogURLAddressColor: UIKit.UIColor = SBUColorSet.onlight02, linkColor: UIKit.UIColor = SBUColorSet.primary300, contentBackgroundColor: UIKit.UIColor = SBUColorSet.background100, pressedContentBackgroundColor: UIKit.UIColor = SBUColorSet.background300)
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var leftBackgroundColor: UIKit.UIColor
  @objc public var leftPressedBackgroundColor: UIKit.UIColor
  @objc public var rightBackgroundColor: UIKit.UIColor
  @objc public var rightPressedBackgroundColor: UIKit.UIColor
  @objc public var openChannelBackgroundColor: UIKit.UIColor
  @objc public var openChannelPressedBackgroundColor: UIKit.UIColor
  @objc public var dateFont: UIKit.UIFont
  @objc public var dateTextColor: UIKit.UIColor
  @objc public var dateBackgroundColor: UIKit.UIColor
  @objc public var userPlaceholderBackgroundColor: UIKit.UIColor
  @objc public var userPlaceholderTintColor: UIKit.UIColor
  @objc public var userNameFont: UIKit.UIFont
  @objc public var userNameTextColor: UIKit.UIColor
  @objc public var currentUserNameTextColor: UIKit.UIColor
  @objc public var timeFont: UIKit.UIFont
  @objc public var timeTextColor: UIKit.UIColor
  @objc public var pendingStateColor: UIKit.UIColor
  @objc public var failedStateColor: UIKit.UIColor
  @objc public var succeededStateColor: UIKit.UIColor
  @objc public var readReceiptStateColor: UIKit.UIColor
  @objc public var deliveryReceiptStateColor: UIKit.UIColor
  @objc public var contentBackgroundColor: UIKit.UIColor
  @objc public var pressedContentBackgroundColor: UIKit.UIColor
  @objc public var userMessageFont: UIKit.UIFont
  @objc public var userMessageLeftTextColor: UIKit.UIColor
  @objc public var userMessageLeftEditTextColor: UIKit.UIColor
  @objc public var userMessageRightTextColor: UIKit.UIColor
  @objc public var userMessageRightEditTextColor: UIKit.UIColor
  @objc public var fileIconBackgroundColor: UIKit.UIColor
  @objc public var fileIconColor: UIKit.UIColor
  @objc public var fileImageBackgroundColor: UIKit.UIColor
  @objc public var fileImageIconColor: UIKit.UIColor
  @objc public var fileMessageNameFont: UIKit.UIFont
  @objc public var fileMessageLeftTextColor: UIKit.UIColor
  @objc public var fileMessageRightTextColor: UIKit.UIColor
  @objc public var fileMessagePlaceholderColor: UIKit.UIColor
  @objc public var adminMessageFont: UIKit.UIFont
  @objc public var adminMessageTextColor: UIKit.UIColor
  @objc public var unknownMessageDescFont: UIKit.UIFont
  @objc public var unknownMessageDescTextColor: UIKit.UIColor
  @objc public var messageLeftHighlightTextColor: UIKit.UIColor
  @objc public var messageRightHighlightTextColor: UIKit.UIColor
  @objc public var ogTitleFont: UIKit.UIFont
  @objc public var ogTitleColor: UIKit.UIColor
  @objc public var ogDescriptionFont: UIKit.UIFont
  @objc public var ogDescriptionColor: UIKit.UIColor
  @objc public var ogURLAddressFont: UIKit.UIFont
  @objc public var ogURLAddressColor: UIKit.UIColor
  @objc public var linkColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUUserListTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUUserListTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUUserListTheme {
    @objc get
  }
  @objc public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationShadowColor: UIKit.UIColor = SBUColorSet.onlight04, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primary300, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.onlight04, rightBarButtonSelectedTintColor: UIKit.UIColor = SBUColorSet.primary300, barButtonTintColor: UIKit.UIColor = SBUColorSet.primary300, barButtonDisabledTintColor: UIKit.UIColor = SBUColorSet.onlight04, backgroundColor: UIKit.UIColor = SBUColorSet.background50, coverImageTintColor: UIKit.UIColor = SBUColorSet.ondark01, coverImageBackgroundColor: UIKit.UIColor = SBUColorSet.background300, itemTextColor: UIKit.UIColor = SBUColorSet.onlight01, itemColor: UIKit.UIColor = SBUColorSet.primary300, removeColor: UIKit.UIColor = SBUColorSet.error300, placeholderTintColor: UIKit.UIColor = SBUColorSet.onlight03, textfieldTextColor: UIKit.UIColor = SBUColorSet.onlight01)
  @objc public var statusBarStyle: UIKit.UIStatusBarStyle
  @objc public var navigationBarTintColor: UIKit.UIColor
  @objc public var navigationShadowColor: UIKit.UIColor
  @objc public var leftBarButtonTintColor: UIKit.UIColor
  @objc public var rightBarButtonTintColor: UIKit.UIColor
  @objc public var rightBarButtonSelectedTintColor: UIKit.UIColor
  @objc public var barButtonTintColor: UIKit.UIColor
  @objc public var barButtonDisabledTintColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var coverImageTintColor: UIKit.UIColor
  @objc public var coverImageBackgroundColor: UIKit.UIColor
  @objc public var itemTextColor: UIKit.UIColor
  @objc public var itemColor: UIKit.UIColor
  @objc public var removeColor: UIKit.UIColor
  @objc public var placeholderTintColor: UIKit.UIColor
  @objc public var textfieldTextColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUUserCellTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUUserCellTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUUserCellTheme {
    @objc get
  }
  @objc public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, checkboxOnColor: UIKit.UIColor = SBUColorSet.primary300, checkboxOffColor: UIKit.UIColor = SBUColorSet.background300, userNameTextColor: UIKit.UIColor = SBUColorSet.onlight01, userNameFont: UIKit.UIFont = SBUFontSet.subtitle2, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.ondark01, mutedStateBackgroundColor: UIKit.UIColor = SBUColorSet.primary300.withAlphaComponent(0.6), mutedStateIconColor: UIKit.UIColor = SBUColorSet.ondark01, subInfoTextColor: UIKit.UIColor = SBUColorSet.onlight02, subInfoFont: UIKit.UIFont = SBUFontSet.body2, moreButtonColor: UIKit.UIColor = SBUColorSet.onlight01, moreButtonDisabledColor: UIKit.UIColor = SBUColorSet.onlight04, separateColor: UIKit.UIColor = SBUColorSet.onlight04)
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var checkboxOnColor: UIKit.UIColor
  @objc public var checkboxOffColor: UIKit.UIColor
  @objc public var userNameTextColor: UIKit.UIColor
  @objc public var userNameFont: UIKit.UIFont
  @objc public var userPlaceholderBackgroundColor: UIKit.UIColor
  @objc public var userPlaceholderTintColor: UIKit.UIColor
  @objc public var mutedStateBackgroundColor: UIKit.UIColor
  @objc public var mutedStateIconColor: UIKit.UIColor
  @objc public var subInfoTextColor: UIKit.UIColor
  @objc public var subInfoFont: UIKit.UIFont
  @objc public var moreButtonColor: UIKit.UIColor
  @objc public var moreButtonDisabledColor: UIKit.UIColor
  @objc public var separateColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUChannelSettingsTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUChannelSettingsTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUChannelSettingsTheme {
    @objc get
  }
  @objc public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationShadowColor: UIKit.UIColor = SBUColorSet.onlight04, leftBarButtonTintColor: UIKit.UIColor = SBUColorSet.primary300, rightBarButtonTintColor: UIKit.UIColor = SBUColorSet.primary300, backgroundColor: UIKit.UIColor = SBUColorSet.background50, cellTextFont: UIKit.UIFont = SBUFontSet.subtitle2, cellTextColor: UIKit.UIColor = SBUColorSet.onlight01, cellSubTextFont: UIKit.UIFont = SBUFontSet.subtitle2, cellSubTextColor: UIKit.UIColor = SBUColorSet.onlight02, cellSwitchColor: UIKit.UIColor = SBUColorSet.primary300, cellSeparateColor: UIKit.UIColor = SBUColorSet.onlight04, cellTypeIconTintColor: UIKit.UIColor = SBUColorSet.primary300, cellArrowIconTintColor: UIKit.UIColor = SBUColorSet.onlight01, cellLeaveIconColor: UIKit.UIColor = SBUColorSet.error300, cellDeleteIconColor: UIKit.UIColor = SBUColorSet.error300, userNameFont: UIKit.UIFont = SBUFontSet.subtitle1, userNameTextColor: UIKit.UIColor = SBUColorSet.onlight01, itemTextColor: UIKit.UIColor = SBUColorSet.onlight01, itemColor: UIKit.UIColor = SBUColorSet.primary300, urlTitleFont: UIKit.UIFont = SBUFontSet.body2, urlTitleColor: UIKit.UIColor = SBUColorSet.onlight02, urlFont: UIKit.UIFont = SBUFontSet.body3, urlColor: UIKit.UIColor = SBUColorSet.onlight01)
  @objc public var statusBarStyle: UIKit.UIStatusBarStyle
  @objc public var navigationBarTintColor: UIKit.UIColor
  @objc public var navigationShadowColor: UIKit.UIColor
  @objc public var leftBarButtonTintColor: UIKit.UIColor
  @objc public var rightBarButtonTintColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var cellTextFont: UIKit.UIFont
  @objc public var cellTextColor: UIKit.UIColor
  @objc public var cellSubTextFont: UIKit.UIFont
  @objc public var cellSubTextColor: UIKit.UIColor
  @objc public var cellSwitchColor: UIKit.UIColor
  @objc public var cellSeparateColor: UIKit.UIColor
  @objc public var cellTypeIconTintColor: UIKit.UIColor
  @objc public var cellArrowIconTintColor: UIKit.UIColor
  @objc public var cellLeaveIconColor: UIKit.UIColor
  @objc public var cellDeleteIconColor: UIKit.UIColor
  @objc @available(*, deprecated, renamed: "cellTypeIconTintColor", message: "deprecated in 1.2.0")
  public var cellNotificationIconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "cellTypeIconTintColor", message: "deprecated in 1.2.0")
  public var cellMemberIconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "cellArrowIconTintColor", message: "deprecated in 1.2.0")
  public var cellMemberButtonColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var userNameFont: UIKit.UIFont
  @objc public var userNameTextColor: UIKit.UIColor
  @objc public var itemTextColor: UIKit.UIColor
  @objc public var itemColor: UIKit.UIColor
  @objc public var urlTitleFont: UIKit.UIFont
  @objc public var urlTitleColor: UIKit.UIColor
  @objc public var urlFont: UIKit.UIFont
  @objc public var urlColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUUserProfileTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUUserProfileTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUUserProfileTheme {
    @objc get
  }
  @objc public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, overlayColor: UIKit.UIColor = SBUColorSet.overlay02, backgroundColor: UIKit.UIColor = SBUColorSet.background50, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.ondark01, usernameTextColor: UIKit.UIColor = SBUColorSet.onlight01, usernameFont: UIKit.UIFont = SBUFontSet.h1, userRoleTextColor: UIKit.UIColor = SBUColorSet.onlight02, userRoleFont: UIKit.UIFont = SBUFontSet.body3, largeItemTintColor: UIKit.UIColor = SBUColorSet.onlight01, largeItemFont: UIKit.UIFont = SBUFontSet.button2, largeItemBackgroundColor: UIKit.UIColor = SBUColorSet.background50, largeItemHighlightedColor: UIKit.UIColor = SBUColorSet.background100, itemFont: UIKit.UIFont = SBUFontSet.caption1, itemBackgroundColor: UIKit.UIColor = SBUColorSet.background400, itemSelectedBackgroundColor: UIKit.UIColor = SBUColorSet.primary300, itemTintColor: UIKit.UIColor = SBUColorSet.onlight01, itemSelectedTintColor: UIKit.UIColor = SBUColorSet.ondark01, itemHighlightedTintColor: UIKit.UIColor = SBUColorSet.error300, separatorColor: UIKit.UIColor = SBUColorSet.onlight04, informationTitleColor: UIKit.UIColor = SBUColorSet.onlight02, informationTitleFont: UIKit.UIFont = SBUFontSet.body2, informationDesctiptionColor: UIKit.UIColor = SBUColorSet.onlight01, informationDesctiptionFont: UIKit.UIFont = SBUFontSet.body3)
  @objc public var statusBarStyle: UIKit.UIStatusBarStyle
  @objc public var overlayColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var userPlaceholderBackgroundColor: UIKit.UIColor
  @objc public var userPlaceholderTintColor: UIKit.UIColor
  @objc public var usernameTextColor: UIKit.UIColor
  @objc public var usernameFont: UIKit.UIFont
  @objc public var userRoleTextColor: UIKit.UIColor
  @objc public var userRoleFont: UIKit.UIFont
  @objc public var largeItemTintColor: UIKit.UIColor
  @objc public var largeItemFont: UIKit.UIFont
  @objc public var largeItemBackgroundColor: UIKit.UIColor
  @objc public var largeItemHighlightedColor: UIKit.UIColor
  @objc public var itemFont: UIKit.UIFont
  @objc public var itemBackgroundColor: UIKit.UIColor
  @objc public var itemSelectedBackgroundColor: UIKit.UIColor
  @objc public var itemTintColor: UIKit.UIColor
  @objc public var itemSelectedTintColor: UIKit.UIColor
  @objc public var itemHighlightedTintColor: UIKit.UIColor
  @objc public var separatorColor: UIKit.UIColor
  @objc public var informationTitleColor: UIKit.UIColor
  @objc public var informationTitleFont: UIKit.UIFont
  @objc public var informationDesctiptionColor: UIKit.UIColor
  @objc public var informationDesctiptionFont: UIKit.UIFont
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUComponentTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUComponentTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUComponentTheme {
    @objc get
  }
  @objc public static var overlay: SendBirdUIKit.SBUComponentTheme {
    @objc get
  }
  @objc public init(emptyViewBackgroundColor: UIKit.UIColor = SBUColorSet.background50, emptyViewStatusFont: UIKit.UIFont = SBUFontSet.body3, emptyViewStatusTintColor: UIKit.UIColor = SBUColorSet.onlight03, emptyViewRetryButtonTintColor: UIKit.UIColor = SBUColorSet.primary300, emptyViewRetryButtonFont: UIKit.UIFont = SBUFontSet.button2, overlayColor: UIKit.UIColor = SBUColorSet.overlay02, backgroundColor: UIKit.UIColor = SBUColorSet.background50, highlightedColor: UIKit.UIColor = SBUColorSet.background100, buttonTextColor: UIKit.UIColor = SBUColorSet.primary300, separatorColor: UIKit.UIColor = SBUColorSet.onlight04, shadowColor: UIKit.UIColor = SBUColorSet.background700, closeBarButtonTintColor: UIKit.UIColor = SBUColorSet.onlight01, alertTitleColor: UIKit.UIColor = SBUColorSet.onlight01, alertTitleFont: UIKit.UIFont = SBUFontSet.h3, alertDetailColor: UIKit.UIColor = SBUColorSet.onlight02, alertDetailFont: UIKit.UIFont = SBUFontSet.body3, alertPlaceholderColor: UIKit.UIColor = SBUColorSet.onlight03, alertButtonColor: UIKit.UIColor = SBUColorSet.primary300, alertErrorColor: UIKit.UIColor = SBUColorSet.error300, alertButtonFont: UIKit.UIFont = SBUFontSet.button2, alertTextFieldBackgroundColor: UIKit.UIColor = SBUColorSet.background100, alertTextFieldTintColor: UIKit.UIColor = SBUColorSet.primary300, alertTextFieldFont: UIKit.UIFont = SBUFontSet.body3, actionSheetTextFont: UIKit.UIFont = SBUFontSet.subtitle1, actionSheetTextColor: UIKit.UIColor = SBUColorSet.onlight01, actionSheetSubTextFont: UIKit.UIFont = SBUFontSet.body2, actionSheetSubTextColor: UIKit.UIColor = SBUColorSet.onlight02, actionSheetItemColor: UIKit.UIColor = SBUColorSet.primary300, actionSheetErrorColor: UIKit.UIColor = SBUColorSet.error300, actionSheetButtonFont: UIKit.UIFont = SBUFontSet.button1, newMessageFont: UIKit.UIFont = SBUFontSet.caption1, newMessageTintColor: UIKit.UIColor = SBUColorSet.primary300, newMessageBackground: UIKit.UIColor = SBUColorSet.background50.withAlphaComponent(0.96), newMessageHighlighted: UIKit.UIColor = SBUColorSet.background100.withAlphaComponent(0.96), newMessageButtonTintColor: UIKit.UIColor = SBUColorSet.ondark01, newMessageButtonBackground: UIKit.UIColor = SBUColorSet.primary300, newMessageButtonHighlighted: UIKit.UIColor = SBUColorSet.primary400, scrollBottomButtonIconColor: UIKit.UIColor = SBUColorSet.primary300, scrollBottomButtonBackground: UIKit.UIColor = SBUColorSet.background50.withAlphaComponent(0.96), scrollBottomButtonHighlighted: UIKit.UIColor = SBUColorSet.background100.withAlphaComponent(0.96), titleOnlineStateColor: UIKit.UIColor = SBUColorSet.secondary300, titleColor: UIKit.UIColor = SBUColorSet.onlight01, titleFont: UIKit.UIFont = SBUFontSet.h2, titleStatusColor: UIKit.UIColor = SBUColorSet.onlight03, titleStatusFont: UIKit.UIFont = SBUFontSet.caption2, menuTitleFont: UIKit.UIFont = SBUFontSet.subtitle2, userPlaceholderBackgroundColor: UIKit.UIColor = SBUColorSet.background300, userPlaceholderTintColor: UIKit.UIColor = SBUColorSet.ondark01, reactionBoxBackgroundColor: UIKit.UIColor = SBUColorSet.background50, reactionBoxBorderLineColor: UIKit.UIColor = SBUColorSet.background100, reactionBoxEmojiCountColor: UIKit.UIColor = SBUColorSet.onlight01, reactionBoxEmojiBackgroundColor: UIKit.UIColor = SBUColorSet.background100, reactionBoxSelectedEmojiBackgroundColor: UIKit.UIColor = SBUColorSet.primary100, reactionBoxEmojiCountFont: UIKit.UIFont = SBUFontSet.caption4, emojiCountColor: UIKit.UIColor = SBUColorSet.onlight02, emojiSelectedCountColor: UIKit.UIColor = SBUColorSet.primary300, emojiSelectedUnderlineColor: UIKit.UIColor = SBUColorSet.primary300, emojiCountFont: UIKit.UIFont = SBUFontSet.button3, reactionMenuLineColor: UIKit.UIColor = SBUColorSet.ondark04, emojiListSelectedBackgroundColor: UIKit.UIColor = SBUColorSet.primary100, addReactionTintColor: UIKit.UIColor = SBUColorSet.onlight03, channelTypeSelectorItemTintColor: UIKit.UIColor = SBUColorSet.primary300, channelTypeSelectorItemTextColor: UIKit.UIColor = SBUColorSet.onlight01, channelTypeSelectorItemFont: UIKit.UIFont = SBUFontSet.caption2, broadcastIconBackgroundColor: UIKit.UIColor = SBUColorSet.secondary300, broadcastIconTintColor: UIKit.UIColor = SBUColorSet.ondark01, barItemTintColor: UIKit.UIColor = SBUColorSet.primary300, loadingBackgroundColor: UIKit.UIColor = SBUColorSet.background700.withAlphaComponent(0.4), loadingPopupBackgroundColor: UIKit.UIColor = SBUColorSet.onlight02, loadingFont: UIKit.UIFont = SBUFontSet.subtitle2, loadingTextColor: UIKit.UIColor = SBUColorSet.ondark01, loadingSpinnerColor: UIKit.UIColor = SBUColorSet.ondark03)
  @objc public var emptyViewBackgroundColor: UIKit.UIColor
  @objc public var emptyViewStatusFont: UIKit.UIFont
  @objc public var emptyViewStatusTintColor: UIKit.UIColor
  @objc public var emptyViewRetryButtonTintColor: UIKit.UIColor
  @objc public var emptyViewRetryButtonFont: UIKit.UIFont
  @objc public var alertTitleColor: UIKit.UIColor
  @objc public var alertTitleFont: UIKit.UIFont
  @objc public var alertDetailColor: UIKit.UIColor
  @objc public var alertDetailFont: UIKit.UIFont
  @objc public var alertPlaceholderColor: UIKit.UIColor
  @objc public var alertButtonColor: UIKit.UIColor
  @objc public var alertErrorColor: UIKit.UIColor
  @objc public var alertButtonFont: UIKit.UIFont
  @objc public var alertTextFieldBackgroundColor: UIKit.UIColor
  @objc public var alertTextFieldTintColor: UIKit.UIColor
  @objc public var alertTextFieldFont: UIKit.UIFont
  @objc public var actionSheetTextFont: UIKit.UIFont
  @objc public var actionSheetTextColor: UIKit.UIColor
  @objc public var actionSheetSubTextFont: UIKit.UIFont
  @objc public var actionSheetSubTextColor: UIKit.UIColor
  @objc public var actionSheetItemColor: UIKit.UIColor
  @objc public var actionSheetErrorColor: UIKit.UIColor
  @objc public var actionSheetButtonFont: UIKit.UIFont
  @objc public var newMessageFont: UIKit.UIFont
  @objc public var newMessageTintColor: UIKit.UIColor
  @objc public var newMessageBackground: UIKit.UIColor
  @objc public var newMessageHighlighted: UIKit.UIColor
  @objc public var newMessageButtonTintColor: UIKit.UIColor
  @objc public var newMessageButtonBackground: UIKit.UIColor
  @objc public var newMessageButtonHighlighted: UIKit.UIColor
  @objc public var scrollBottomButtonIconColor: UIKit.UIColor
  @objc public var scrollBottomButtonBackground: UIKit.UIColor
  @objc public var scrollBottomButtonHighlighted: UIKit.UIColor
  @objc public var titleOnlineStateColor: UIKit.UIColor
  @objc public var titleColor: UIKit.UIColor
  @objc public var titleFont: UIKit.UIFont
  @objc public var titleStatusColor: UIKit.UIColor
  @objc public var titleStatusFont: UIKit.UIFont
  @objc public var menuTitleFont: UIKit.UIFont
  @objc public var overlayColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var highlightedColor: UIKit.UIColor
  @objc public var buttonTextColor: UIKit.UIColor
  @objc public var separatorColor: UIKit.UIColor
  @objc public var shadowColor: UIKit.UIColor
  @objc public var closeBarButtonTintColor: UIKit.UIColor
  @objc public var userPlaceholderBackgroundColor: UIKit.UIColor
  @objc public var userPlaceholderTintColor: UIKit.UIColor
  @objc public var reactionBoxBackgroundColor: UIKit.UIColor
  @objc public var reactionBoxBorderLineColor: UIKit.UIColor
  @objc public var reactionBoxEmojiCountColor: UIKit.UIColor
  @objc public var reactionBoxEmojiBackgroundColor: UIKit.UIColor
  @objc public var reactionBoxSelectedEmojiBackgroundColor: UIKit.UIColor
  @objc public var reactionBoxEmojiCountFont: UIKit.UIFont
  @objc public var emojiCountColor: UIKit.UIColor
  @objc public var emojiSelectedCountColor: UIKit.UIColor
  @objc public var emojiSelectedUnderlineColor: UIKit.UIColor
  @objc public var emojiCountFont: UIKit.UIFont
  @objc public var emojiListSelectedBackgroundColor: UIKit.UIColor
  @objc public var reactionMenuLineColor: UIKit.UIColor
  @objc public var addReactionTintColor: UIKit.UIColor
  @objc public var channelTypeSelectorItemTintColor: UIKit.UIColor
  @objc public var channelTypeSelectorItemTextColor: UIKit.UIColor
  @objc public var channelTypeSelectorItemFont: UIKit.UIFont
  @objc public var broadcastIconBackgroundColor: UIKit.UIColor
  @objc public var broadcastIconTintColor: UIKit.UIColor
  @objc public var barItemTintColor: UIKit.UIColor
  @objc public var loadingBackgroundColor: UIKit.UIColor
  @objc public var loadingPopupBackgroundColor: UIKit.UIColor
  @objc public var loadingFont: UIKit.UIFont
  @objc public var loadingTextColor: UIKit.UIColor
  @objc public var loadingSpinnerColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBUMessageSearchTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUMessageSearchTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUMessageSearchTheme {
    @objc get
  }
  @objc public var statusBarStyle: UIKit.UIStatusBarStyle
  @objc public var navigationBarStyle: UIKit.UIBarStyle
  @objc public var navigationBarTintColor: UIKit.UIColor
  @objc public var navigationBarShadowColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var searchTextColor: UIKit.UIColor
  @objc public var searchTextFont: UIKit.UIFont
  @objc public var searchTextBackgroundColor: UIKit.UIColor
  @objc public var searchPlaceholderColor: UIKit.UIColor
  @objc public var searchIconTintColor: UIKit.UIColor
  @objc public var clearIconTintColor: UIKit.UIColor
  @objc public var cancelButtonTintColor: UIKit.UIColor
  @objc public init(statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarStyle: UIKit.UIBarStyle = .default, navigationBarTintColor: UIKit.UIColor = SBUColorSet.background50, navigationBarShadowColor: UIKit.UIColor = SBUColorSet.onlight04, backgroundColor: UIKit.UIColor = SBUColorSet.background50, searchTextColor: UIKit.UIColor = SBUColorSet.onlight01, searchTextFont: UIKit.UIFont = SBUFontSet.body3, searchTextBackgroundColor: UIKit.UIColor = SBUColorSet.background100, searchPlaceholderColor: UIKit.UIColor = SBUColorSet.onlight03, searchIconTintColor: UIKit.UIColor = SBUColorSet.onlight03, clearIconTintColor: UIKit.UIColor = SBUColorSet.onlight03, cancelButtonTintColor: UIKit.UIColor = SBUColorSet.primary300)
  @objc deinit
}
@objc @objcMembers public class SBUMessageSearchResultCellTheme : ObjectiveC.NSObject {
  @objc public static var light: SendBirdUIKit.SBUMessageSearchResultCellTheme {
    @objc get
  }
  @objc public static var dark: SendBirdUIKit.SBUMessageSearchResultCellTheme {
    @objc get
  }
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var titleFont: UIKit.UIFont
  @objc public var titleTextColor: UIKit.UIColor
  @objc public var descriptionFont: UIKit.UIFont
  @objc public var descriptionTextColor: UIKit.UIColor
  @objc public var updatedAtFont: UIKit.UIFont
  @objc public var updatedAtTextColor: UIKit.UIColor
  @objc public var fileMessageFont: UIKit.UIFont
  @objc public var fileMessageTextColor: UIKit.UIColor
  @objc public var fileMessageIconBackgroundColor: UIKit.UIColor
  @objc public var fileMessageIconTintColor: UIKit.UIColor
  @objc public var separatorLineColor: UIKit.UIColor
  @objc public init(backgroundColor: UIKit.UIColor = SBUColorSet.background50, titleFont: UIKit.UIFont = SBUFontSet.subtitle1, titleTextColor: UIKit.UIColor = SBUColorSet.onlight01, descriptionFont: UIKit.UIFont = SBUFontSet.body3, descriptionTextColor: UIKit.UIColor = SBUColorSet.onlight03, updatedAtFont: UIKit.UIFont = SBUFontSet.caption2, updatedAtTextColor: UIKit.UIColor = SBUColorSet.onlight02, fileMessageFont: UIKit.UIFont = SBUFontSet.body3, fileMessageTextColor: UIKit.UIColor = SBUColorSet.onlight01, fileMessageIconBackgroundColor: UIKit.UIColor = SBUColorSet.background100, fileMessageIconTinkColor: UIKit.UIColor = SBUColorSet.primary300, separatorLineColor: UIKit.UIColor = SBUColorSet.onlight04)
  @objc deinit
}
@objc public protocol SBUInviteUserListDatasource : ObjectiveC.NSObjectProtocol {
  @objc func nextUserList() -> [SendBirdUIKit.SBUUser]?
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUOpenChannelUserMessageCell : SendBirdUIKit.SBUOpenChannelContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var messageTextView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userMessage: SendBirdSDK.SBDUserMessage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: SendBirdSDK.SBDBaseMessage, hideDateView: Swift.Bool, groupPosition: SendBirdUIKit.MessageGroupPosition, withTextView: Swift.Bool, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUFileMessageCell : SendBirdUIKit.SBUContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var fileMessage: SendBirdSDK.SBDFileMessage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) open func configure(_ message: SendBirdSDK.SBDFileMessage, hideDateView: Swift.Bool, groupPosition: SendBirdUIKit.MessageGroupPosition, receiptState: SendBirdUIKit.SBUMessageReceiptState?, useReaction: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func configure(highlightInfo: SendBirdUIKit.SBUHighlightMessageInfo?)
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, size: CoreFoundation.CGSize? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIImage {
  @objc dynamic public func sbu_with(tintColor: UIKit.UIColor?) -> UIKit.UIImage
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class SBUMemberListViewController : SendBirdUIKit.SBUBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) public var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightBarButton: UIKit.UIBarButtonItem? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var emptyView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var userProfileView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userCell: UIKit.UITableViewCell? {
    get
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var theme: SendBirdUIKit.SBUUserListTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @SendBirdUIKit.SBUThemeWrapper @_Concurrency.MainActor(unsafe) public var componentTheme: SendBirdUIKit.SBUComponentTheme {
    @objc get
    @objc set
    _modify
  }
  @objc @_Concurrency.MainActor(unsafe) public var memberListType: SendBirdUIKit.ChannelMemberListType {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channel: SendBirdSDK.SBDBaseChannel? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var channelUrl: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var memberList: [SendBirdUIKit.SBUUser] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var memberListQuery: SendBirdSDK.SBDGroupChannelMemberListQuery? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var operatorListQuery: SendBirdSDK.SBDOperatorListQuery? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var mutedMemberListQuery: SendBirdSDK.SBDGroupChannelMemberListQuery? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var bannedMemberListQuery: SendBirdSDK.SBDBannedUserListQuery? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var participantListQuery: SendBirdSDK.SBDParticipantListQuery? {
    @objc get
  }
  @available(*, unavailable, renamed: "SBUMemberListViewController(channelUrl:type:)")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable, renamed: "SBUMemberListViewController.init(channelUrl:)")
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDBaseChannel, type: SendBirdUIKit.ChannelMemberListType = .channelMembers)
  @objc @available(*, deprecated, renamed: "init(channelUrl:channelType:memberListType:)", message: "deprecated in 2.1.0")
  @_Concurrency.MainActor(unsafe) public init(channelUrl: Swift.String, type: SendBirdUIKit.ChannelMemberListType = .channelMembers)
  @objc @_Concurrency.MainActor(unsafe) public init(channel: SendBirdSDK.SBDBaseChannel, members: [SendBirdUIKit.SBUUser], type: SendBirdUIKit.ChannelMemberListType = .channelMembers)
  @objc @available(*, deprecated, renamed: "init(channelUrl:channelType:members:memberListType:)", message: "deprecated in 2.1.0")
  @_Concurrency.MainActor(unsafe) public init(channelUrl: Swift.String, members: [SendBirdUIKit.SBUUser], type: SendBirdUIKit.ChannelMemberListType = .channelMembers)
  @objc @_Concurrency.MainActor(unsafe) public init(channelUrl: Swift.String, channelType: SendBirdSDK.SBDChannelType, memberListType: SendBirdUIKit.ChannelMemberListType = .channelMembers)
  @objc @_Concurrency.MainActor(unsafe) public init(channelUrl: Swift.String, channelType: SendBirdSDK.SBDChannelType, members: [SendBirdUIKit.SBUUser], memberListType: SendBirdUIKit.ChannelMemberListType = .channelMembers)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @_Concurrency.MainActor(unsafe) @objc override open func updateStyles()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func loadChannel(channelUrl: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func loadNextMemberList(reset: Swift.Bool, members: [SendBirdUIKit.SBUUser]? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func nextMemberList() -> [SendBirdUIKit.SBUUser]?
  @objc @_Concurrency.MainActor(unsafe) public func loadMembers()
  @objc @_Concurrency.MainActor(unsafe) public func promoteToOperator(member: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) public func dismissOperator(member: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) public func mute(member: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) public func unmute(member: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) public func ban(member: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) public func unban(member: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func showInviteUser()
  @objc @_Concurrency.MainActor(unsafe) public func register(userCell: UIKit.UITableViewCell, nib: UIKit.UINib? = nil)
  @objc @available(*, deprecated, renamed: "resetMemberList()", message: "deprecated in 1.2.5")
  @_Concurrency.MainActor(unsafe) public func reloadMemberList()
  @objc @_Concurrency.MainActor(unsafe) public func resetMemberList()
  @objc @_Concurrency.MainActor(unsafe) public func reloadData()
  @objc @_Concurrency.MainActor(unsafe) open func onClickInviteUser()
  @objc @_Concurrency.MainActor(unsafe) open func setMoreMenuActionHandler(_ member: SendBirdUIKit.SBUUser)
  @objc @_Concurrency.MainActor(unsafe) open func setUserProfileTapGestureHandler(_ user: SendBirdUIKit.SBUUser)
  @_Concurrency.MainActor(unsafe) open func errorHandler(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
  @available(*, deprecated, renamed: "errorHandler", message: "deprecated in 2.1.12")
  @_Concurrency.MainActor(unsafe) open func didReceiveError(_ message: Swift.String?, _ code: ObjectiveC.NSInteger? = nil)
}
extension SendBirdUIKit.SBUMemberListViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
extension SendBirdUIKit.SBUMemberListViewController : SendBirdUIKit.SBUEmptyViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectRetry()
}
extension SendBirdUIKit.SBUMemberListViewController : SendBirdUIKit.SBUUserProfileViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectMessage(userId: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func didSelectClose()
}
extension SendBirdUIKit.SBUMemberListViewController : SendBirdSDK.SBDChannelDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channelDidUpdateOperators(_ sender: SendBirdSDK.SBDBaseChannel)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDGroupChannel, userDidJoin user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDGroupChannel, userDidLeave user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDOpenChannel, userDidExit user: SendBirdSDK.SBDUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func channel(_ sender: SendBirdSDK.SBDOpenChannel, userDidEnter user: SendBirdSDK.SBDUser)
}
extension SendBirdUIKit.SBUMemberListViewController {
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) dynamic open func shouldShowLoadingIndicator() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic open func shouldDismissLoadingIndicator()
}
@objc @_inheritsConvenienceInitializers @objcMembers @IBDesignable @_Concurrency.MainActor(unsafe) open class SBUOpenChannelFileMessageCell : SendBirdUIKit.SBUOpenChannelContentBaseMessageCell {
  @objc @_Concurrency.MainActor(unsafe) public var fileMessage: SendBirdSDK.SBDFileMessage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func setupViews()
  @_Concurrency.MainActor(unsafe) @objc override open func setupAutolayout()
  @_Concurrency.MainActor(unsafe) @objc override open func setupActions()
  @_Concurrency.MainActor(unsafe) @objc override open func setupStyles()
  @objc @_Concurrency.MainActor(unsafe) open func configure(_ message: SendBirdSDK.SBDFileMessage, hideDateView: Swift.Bool, groupPosition: SendBirdUIKit.MessageGroupPosition, fileType: SendBirdUIKit.MessageFileType, isOverlay: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, size: CoreFoundation.CGSize? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct DiskCache {
  public init()
  public func hasImage(key: Swift.String) -> Swift.Bool
  public func get(key: Swift.String) -> Foundation.NSData?
  public func set(key: Swift.String, data: Foundation.NSData)
  public func remove(key: Swift.String)
  public func removeAll()
}
extension SendBirdUIKit.ChannelType : Swift.Equatable {}
extension SendBirdUIKit.ChannelType : Swift.Hashable {}
extension SendBirdUIKit.ChannelType : Swift.RawRepresentable {}
extension SendBirdUIKit.ChannelSettingItemType : Swift.Equatable {}
extension SendBirdUIKit.ChannelSettingItemType : Swift.Hashable {}
extension SendBirdUIKit.ChannelSettingItemType : Swift.RawRepresentable {}
extension SendBirdUIKit.OpenChannelSettingItemType : Swift.Equatable {}
extension SendBirdUIKit.OpenChannelSettingItemType : Swift.Hashable {}
extension SendBirdUIKit.OpenChannelSettingItemType : Swift.RawRepresentable {}
extension SendBirdUIKit.ModerationItemType : Swift.Equatable {}
extension SendBirdUIKit.ModerationItemType : Swift.Hashable {}
extension SendBirdUIKit.ModerationItemType : Swift.RawRepresentable {}
extension SendBirdUIKit.UserListType : Swift.Equatable {}
extension SendBirdUIKit.UserListType : Swift.Hashable {}
extension SendBirdUIKit.UserListType : Swift.RawRepresentable {}
extension SendBirdUIKit.ChannelMemberListType : Swift.Equatable {}
extension SendBirdUIKit.ChannelMemberListType : Swift.Hashable {}
extension SendBirdUIKit.ChannelMemberListType : Swift.RawRepresentable {}
extension SendBirdUIKit.ChannelInviteListType : Swift.Equatable {}
extension SendBirdUIKit.ChannelInviteListType : Swift.Hashable {}
extension SendBirdUIKit.ChannelInviteListType : Swift.RawRepresentable {}
@available(*, deprecated, renamed: "UserListType", message: "deprecated in 1.2.0")
extension SendBirdUIKit.MemberListType : Swift.Equatable {}
@available(*, deprecated, renamed: "UserListType", message: "deprecated in 1.2.0")
extension SendBirdUIKit.MemberListType : Swift.Hashable {}
@available(*, deprecated, renamed: "UserListType", message: "deprecated in 1.2.0")
extension SendBirdUIKit.MemberListType : Swift.RawRepresentable {}
extension SendBirdUIKit.EmptyViewType : Swift.Equatable {}
extension SendBirdUIKit.EmptyViewType : Swift.Hashable {}
extension SendBirdUIKit.EmptyViewType : Swift.RawRepresentable {}
extension SendBirdUIKit.MediaResourceType : Swift.Equatable {}
extension SendBirdUIKit.MediaResourceType : Swift.Hashable {}
extension SendBirdUIKit.MediaResourceType : Swift.RawRepresentable {}
extension SendBirdUIKit.ChannelEditType : Swift.Equatable {}
extension SendBirdUIKit.ChannelEditType : Swift.Hashable {}
extension SendBirdUIKit.ChannelEditType : Swift.RawRepresentable {}
extension SendBirdUIKit.MessagePosition : Swift.Equatable {}
extension SendBirdUIKit.MessagePosition : Swift.Hashable {}
extension SendBirdUIKit.MessagePosition : Swift.RawRepresentable {}
extension SendBirdUIKit.MessageGroupPosition : Swift.Equatable {}
extension SendBirdUIKit.MessageGroupPosition : Swift.Hashable {}
extension SendBirdUIKit.MessageGroupPosition : Swift.RawRepresentable {}
extension SendBirdUIKit.MessageFileType : Swift.Equatable {}
extension SendBirdUIKit.MessageFileType : Swift.Hashable {}
extension SendBirdUIKit.MessageFileType : Swift.RawRepresentable {}
extension SendBirdUIKit.SBUMessageReceiptState : Swift.Equatable {}
extension SendBirdUIKit.SBUMessageReceiptState : Swift.Hashable {}
extension SendBirdUIKit.SBUMessageReceiptState : Swift.RawRepresentable {}
extension SendBirdUIKit.MessageEditItem : Swift.Equatable {}
extension SendBirdUIKit.MessageEditItem : Swift.Hashable {}
extension SendBirdUIKit.MessageEditItem : Swift.RawRepresentable {}
extension SendBirdUIKit.MessageMenuItem : Swift.Equatable {}
extension SendBirdUIKit.MessageMenuItem : Swift.Hashable {}
extension SendBirdUIKit.MessageMenuItem : Swift.RawRepresentable {}
extension SendBirdUIKit.NewMessageInfoItemType : Swift.Equatable {}
extension SendBirdUIKit.NewMessageInfoItemType : Swift.Hashable {}
extension SendBirdUIKit.NewMessageInfoItemType : Swift.RawRepresentable {}
extension SendBirdUIKit.LogType : Swift.Equatable {}
extension SendBirdUIKit.LogType : Swift.Hashable {}
extension SendBirdUIKit.LogType : Swift.RawRepresentable {}
extension Foundation.Date.SBUDateFormat : Swift.Equatable {}
extension Foundation.Date.SBUDateFormat : Swift.Hashable {}
extension Foundation.Date.SBUDateFormat : Swift.RawRepresentable {}
