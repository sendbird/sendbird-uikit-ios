#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef SENDBIRDUIKIT_SWIFT_H
#define SENDBIRDUIKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import SendBirdSDK;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendBirdUIKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// This is an enumeration used to select the channel editing type.
typedef SWIFT_ENUM(NSInteger, ChannelEditType, open) {
  ChannelEditTypeName = 0,
  ChannelEditTypeImage = 1,
};

/// This is an enumeration used in <code>InviteUserViewController</code> to load user list by type.
/// since:
/// 1.2.0
typedef SWIFT_ENUM(NSInteger, ChannelInviteListType, open) {
  ChannelInviteListTypeNone = 0,
  ChannelInviteListTypeUsers = 1,
  ChannelInviteListTypeOperators = 2,
};

/// This is an enumeration used in <code>MemberListViewController</code> to load member list by type.
/// since:
/// 1.2.0
typedef SWIFT_ENUM(NSInteger, ChannelMemberListType, open) {
  ChannelMemberListTypeNone = 0,
  ChannelMemberListTypeChannelMembers = 1,
  ChannelMemberListTypeOperators = 2,
  ChannelMemberListTypeMutedMembers = 3,
  ChannelMemberListTypeBannedMembers = 4,
  ChannelMemberListTypeParticipants = 5,
};

/// This is an enumeration used to handling action and display by type in <code>ChannelSettingsViewController</code> and <code>ChannelSettingCell</code>.
/// since:
/// 1.2.0
typedef SWIFT_ENUM(NSInteger, ChannelSettingItemType, open) {
  ChannelSettingItemTypeModerations = 0,
  ChannelSettingItemTypeNotifications = 1,
  ChannelSettingItemTypeMembers = 2,
  ChannelSettingItemTypeSearch = 3,
  ChannelSettingItemTypeLeave = 4,
};

/// This is an enumeration for channel type.
/// since:
/// 1.2.0
typedef SWIFT_ENUM(NSInteger, ChannelType, open) {
  ChannelTypeGroup = 0,
  ChannelTypeSupergroup = 1,
  ChannelTypeBroadcast = 2,
  ChannelTypeOpen = 3,
};

/// This is an enumeration used to display <code>EmptyView</code> by type.
typedef SWIFT_ENUM(NSInteger, EmptyViewType, open) {
  EmptyViewTypeNone = 0,
  EmptyViewTypeNoChannels = 1,
  EmptyViewTypeNoMessages = 2,
  EmptyViewTypeNoMembers = 3,
  EmptyViewTypeNoMutedMembers = 4,
  EmptyViewTypeNoBannedMembers = 5,
  EmptyViewTypeNoSearchResults = 6,
  EmptyViewTypeError = 7,
};

typedef SWIFT_ENUM(uint8_t, LogType, open) {
  LogTypeNone = 0b00000000,
  LogTypeError = 0b00000001,
  LogTypeWarning = 0b00000010,
  LogTypeInfo = 0b00000100,
  LogTypeAll = 0b00000111,
};

/// This is an enumeration used to select a media resource type.
typedef SWIFT_ENUM(NSInteger, MediaResourceType, open) {
  MediaResourceTypeCamera = 0,
  MediaResourceTypeLibrary = 1,
  MediaResourceTypeDocument = 2,
  MediaResourceTypeUnknown = 3,
};

typedef SWIFT_ENUM(NSInteger, MemberListType, open) {
  MemberListTypeNone = 0,
  MemberListTypeCreateChannel = 1,
  MemberListTypeChannelMembers = 2,
  MemberListTypeInviteUser = 3,
  MemberListTypeReaction = 4,
};

/// This is an enumeration used to the message edit type.
typedef SWIFT_ENUM(NSInteger, MessageEditItem, open) {
  MessageEditItemCopy = 0,
  MessageEditItemEdit = 1,
  MessageEditItemDelete = 2,
};

/// This is an enumeration to file type in the message.
typedef SWIFT_ENUM(NSInteger, MessageFileType, open) {
  MessageFileTypeImage = 0,
  MessageFileTypeVideo = 1,
  MessageFileTypeAudio = 2,
  MessageFileTypePdf = 3,
  MessageFileTypeEtc = 4,
};

/// This is an enumeration used to select the message position in group messages.
typedef SWIFT_ENUM(NSInteger, MessageGroupPosition, open) {
  MessageGroupPositionNone = 0,
  MessageGroupPositionTop = 1,
  MessageGroupPositionMiddle = 2,
  MessageGroupPositionBottom = 3,
};

/// This is an enumeration for cell’s menu item type.
/// since:
/// 1.2.5
typedef SWIFT_ENUM(NSInteger, MessageMenuItem, open) {
  MessageMenuItemSave = 0,
  MessageMenuItemCopy = 1,
  MessageMenuItemEdit = 2,
  MessageMenuItemDelete = 3,
};

/// This is an enumeration used to select the message position.
typedef SWIFT_ENUM(NSInteger, MessagePosition, open) {
  MessagePositionLeft = 0,
  MessagePositionRight = 1,
  MessagePositionCenter = 2,
};

@class NSCoder;

SWIFT_CLASS("_TtC13SendBirdUIKit21SBUMessageProfileView")
@interface SBUMessageProfileView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit18MessageProfileView") SWIFT_DEPRECATED_MSG("deprecated in 2.0.0", "_TtC13SendBirdUIKit21SBUMessageProfileView")
@interface MessageProfileView : SBUMessageProfileView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit19SBUMessageStateView")
@interface SBUMessageStateView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'MessageStateView(type:)'");
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit16MessageStateView") SWIFT_DEPRECATED_MSG("deprecated in 2.0.0", "_TtC13SendBirdUIKit19SBUMessageStateView")
@interface MessageStateView : SBUMessageStateView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

/// This is an enumeration used to handling action and display by type in <code>MederationsViewController</code> and <code>ModerationCell</code>.
/// since:
/// 1.2.0
typedef SWIFT_ENUM(NSInteger, ModerationItemType, open) {
  ModerationItemTypeOperators = 0,
  ModerationItemTypeMutedMembers = 1,
  ModerationItemTypeBannedMembers = 2,
  ModerationItemTypeFreezeChannel = 3,
};

@class NSString;
@class SBUUser;

@interface NSArray<ObjectType> (SWIFT_EXTENSION(SendBirdUIKit))
/// This is a function that extracts the userId array using the <code>SBUUser</code> type array.
/// This is a function used in Objective-C.
///
/// returns:
/// userId <code>String</code> type array
- (NSArray<NSString *> * _Nonnull)sbu_getUserIds SWIFT_WARN_UNUSED_RESULT;
/// This is a function that extracts the nickname array using the <code>SBUUser</code> type array.
/// This is a function used in Objective-C.
///
/// returns:
/// nickname <code>String</code> type array
- (NSArray<NSString *> * _Nonnull)sbu_getUserNicknames SWIFT_WARN_UNUSED_RESULT;
/// This is a function that extracts the <code>SBUUser</code> array using the <code>SBDUser</code> type array.
/// This is a function used in Objective-C.
///
/// returns:
/// <code>SBUUser</code>  type array
- (NSArray<SBUUser *> * _Nonnull)sbu_convertUserList SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSObject (SWIFT_EXTENSION(SendBirdUIKit))
/// This gets the class name of object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sbu_className;)
+ (NSString * _Nonnull)sbu_className SWIFT_WARN_UNUSED_RESULT;
/// This gets the class name of object.
@property (nonatomic, readonly, copy) NSString * _Nonnull sbu_className;
@end

/// This is an enumeration for new message info item type.
/// since:
/// 2.0.0
typedef SWIFT_ENUM(NSInteger, NewMessageInfoItemType, open) {
  NewMessageInfoItemTypeTooltip = 0,
  NewMessageInfoItemTypeButton = 1,
};

/// This is an enumeration used to handling action and display by type in <code>OpenChannelSettingsViewController</code> and <code>ChannelSettingCell</code>.
/// since:
/// 2.0.0
typedef SWIFT_ENUM(NSInteger, OpenChannelSettingItemType, open) {
  OpenChannelSettingItemTypeParticipants = 0,
  OpenChannelSettingItemTypeDelete = 1,
};

@class SBUActionSheetItem;
@class SBUComponentTheme;
@protocol SBUActionSheetDelegate;

SWIFT_CLASS("_TtC13SendBirdUIKit14SBUActionSheet")
@interface SBUActionSheet : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This static function shows the actionSheet.
/// <ul>
///   <li>
///     Order
///     <ul>
///       <li>
///         item1
///       </li>
///       <li>
///         item2
///       </li>
///       <li>
///         item3
///       </li>
///       <li>
///         cancel
///       </li>
///     </ul>
///   </li>
/// </ul>
/// See the example below for params generation.
/// \code
/// SBUActionSheet.show(
///     items: [
///         SBUActionSheetItem(title: TITLE1, image: IMAGE1),
///         SBUActionSheetItem(title: TITLE2, image: IMAGE2),
///     ],
///     cancelItem: SBUActionSheetItem(title: CANCEL_TITLE, image: CANCEL_IMAGE)
/// )
///
/// \endcode\param items Item array
///
/// \param cancelItem Cancel item
///
/// \param identifier ActionSheet identifier
///
/// \param oneTimetheme One-time theme setting
///
/// \param delegate ActionSheet delegate
///
+ (void)showWithItems:(NSArray<SBUActionSheetItem *> * _Nonnull)items cancelItem:(SBUActionSheetItem * _Nonnull)cancelItem identifier:(NSInteger)identifier oneTimetheme:(SBUComponentTheme * _Nullable)oneTimetheme delegate:(id <SBUActionSheetDelegate> _Nullable)delegate;
/// This static function dismissed the actionSheet.
+ (void)dismiss;
@end


SWIFT_PROTOCOL("_TtP13SendBirdUIKit22SBUActionSheetDelegate_")
@protocol SBUActionSheetDelegate <NSObject>
- (void)didSelectActionSheetItemWithIndex:(NSInteger)index identifier:(NSInteger)identifier;
@end

@class UIColor;
@class UIImage;
@class UIFont;

SWIFT_CLASS("_TtC13SendBirdUIKit13SBUCommonItem")
@interface SBUCommonItem : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title color:(UIColor * _Nullable)color image:(UIImage * _Nullable)image font:(UIFont * _Nullable)font tintColor:(UIColor * _Nullable)tintColor textAlignment:(NSTextAlignment)textAlignment OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit18SBUActionSheetItem")
@interface SBUActionSheetItem : SBUCommonItem
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title color:(UIColor * _Nullable)color image:(UIImage * _Nullable)image font:(UIFont * _Nullable)font tintColor:(UIColor * _Nullable)tintColor textAlignment:(NSTextAlignment)textAlignment OBJC_DESIGNATED_INITIALIZER;
/// This function initializes actionSheet item.
/// \param title Title text
///
/// \param color Title color
///
/// \param image Item image
///
/// \param font Title font
///
/// \param textAlignment Title alignment
///
/// \param completionHandler Item’s completion handler
///
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title color:(UIColor * _Nullable)color image:(UIImage * _Nullable)image font:(UIFont * _Nullable)font textAlignment:(NSTextAlignment)textAlignment completionHandler:(void (^ _Nullable)(void))completionHandler OBJC_DESIGNATED_INITIALIZER;
@end

@class SBDBaseMessage;
enum SBUMessageReceiptState : NSInteger;
@class SBUMessageCellTheme;

IB_DESIGNABLE
SWIFT_CLASS("_TtC13SendBirdUIKit18SBUBaseMessageCell")
@interface SBUBaseMessageCell : UITableViewCell
@property (nonatomic, strong) SBDBaseMessage * _Nonnull message;
@property (nonatomic) enum MessagePosition position;
@property (nonatomic) enum MessageGroupPosition groupPosition;
@property (nonatomic) enum SBUMessageReceiptState receiptState;
@property (nonatomic, strong) UIView * _Nonnull messageContentView;
@property (nonatomic, strong) UIView * _Nonnull dateView;
@property (nonatomic, strong) SBUMessageCellTheme * _Nonnull theme;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// This function handles the initialization of views.
- (void)setupViews;
/// This function handles the initialization of actions.
- (void)setupActions;
/// This function handles the initialization of autolayouts.
- (void)setupAutolayout;
/// This function handles the initialization of styles.
- (void)setupStyles;
- (void)layoutSubviews;
/// This function configure a cell using informations.
/// \param message Message object
///
/// \param position Cell position (left / right / center)
///
/// \param hideDateView Hide or expose date information
///
/// \param receiptState ReadReceipt state
///
- (void)configureWithMessage:(SBDBaseMessage * _Nonnull)message position:(enum MessagePosition)position hideDateView:(BOOL)hideDateView groupPosition:(enum MessageGroupPosition)groupPosition receiptState:(enum SBUMessageReceiptState)receiptState;
- (void)prepareForReuse;
@end

@class UILabel;
@class SBDAdminMessage;

IB_DESIGNABLE
SWIFT_CLASS("_TtC13SendBirdUIKit19SBUAdminMessageCell")
@interface SBUAdminMessageCell : SBUBaseMessageCell
@property (nonatomic, strong) UILabel * _Nonnull messageLabel;
- (void)setupViews;
- (void)setupAutolayout;
- (void)layoutSubviews;
- (void)configure:(SBDAdminMessage * _Nonnull)message hideDateView:(BOOL)hideDateView;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit18SBUAlertButtonItem")
@interface SBUAlertButtonItem : NSObject
/// This function initializes alert button item.
/// \param title Button’s title text
///
/// \param color Button’s title color
///
/// \param completionHandler Button’s completion handler
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title color:(UIColor * _Nullable)color completionHandler:(void (^ _Nonnull)(id _Nullable))completionHandler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13SendBirdUIKit12SBUAlertView")
@interface SBUAlertView : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This static function dismissed the alert.
+ (void)dismiss;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit12SBUAvailable")
@interface SBUAvailable : NSObject
/// This method checks if the application support super group channel.
/// since:
/// 1.2.0
///
/// returns:
/// <code>true</code> if super group channel can be usable, <code>false</code> otherwise.
+ (BOOL)isSupportSuperGroupChannel SWIFT_WARN_UNUSED_RESULT;
/// This method checks if the application support broadcast channel.
/// since:
/// 1.2.0
///
/// returns:
/// <code>true</code> if broadcast channel can be usable, <code>false</code> otherwise.
+ (BOOL)isSupportBroadcastChannel SWIFT_WARN_UNUSED_RESULT;
/// This method checks if the application support reactions.
/// since:
/// 1.2.0
///
/// returns:
/// <code>true</code> if the reaction operation can be usable, <code>false</code> otherwise.
+ (BOOL)isSupportReactions SWIFT_WARN_UNUSED_RESULT;
/// This method checks if the application support og metadata.
/// since:
/// 1.2.0
///
/// returns:
/// <code>true</code> if the og metadata can be usable, <code>false</code> otherwise.
+ (BOOL)isSupportOgTag SWIFT_WARN_UNUSED_RESULT;
/// This method checks if the application support message search.
/// since:
/// 2.1.0
///
/// returns:
/// <code>true</code> if the message search can be used, <code>false</code> otherwise.
+ (BOOL)isSupportMessageSearch SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit18SBUBaseChannelCell")
@interface SBUBaseChannelCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

SWIFT_CLASS("_TtC13SendBirdUIKit21SBUBaseViewController")
@interface SBUBaseViewController : UIViewController
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)setupAutolayout;
- (void)setupStyles;
- (void)updateStyles;
/// This is to pop or dismiss (depending on current view controller) the search view controller.
- (void)onClickBack;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class SBDMessageListParams;

/// note:
/// When you create channel list for open channels, please inherit <code>SBUBaseChannelListViewController</code>
/// important:
/// You have to avoid using extension because of non-@objc issue
/// \code
/// class CustomizedOpenChannelListViewController: SBUBaseChannelListViewController, UITableViewDataSource, UITableViewDelegate
///
/// \endcode
SWIFT_CLASS("_TtC13SendBirdUIKit32SBUBaseChannelListViewController")
@interface SBUBaseChannelListViewController : SBUBaseViewController
/// This is a function that shows the channelViewController.
/// If you want to use a custom channelViewController, override it and implement it.
/// \param channelUrl channel url for use in channelViewController.
///
/// \param messageListParams If there is a messageListParams set directly for use in Channel, set it up here
///
- (void)showChannelWithChannelUrl:(NSString * _Nonnull)channelUrl messageListParams:(SBDMessageListParams * _Nullable)messageListParams;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class SBUChannelSettingsTheme;
@class UIBarButtonItem;
@class UITableView;

SWIFT_CLASS("_TtC13SendBirdUIKit35SBUBaseChannelSettingViewController")
@interface SBUBaseChannelSettingViewController : SBUBaseViewController
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, strong) SBUChannelSettingsTheme * _Nonnull theme;
@property (nonatomic, copy) NSString * _Nullable channelName;
@property (nonatomic, readonly, copy) NSString * _Nullable channelUrl;
@property (nonatomic) BOOL isOperator;
@property (nonatomic, strong) UIView * _Nullable titleView;
@property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButton;
@property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButton;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
@property (nonatomic, strong) UIView * _Nullable userInfoView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)loadView;
/// This function handles the initialization of autolayouts.
- (void)setupAutolayout;
/// This function handles the initialization of styles.
- (void)setupStyles;
- (void)updateStyles;
- (void)loadChannelWithChannelUrl:(NSString * _Nullable)channelUrl;
- (void)updateChannelWithChannelName:(NSString * _Nullable)channelName coverImage:(UIImage * _Nullable)coverImage;
/// If you want to use a custom memberListViewController, override it and implement it.
- (void)showMemberList;
/// If you want to use a custom moderationsViewController, override it and implement it.
/// since:
/// 1.2.0
- (void)showModerationList;
/// If you want to use a custom MessageSearchViewController, override it and implement it.
/// since:
/// 2.1.0
- (void)showSearch;
/// If you want to use a custom memberListViewController, override it and implement it.
- (void)showParticipantsList;
/// This function used to when edit button click.
/// since:
/// 1.2.5
- (void)onClickEdit;
/// This function shows the channel image selection menu.
- (void)selectChannelImage;
/// This function shows the channel name change popup.
- (void)changeChannelName;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBUBaseChannelSettingViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUActionSheetDelegate>
- (void)didSelectActionSheetItemWithIndex:(NSInteger)index identifier:(NSInteger)identifier;
@end

@class UIImagePickerController;

@interface SBUBaseChannelSettingViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UIImagePickerControllerDelegate>
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
@end


@interface SBUBaseChannelSettingViewController (SWIFT_EXTENSION(SendBirdUIKit))
- (BOOL)shouldShowLoadingIndicator;
- (void)shouldDismissLoadingIndicator;
@end

@class NSIndexPath;

@interface SBUBaseChannelSettingViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UITableViewDataSource, UITableViewDelegate>
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDOpenChannel;
@class SBDUser;
@class SBDGroupChannel;

@interface SBUBaseChannelSettingViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBDChannelDelegate>
- (void)channel:(SBDOpenChannel * _Nonnull)sender userDidEnter:(SBDUser * _Nonnull)user;
- (void)channel:(SBDOpenChannel * _Nonnull)sender userDidExit:(SBDUser * _Nonnull)user;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidJoin:(SBDUser * _Nonnull)user;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidLeave:(SBDUser * _Nonnull)user;
@end

@class SBUChannelTheme;
@class SBUMessageInputView;
@class SBDUserMessage;
@class NSNotification;
@class SBDUserMessageParams;
@class NSData;
@class SBDFileMessageParams;
@class NSURL;

SWIFT_CLASS("_TtC13SendBirdUIKit28SBUBaseChannelViewController")
@interface SBUBaseChannelViewController : SBUBaseViewController
@property (nonatomic, strong) SBUChannelTheme * _Nonnull theme;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
@property (nonatomic, strong) SBUMessageInputView * _Nonnull messageInputView;
/// To use the custom user profile view, set this to the custom view created using <code>SBUUserProfileViewProtocol</code>.
/// And, if you do not want to use the user profile feature, please set this value to nil.
@property (nonatomic, strong) UIView * _Nullable userProfileView;
@property (nonatomic, strong) UIView * _Nullable emptyView;
@property (nonatomic, readonly, copy) NSString * _Nullable channelUrl;
/// This object is used in the user message in being edited.
@property (nonatomic, readonly, strong) SBDUserMessage * _Nullable inEditingMessage;
/// This is a params used to get a list of messages. Only getter is provided, please use initialization function to set params directly.
/// note:
/// For params properties, see <code>SBDMessageListParams</code> class.
/// since:
/// 1.0.11
@property (nonatomic, readonly, strong) SBDMessageListParams * _Nonnull messageListParams;
/// This object has a list of all success messages synchronized with the server.
@property (nonatomic, readonly, copy) NSArray<SBDBaseMessage *> * _Nonnull messageList;
/// This object has a list of all messages.
@property (nonatomic, readonly, copy) NSArray<SBDBaseMessage *> * _Nonnull fullMessageList;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)loadView;
- (void)updateStyles;
/// This function sets the user profile tap gesture handling.
/// If you do not want to use the user profile function, override this function and leave it empty.
/// since:
/// 1.2.2
/// \param user <code>SBUUser</code> object used for user profile configuration
///
- (void)setUserProfileTapGestureHandler:(SBUUser * _Nonnull)user;
/// This function changes the messageInputView bottom constraint using keyboard height.
/// since:
/// 1.2.5
/// \param notification Notification object with keyboardFrame information
///
- (void)keyboardWillShow:(NSNotification * _Nonnull)notification;
/// This function changes the messageInputView bottom constraint using keyboard height.
/// since:
/// 1.2.5
/// \param notification Notification object with keyboardFrame information
///
- (void)keyboardWillHide:(NSNotification * _Nonnull)notification;
/// This function dismisses the keyboard.
/// since:
/// 1.2.5
- (void)dismissKeyboard;
/// This functions adds the hide keyboard gesture in tableView.
/// since:
/// 1.2.5
- (void)addGestureHideKeyboard;
- (void)loadChannelWithChannelUrl:(NSString * _Nullable)channelUrl messageListParams:(SBDMessageListParams * _Nullable)messageListParams;
/// This functions clears current message lists
/// since:
/// 2.1.0
- (void)clearMessageList;
/// This function upserts the messages in the list.
/// since:
/// 1.2.5
/// \param messages Message array to upsert
///
/// \param needUpdateNewMessage If set to <code>true</code>, increases new message count.
///
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)upsertMessagesInListWithMessages:(NSArray<SBDBaseMessage *> * _Nullable)messages needUpdateNewMessage:(BOOL)needUpdateNewMessage needReload:(BOOL)needReload;
/// This function deletes the messages in the list using the message ids. (Resendable messages are also delete together.)
/// since:
/// 1.2.5
/// \param messageIds Message id array to delete
///
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)deleteMessagesInListWithMessageIds:(NSArray<NSNumber *> * _Nullable)messageIds needReload:(BOOL)needReload;
/// This function deletes the messages in the list using the message ids.
/// since:
/// 2.1.8
/// \param messageIds Message id array to delete
///
/// \param excludeResendableMessages If set to <code>true</code>, the resendable messages are not deleted.
///
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)deleteMessagesInListWithMessageIds:(NSArray<NSNumber *> * _Nullable)messageIds excludeResendableMessages:(BOOL)excludeResendableMessages needReload:(BOOL)needReload;
/// This functions deletes the resendable messages using the request ids.
/// since:
/// 1.2.5
/// \param requestIds Request id array to delete
///
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)deleteResendableMessagesWithRequestIds:(NSArray<NSString *> * _Nonnull)requestIds needReload:(BOOL)needReload;
/// Deletes a message with message object.
/// since:
/// 1.0.9
/// \param message <code>SBDBaseMessage</code> based class object
///
- (void)deleteMessageWithMessage:(SBDBaseMessage * _Nonnull)message;
/// This function sorts the all message list. (Included <code>presendMessages</code>, <code>messageList</code> and <code>resendableMessages</code>.)
/// since:
/// 1.2.5
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData and, scroll to last seen index.
///
- (void)sortAllMessageListWithNeedReload:(BOOL)needReload;
/// This function increases the new message count.
- (void)increaseNewMessageCount;
/// Set/Unset edit mode for given userMessage.
/// \param userMessage User message to edit, or nil to end edit mode.
///
- (void)setEditModeFor:(SBDUserMessage * _Nullable)userMessage;
/// Sends a user message with only text.
/// since:
/// 1.0.9
/// \param text String value
///
- (void)sendUserMessageWithText:(NSString * _Nonnull)text;
/// Sends a user messag with messageParams.
/// You can send a message by setting various properties of MessageParams.
/// since:
/// 1.0.9
/// \param messageParams <code>SBDUserMessageParams</code> class object
///
- (void)sendUserMessageWithMessageParams:(SBDUserMessageParams * _Nonnull)messageParams;
/// Sends a file message with file data, file name, mime type.
/// since:
/// 1.0.9
/// \param fileData <code>Data</code> class object
///
/// \param fileName file name. Used when displayed in channel list.
///
/// \param mimeType file’s mime type.
///
- (void)sendFileMessageWithFileData:(NSData * _Nullable)fileData fileName:(NSString * _Nonnull)fileName mimeType:(NSString * _Nonnull)mimeType;
/// Sends a file message with messageParams.
/// You can send a file message by setting various properties of MessageParams.
/// since:
/// 1.0.9
/// \param messageParams <code>SBDFileMessageParams</code> class object
///
- (void)sendFileMessageWithMessageParams:(SBDFileMessageParams * _Nonnull)messageParams;
/// Updates a user message with message object.
/// since:
/// 1.0.9
/// \param message <code>SBDUserMessage</code> object to update
///
/// \param text String to be updated
///
- (void)updateUserMessageWithMessage:(SBDUserMessage * _Nonnull)message text:(NSString * _Nonnull)text;
/// Updates a user message with message object and messageParams.
/// You can update messages by setting various properties of MessageParams.
/// since:
/// 1.0.9
/// \param message <code>SBDUserMessage</code> object to update
///
/// \param messageParams <code>SBDUserMessageParams</code> class object
///
- (void)updateUserMessageWithMessage:(SBDUserMessage * _Nonnull)message messageParams:(SBDUserMessageParams * _Nonnull)messageParams;
/// Resends a message with failedMessage object.
/// since:
/// 1.0.9
/// \param failedMessage <code>SBDBaseMessage</code> class based failed object
///
- (void)resendMessageWithFailedMessage:(SBDBaseMessage * _Nonnull)failedMessage;
/// This function scrolls to bottom.
/// \param animated Animated
///
- (void)scrollToBottomWithAnimated:(BOOL)animated;
/// Sends a image file message.
/// \param info Image information selected in <code>UIImagePickerController</code>
///
- (void)sendImageFileMessageWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// Sends a video file message.
/// \param info Video information selected in <code>UIImagePickerController</code>
///
- (void)sendVideoFileMessageWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// Sends a document file message.
/// \param documentUrls Document information selected in <code>UIDocumentPickerViewController</code>
///
- (void)sendDocumentFileMessageWithDocumentUrls:(NSArray<NSURL *> * _Nonnull)documentUrls;
/// This is used to check the loading status and control loading indicator.
/// \param loadingState Set to true when the list is loading.
///
/// \param showIndicator If true, the loading indicator is started, and if false, the indicator is stopped.
///
- (void)setLoading:(BOOL)loadingState :(BOOL)showIndicator;
@end

@class SBDFileMessage;

@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit))
- (void)didSelectDeleteImageWithMessage:(SBDFileMessage * _Nonnull)message;
@end

@class UIPresentationController;

@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UIViewControllerTransitioningDelegate>
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP13SendBirdUIKit20SBUEmptyViewDelegate_")
@protocol SBUEmptyViewDelegate <NSObject>
- (void)didSelectRetry;
@end


@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUEmptyViewDelegate>
- (void)didSelectRetry;
@end

@class UIGestureRecognizer;

@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIDocumentPickerViewController;

@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UIDocumentPickerDelegate>
- (void)documentPicker:(UIDocumentPickerViewController * _Nonnull)controller didPickDocumentsAtURLs:(NSArray<NSURL *> * _Nonnull)urls;
@end


@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit))
- (BOOL)shouldShowLoadingIndicator;
- (void)shouldDismissLoadingIndicator;
@end


@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UIImagePickerControllerDelegate>
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end


SWIFT_PROTOCOL("_TtP13SendBirdUIKit26SBUUserProfileViewDelegate_")
@protocol SBUUserProfileViewDelegate
/// This delegate function notifies the implemented class when closing the selector.
- (void)didSelectClose;
/// This delegate function notifies the implemented class when select message button.
/// \param userId User ID used in current profile
///
- (void)didSelectMessageWithUserId:(NSString * _Nullable)userId;
@end


@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUUserProfileViewDelegate>
- (void)didSelectMessageWithUserId:(NSString * _Nullable)userId;
- (void)didSelectClose;
@end


@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_PROTOCOL("_TtP13SendBirdUIKit27SBUMessageInputViewDelegate_")
@protocol SBUMessageInputViewDelegate <NSObject>
@optional
- (void)messageInputView:(SBUMessageInputView * _Nonnull)messageInputView didSelectSend:(NSString * _Nonnull)text;
- (void)messageInputView:(SBUMessageInputView * _Nonnull)messageInputView didSelectResource:(enum MediaResourceType)type;
- (void)messageInputView:(SBUMessageInputView * _Nonnull)messageInputView didSelectEdit:(NSString * _Nonnull)text;
- (void)messageInputViewDidStartTyping;
- (void)messageInputViewDidEndTyping;
@end


@interface SBUBaseChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUMessageInputViewDelegate>
- (void)messageInputView:(SBUMessageInputView * _Nonnull)messageInputView didSelectSend:(NSString * _Nonnull)text;
- (void)messageInputView:(SBUMessageInputView * _Nonnull)messageInputView didSelectResource:(enum MediaResourceType)type;
- (void)messageInputView:(SBUMessageInputView * _Nonnull)messageInputView didSelectEdit:(NSString * _Nonnull)text;
- (void)messageInputViewDidStartTyping;
- (void)messageInputViewDidEndTyping;
@end



@class UINavigationController;

@interface SBUBaseViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UINavigationControllerDelegate>
- (void)navigationController:(UINavigationController * _Nonnull)navigationController didShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
@end


/// <code>UITableViewCell</code> for <code>SBDGroupChannel</code> list.
SWIFT_CLASS("_TtC13SendBirdUIKit14SBUChannelCell")
@interface SBUChannelCell : SBUBaseChannelCell
- (void)awakeFromNib;
- (void)layoutSubviews;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)prepareForReuse;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit19SBUChannelCellTheme")
@interface SBUChannelCellTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUChannelCellTheme * _Nonnull light;)
+ (SBUChannelCellTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUChannelCellTheme * _Nonnull dark;)
+ (SBUChannelCellTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor titleFont:(UIFont * _Nonnull)titleFont titleTextColor:(UIColor * _Nonnull)titleTextColor memberCountFont:(UIFont * _Nonnull)memberCountFont memberCountTextColor:(UIColor * _Nonnull)memberCountTextColor lastUpdatedTimeFont:(UIFont * _Nonnull)lastUpdatedTimeFont lastUpdatedTimeTextColor:(UIColor * _Nonnull)lastUpdatedTimeTextColor messageFont:(UIFont * _Nonnull)messageFont messageTextColor:(UIColor * _Nonnull)messageTextColor broadcastMarkTintColor:(UIColor * _Nonnull)broadcastMarkTintColor freezeStateTintColor:(UIColor * _Nonnull)freezeStateTintColor unreadCountBackgroundColor:(UIColor * _Nonnull)unreadCountBackgroundColor unreadCountTextColor:(UIColor * _Nonnull)unreadCountTextColor unreadCountFont:(UIFont * _Nonnull)unreadCountFont separatorLineColor:(UIColor * _Nonnull)separatorLineColor OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
@property (nonatomic, strong) UIColor * _Nonnull titleTextColor;
@property (nonatomic, strong) UIFont * _Nonnull memberCountFont;
@property (nonatomic, strong) UIColor * _Nonnull memberCountTextColor;
@property (nonatomic, strong) UIFont * _Nonnull lastUpdatedTimeFont;
@property (nonatomic, strong) UIColor * _Nonnull lastUpdatedTimeTextColor;
@property (nonatomic, strong) UIFont * _Nonnull messageFont;
@property (nonatomic, strong) UIColor * _Nonnull messageTextColor;
@property (nonatomic, strong) UIColor * _Nonnull broadcastMarkTintColor;
@property (nonatomic, strong) UIColor * _Nonnull freezeStateTintColor;
@property (nonatomic, strong) UIColor * _Nonnull unreadCountBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull unreadCountTextColor;
@property (nonatomic, strong) UIFont * _Nonnull unreadCountFont;
@property (nonatomic, strong) UIColor * _Nonnull separatorLineColor;
@end

@class SBUCoverImageView;
@class UIButton;
@class SBDBaseChannel;

SWIFT_CLASS("_TtC13SendBirdUIKit24SBUChannelInfoHeaderView")
@interface SBUChannelInfoHeaderView : UIView
@property (nonatomic, strong) SBUCoverImageView * _Nonnull coverImage;
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
/// note:
/// To update value with <em>open</em> channel description, please set <code>SBUOpenChannelViewController.channelDescription</code>
@property (nonatomic, strong) UILabel * _Nonnull descriptionLabel;
@property (nonatomic, strong) UIButton * _Nullable infoButton;
@property (nonatomic, readonly, strong) SBDBaseChannel * _Nullable channel;
@property (nonatomic, strong) SBUComponentTheme * _Nonnull overlayTheme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)configureWithChannel:(SBDBaseChannel * _Nullable)channel description:(NSString * _Nullable)description;
- (void)onClickChannelInfo;
- (void)onClickChannelMembers;
- (void)onClickChannelParticipants;
@end


/// This delegate is used in the class to handle the action.
SWIFT_PROTOCOL("_TtP13SendBirdUIKit32SBUChannelInfoHeaderViewDelegate_")
@protocol SBUChannelInfoHeaderViewDelegate
@optional
- (void)didSelectChannelInfo;
- (void)didSelectChannelMembers;
- (void)didSelectChannelParticipants;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit19SBUChannelListTheme")
@interface SBUChannelListTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUChannelListTheme * _Nonnull light;)
+ (SBUChannelListTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUChannelListTheme * _Nonnull dark;)
+ (SBUChannelListTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatusBarStyle:(UIStatusBarStyle)statusBarStyle leftBarButtonTintColor:(UIColor * _Nonnull)leftBarButtonTintColor rightBarButtonTintColor:(UIColor * _Nonnull)rightBarButtonTintColor navigationBarTintColor:(UIColor * _Nonnull)navigationBarTintColor navigationBarShadowColor:(UIColor * _Nonnull)navigationBarShadowColor backgroundColor:(UIColor * _Nonnull)backgroundColor notificationOnBackgroundColor:(UIColor * _Nonnull)notificationOnBackgroundColor notificationOnTintColor:(UIColor * _Nonnull)notificationOnTintColor notificationOffBackgroundColor:(UIColor * _Nonnull)notificationOffBackgroundColor notificationOffTintColor:(UIColor * _Nonnull)notificationOffTintColor leaveBackgroundColor:(UIColor * _Nonnull)leaveBackgroundColor leaveTintColor:(UIColor * _Nonnull)leaveTintColor alertBackgroundColor:(UIColor * _Nonnull)alertBackgroundColor OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@property (nonatomic, strong) UIColor * _Nonnull leftBarButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull rightBarButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
@property (nonatomic, strong) UIColor * _Nonnull navigationBarShadowColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull notificationOnBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull notificationOnTintColor;
@property (nonatomic, strong) UIColor * _Nonnull notificationOffBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull notificationOffTintColor;
@property (nonatomic, strong) UIColor * _Nonnull leaveBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull leaveTintColor;
@property (nonatomic, strong) UIColor * _Nonnull alertBackgroundColor;
@end

@class SBDGroupChannelListQuery;
@class UINib;

SWIFT_CLASS("_TtC13SendBirdUIKit28SBUChannelListViewController")
@interface SBUChannelListViewController : SBUBaseChannelListViewController
@property (nonatomic, strong) UIView * _Nullable titleView;
@property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButton;
@property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButton;
@property (nonatomic, strong) UIView * _Nullable emptyView;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
@property (nonatomic, strong) SBUChannelListTheme * _Nonnull theme;
/// This is a function that allows you to select the channel type when creating a channel.
/// If set to the nil value, it is moved to groupChannel creation.
/// note:
/// Type: GroupChannel / SuperGroupChannel / BroadcastChannel
/// since:
/// 1.2.0
@property (nonatomic, strong) UIView * _Nullable createChannelTypeSelector;
@property (nonatomic, readonly, strong) SBUBaseChannelCell * _Nullable channelCell;
@property (nonatomic, readonly, strong) SBUBaseChannelCell * _Nullable customCell;
/// This object has a list of all channels.
@property (nonatomic, readonly, copy) NSArray<SBDGroupChannel *> * _Nonnull channelList;
/// This is a query used to get a list of channels. Only getter is provided, please use initialization function to set query directly.
/// note:
/// For query properties, see <code>SBDGroupChannelListQuery</code> class.
/// since:
/// 1.0.11
@property (nonatomic, readonly, strong) SBDGroupChannelListQuery * _Nullable channelListQuery;
@property (nonatomic, readonly) BOOL isLoading;
@property (nonatomic, readonly) int64_t lastUpdatedTimestamp;
@property (nonatomic, readonly, copy) NSString * _Nullable lastUpdatedToken;
@property (nonatomic, readonly) NSUInteger limit;
@property (nonatomic, readonly) BOOL includeEmptyChannel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUChannelListViewController()'");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// You can initialize the class through this function.
/// If you have <code>channelListQuery</code>, please set it. If not set, it is used as default value.
/// See the example below for query generation.
/// \code
///     let query = SBDGroupChannel.createMyGroupChannelListQuery()
///     query?.includeEmptyChannel = false
///     query?.includeFrozenChannel = true
///     ...
///
/// \endcodesince:
/// 1.0.11
/// \param channelListQuery Your own <code>SBDGroupChannelListQuery</code> object
///
- (nonnull instancetype)initWithChannelListQuery:(SBDGroupChannelListQuery * _Nullable)channelListQuery OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)setupAutolayout;
- (void)setupStyles;
- (void)updateStyles;
- (void)viewDidLayoutSubviews;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
/// Changes push trigger option on a channel.
/// since:
/// 1.0.9
/// \param option Push trigger option to change
///
/// \param channel Channel to change option
///
/// \param completionHandler Completion handler
///
- (void)changePushTriggerOptionWithOption:(SBDGroupChannelPushTriggerOption)option channel:(SBDGroupChannel * _Nonnull)channel completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// Leaves the channel.
/// since:
/// 1.0.9
/// \param channel Channel to leave
///
/// \param completionHandler Completion handler
///
- (void)leaveChannel:(SBDGroupChannel * _Nonnull)channel completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// This function loads the channel list. If the reset value is true, the channel list will reset.
/// since:
/// 1.2.5
/// \param reset To reset the channel list
///
- (void)loadNextChannelListWithReset:(BOOL)reset;
/// This function loads the channel changelogs.
/// since:
/// 1.2.5
/// \param hasMore If set to <code>true</code>, the changelogs will no longer be scanned.
///
/// \param token Use when you have the last updated token value.
///
- (void)loadChannelChangeLogsWithHasMore:(BOOL)hasMore token:(NSString * _Nullable)token;
/// This function sorts the channel lists.
/// since:
/// 1.2.5
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)sortChannelListWithNeedReload:(BOOL)needReload;
/// This function updates the channels.
/// It is updated only if the channels already exist in the list, and if not, it is ignored.
/// And, after updating the channels, a function to sort the channel list is called.
/// since:
/// 1.2.5
/// \param channels Channel array to update
///
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)updateChannels:(NSArray<SBDGroupChannel *> * _Nullable)channels needReload:(BOOL)needReload;
/// This function upserts the channels.
/// If the channels are already in the list, it is updated, otherwise it is inserted.
/// And, after upserting the channels, a function to sort the channel list is called.
/// since:
/// 1.2.5
/// \param channels Channel array to upsert
///
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)upsertChannels:(NSArray<SBDGroupChannel *> * _Nullable)channels needReload:(BOOL)needReload;
/// This function deletes the channels using the channel urls.
/// since:
/// 1.2.5
/// \param channelUrls Channel url array to delete
///
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)deleteChannelsWithChannelUrls:(NSArray<NSString *> * _Nullable)channelUrls needReload:(BOOL)needReload;
/// This is a function that shows the channelViewController.
/// If you want to use a custom channelViewController, override it and implement it.
/// \param channelUrl channel url for use in channelViewController.
///
/// \param messageListParams If there is a messageListParams set directly for use in Channel, set it up here
///
- (void)showChannelWithChannelUrl:(NSString * _Nonnull)channelUrl messageListParams:(SBDMessageListParams * _Nullable)messageListParams;
/// This is a function that shows the channel type selector when a supergroup/broadcast channel can be set.
/// <ul>
///   <li>
///     If you want to use a custom <code>createChannelTypeSelector</code>, override it and implement it.
///   </li>
/// </ul>
/// since:
/// 1.2.0
- (void)showCreateChannelTypeSelector;
/// This is a function that shows the channel creation viewController with channel type.
/// If you want to use a custom createChannelViewController, override it and implement it.
/// \param type Using the Specified Type in CreateChannelViewController (default: <code>.group</code>)
///
- (void)showCreateChannelWithType:(enum ChannelType)type;
/// Used to register a custom cell as a base cell based on <code>SBUBaseChannelCell</code>.
/// \param channelCell Customized channel cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithChannelCell:(SBUBaseChannelCell * _Nonnull)channelCell nib:(UINib * _Nullable)nib;
/// Used to register a custom cell as a additional cell based on <code>SBUBaseChannelCell</code>.
/// \param customCell Customized channel cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithCustomCell:(SBUBaseChannelCell * _Nullable)customCell nib:(UINib * _Nullable)nib;
- (void)reloadTableView;
/// This is used to check the loading status and control loading indicator.
/// \param loadingState Set to true when the list is loading.
///
/// \param showIndicator If true, the loading indicator is started, and if false, the indicator is stopped.
///
- (void)setLoading:(BOOL)loadingState :(BOOL)showIndicator;
@end


@interface SBUChannelListViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUEmptyViewDelegate>
- (void)didSelectRetry;
@end


@interface SBUChannelListViewController (SWIFT_EXTENSION(SendBirdUIKit))
- (BOOL)shouldShowLoadingIndicator;
- (void)shouldDismissLoadingIndicator;
@end


/// This delegate is used in the class to handle the action.
SWIFT_PROTOCOL("_TtP13SendBirdUIKit36SBUCreateChannelTypeSelectorDelegate_")
@protocol SBUCreateChannelTypeSelectorDelegate
/// This delegate function notifies the <code>SBUchannelListViewController</code> when closing the selector.
- (void)didSelectCloseSelector;
/// This delegate function notifies the <code>SBUchannelListViewController</code> when selecting the create group channel menu.
- (void)didSelectCreateGroupChannel;
/// This delegate function notifies the <code>SBUchannelListViewController</code> when selecting the create super group channel menu.
- (void)didSelectCreateSuperGroupChannel;
/// This delegate function notifies the <code>SBUchannelListViewController</code> when selecting the create broadcast channel menu.
- (void)didSelectCreateBroadcastChannel;
@end


@interface SBUChannelListViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUCreateChannelTypeSelectorDelegate>
- (void)didSelectCloseSelector;
- (void)didSelectCreateGroupChannel;
- (void)didSelectCreateSuperGroupChannel;
- (void)didSelectCreateBroadcastChannel;
@end

@class UISwipeActionsConfiguration;

@interface SBUChannelListViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UITableViewDataSource, UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UISwipeActionsConfiguration * _Nullable)tableView:(UITableView * _Nonnull)tableView trailingSwipeActionsConfigurationForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBUChannelListViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBDChannelDelegate, SBDConnectionDelegate>
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidJoin:(SBDUser * _Nonnull)user;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidLeave:(SBDUser * _Nonnull)user;
- (void)channelWasChanged:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDBaseChannel * _Nonnull)sender messageWasDeleted:(int64_t)messageId;
- (void)channelWasFrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasUnfrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasBanned:(SBDUser * _Nonnull)user;
- (void)didSucceedReconnection;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit23SBUChannelSettingsTheme")
@interface SBUChannelSettingsTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUChannelSettingsTheme * _Nonnull light;)
+ (SBUChannelSettingsTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUChannelSettingsTheme * _Nonnull dark;)
+ (SBUChannelSettingsTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatusBarStyle:(UIStatusBarStyle)statusBarStyle navigationBarTintColor:(UIColor * _Nonnull)navigationBarTintColor navigationShadowColor:(UIColor * _Nonnull)navigationShadowColor leftBarButtonTintColor:(UIColor * _Nonnull)leftBarButtonTintColor rightBarButtonTintColor:(UIColor * _Nonnull)rightBarButtonTintColor backgroundColor:(UIColor * _Nonnull)backgroundColor cellTextFont:(UIFont * _Nonnull)cellTextFont cellTextColor:(UIColor * _Nonnull)cellTextColor cellSubTextFont:(UIFont * _Nonnull)cellSubTextFont cellSubTextColor:(UIColor * _Nonnull)cellSubTextColor cellSwitchColor:(UIColor * _Nonnull)cellSwitchColor cellSeparateColor:(UIColor * _Nonnull)cellSeparateColor cellTypeIconTintColor:(UIColor * _Nonnull)cellTypeIconTintColor cellArrowIconTintColor:(UIColor * _Nonnull)cellArrowIconTintColor cellLeaveIconColor:(UIColor * _Nonnull)cellLeaveIconColor cellDeleteIconColor:(UIColor * _Nonnull)cellDeleteIconColor userNameFont:(UIFont * _Nonnull)userNameFont userNameTextColor:(UIColor * _Nonnull)userNameTextColor itemTextColor:(UIColor * _Nonnull)itemTextColor itemColor:(UIColor * _Nonnull)itemColor urlTitleFont:(UIFont * _Nonnull)urlTitleFont urlTitleColor:(UIColor * _Nonnull)urlTitleColor urlFont:(UIFont * _Nonnull)urlFont urlColor:(UIColor * _Nonnull)urlColor OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
@property (nonatomic, strong) UIColor * _Nonnull navigationShadowColor;
@property (nonatomic, strong) UIColor * _Nonnull leftBarButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull rightBarButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIFont * _Nonnull cellTextFont;
@property (nonatomic, strong) UIColor * _Nonnull cellTextColor;
@property (nonatomic, strong) UIFont * _Nonnull cellSubTextFont;
@property (nonatomic, strong) UIColor * _Nonnull cellSubTextColor;
@property (nonatomic, strong) UIColor * _Nonnull cellSwitchColor;
@property (nonatomic, strong) UIColor * _Nonnull cellSeparateColor;
@property (nonatomic, strong) UIColor * _Nonnull cellTypeIconTintColor;
@property (nonatomic, strong) UIColor * _Nonnull cellArrowIconTintColor;
@property (nonatomic, strong) UIColor * _Nonnull cellLeaveIconColor;
@property (nonatomic, strong) UIColor * _Nonnull cellDeleteIconColor;
@property (nonatomic, strong) UIColor * _Nonnull cellNotificationIconColor SWIFT_DEPRECATED_MSG("deprecated in 1.2.0", "cellTypeIconTintColor");
@property (nonatomic, strong) UIColor * _Nonnull cellMemberIconColor SWIFT_DEPRECATED_MSG("deprecated in 1.2.0", "cellTypeIconTintColor");
@property (nonatomic, strong) UIColor * _Nonnull cellMemberButtonColor SWIFT_DEPRECATED_MSG("deprecated in 1.2.0", "cellArrowIconTintColor");
@property (nonatomic, strong) UIFont * _Nonnull userNameFont;
@property (nonatomic, strong) UIColor * _Nonnull userNameTextColor;
@property (nonatomic, strong) UIColor * _Nonnull itemTextColor;
@property (nonatomic, strong) UIColor * _Nonnull itemColor;
@property (nonatomic, strong) UIFont * _Nonnull urlTitleFont;
@property (nonatomic, strong) UIColor * _Nonnull urlTitleColor;
@property (nonatomic, strong) UIFont * _Nonnull urlFont;
@property (nonatomic, strong) UIColor * _Nonnull urlColor;
@end

@class SBDGroupChannelParams;

SWIFT_CLASS("_TtC13SendBirdUIKit32SBUChannelSettingsViewController")
@interface SBUChannelSettingsViewController : SBUBaseChannelSettingViewController
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nullable channel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'initWithChannelUrl:'");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'initWithChannelUrl:'");
/// If you have channel object, use this initialize function.
/// \param channel Channel object
///
- (nonnull instancetype)initWithChannel:(SBDGroupChannel * _Nonnull)channel OBJC_DESIGNATED_INITIALIZER;
/// If you don’t have channel object and have channelUrl, use this initialize function.
/// \param channelUrl Channel url string
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// This function is used to load channel information.
/// \param channelUrl channel url
///
- (void)loadChannelWithChannelUrl:(NSString * _Nullable)channelUrl;
- (void)updateChannelInfoWithChannelName:(NSString * _Nullable)channelName SWIFT_DEPRECATED_MSG("deprecated in 1.0.9", "updateChannelWithChannelName:coverImage:");
/// Used to update the channel name or cover image. <code>channelName</code> and<code> coverImage</code> are used for updating only the set values.
/// since:
/// 1.0.9
/// \param channelName Channel name to update
///
/// \param coverImage Cover image to update
///
- (void)updateChannelWithChannelName:(NSString * _Nullable)channelName coverImage:(UIImage * _Nullable)coverImage;
/// Updates the channel with channelParams.
/// You can update a channel by setting various properties of ChannelParams.
/// since:
/// 1.0.9
/// \param params <code>SBDGroupChannelParams</code> class object
///
- (void)updateChannelWithParams:(SBDGroupChannelParams * _Nonnull)params;
/// Changes push trigger option on channel.
/// \param isOn notification status
///
- (void)changeNotificationWithIsOn:(BOOL)isOn;
/// Leaves the channel.
- (void)leaveChannel;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit15SBUChannelTheme")
@interface SBUChannelTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUChannelTheme * _Nonnull light;)
+ (SBUChannelTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUChannelTheme * _Nonnull dark;)
+ (SBUChannelTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUChannelTheme * _Nonnull overlay;)
+ (SBUChannelTheme * _Nonnull)overlay SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatusBarStyle:(UIStatusBarStyle)statusBarStyle navigationBarTintColor:(UIColor * _Nonnull)navigationBarTintColor navigationBarShadowColor:(UIColor * _Nonnull)navigationBarShadowColor leftBarButtonTintColor:(UIColor * _Nonnull)leftBarButtonTintColor rightBarButtonTintColor:(UIColor * _Nonnull)rightBarButtonTintColor backgroundColor:(UIColor * _Nonnull)backgroundColor removeItemColor:(UIColor * _Nonnull)removeItemColor deleteItemColor:(UIColor * _Nonnull)deleteItemColor cancelItemColor:(UIColor * _Nonnull)cancelItemColor alertRemoveColor:(UIColor * _Nonnull)alertRemoveColor alertCancelColor:(UIColor * _Nonnull)alertCancelColor menuTextColor:(UIColor * _Nonnull)menuTextColor menuItemTintColor:(UIColor * _Nonnull)menuItemTintColor channelStateBannerFont:(UIFont * _Nonnull)channelStateBannerFont channelStateBannerTextColor:(UIColor * _Nonnull)channelStateBannerTextColor channelStateBannerBackgroundColor:(UIColor * _Nonnull)channelStateBannerBackgroundColor OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
@property (nonatomic, strong) UIColor * _Nonnull navigationBarShadowColor;
@property (nonatomic, strong) UIColor * _Nonnull leftBarButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull rightBarButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull removeItemColor;
@property (nonatomic, strong) UIColor * _Nonnull deleteItemColor;
@property (nonatomic, strong) UIColor * _Nonnull cancelItemColor;
@property (nonatomic, strong) UIColor * _Nonnull alertRemoveColor;
@property (nonatomic, strong) UIColor * _Nonnull alertCancelColor;
@property (nonatomic, strong) UIColor * _Nonnull menuTextColor;
@property (nonatomic, strong) UIColor * _Nonnull menuItemTintColor;
@property (nonatomic, strong) UIFont * _Nonnull channelStateBannerFont;
@property (nonatomic, strong) UIColor * _Nonnull channelStateBannerTextColor;
@property (nonatomic, strong) UIColor * _Nonnull channelStateBannerBackgroundColor;
@end

@class SBUHighlightMessageInfo;
@class UIScrollView;
@class SBUUserMessageCell;
@class SBUFileMessageCell;
@class SBUUnknownMessageCell;

SWIFT_CLASS("_TtC13SendBirdUIKit24SBUChannelViewController")
@interface SBUChannelViewController : SBUBaseChannelViewController
@property (nonatomic, copy) NSString * _Nullable channelName;
/// You can use the customized view and a view that inherits <code>SBUNewMessageInfo</code>.
/// If you use a view that inherits SBUNewMessageInfo, you can change the button and their action.
@property (nonatomic, strong) UIView * _Nullable newMessageInfoView;
@property (nonatomic, strong) UIView * _Nullable titleView;
@property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButton;
@property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButton;
@property (nonatomic, strong) UIView * _Nullable channelStateBanner;
@property (nonatomic, strong) UIView * _Nullable scrollBottomView;
@property (nonatomic, readonly, strong) SBUBaseMessageCell * _Nullable adminMessageCell;
@property (nonatomic, readonly, strong) SBUBaseMessageCell * _Nullable userMessageCell;
@property (nonatomic, readonly, strong) SBUBaseMessageCell * _Nullable fileMessageCell;
@property (nonatomic, readonly, strong) SBUBaseMessageCell * _Nullable customMessageCell;
@property (nonatomic, readonly, strong) SBUBaseMessageCell * _Nullable unknownMessageCell;
/// This object is used to import a list of messages, send messages, modify messages, and so on, and is created during initialization.
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nullable channel;
@property (nonatomic, strong) SBUHighlightMessageInfo * _Nullable highlightInfo;
/// To decide whether to use right bar button item or not
@property (nonatomic) BOOL useRightBarButtonItem;
/// This object is used before response from the server
@property (nonatomic, readonly, copy) NSDictionary<NSString *, SBDBaseMessage *> * _Nonnull preSendMessages SWIFT_DEPRECATED_MSG("deprecated in 1.2.10");
/// This object that has resendable messages, including <code>pending messages</code> and <code>failed messages</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, SBDBaseMessage *> * _Nonnull resendableMessages SWIFT_DEPRECATED_MSG("deprecated in 1.2.10");
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSDictionary<NSString *, id> *> * _Nonnull preSendFileData SWIFT_DEPRECATED_MSG("deprecated in 1.2.10");
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSDictionary<NSString *, id> *> * _Nonnull resendableFileData SWIFT_DEPRECATED_MSG("deprecated in 1.2.10");
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull fileTransferProgress SWIFT_DEPRECATED_MSG("deprecated in 1.2.10");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUChannelViewController(channelUrl:)'");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUChannelViewController(channelUrl:)'");
/// If you have channel object, use this initialize function. And, if you have own message list params, please set it. If not set, it is used as the default value.
/// See the example below for params generation.
/// \code
///     let params = SBDMessageListParams()
///     params.includeMetaArray = true
///     params.includeReactions = true
///     params.includeReplies = true
///     ...
///
/// \endcodenote:
/// The <code>reverse</code> and the <code>previousResultSize</code> properties in the <code>SBDMessageListParams</code> are set in the UIKit. Even though you set that property it will be ignored.
/// since:
/// 1.0.11
/// \param channel Channel object
///
- (nonnull instancetype)initWithChannel:(SBDGroupChannel * _Nonnull)channel messageListParams:(SBDMessageListParams * _Nullable)messageListParams OBJC_DESIGNATED_INITIALIZER;
/// If you don’t have channel object and have channelUrl, use this initialize function. And, if you have own message list params, please set it. If not set, it is used as the default value.
/// See the example below for params generation.
/// \code
///     let params = SBDMessageListParams()
///     params.includeMetaArray = true
///     params.includeReactions = true
///     params.includeReplies = true
///     ...
///
/// \endcodenote:
/// The <code>reverse</code> and the <code>previousResultSize</code> properties in the <code>SBDMessageListParams</code> are set in the UIKit. Even though you set that property it will be ignored.
/// since:
/// 1.0.11
/// \param channelUrl Channel url string
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl messageListParams:(SBDMessageListParams * _Nullable)messageListParams OBJC_DESIGNATED_INITIALIZER;
/// Use this initializer to enter a channel to start from a specific timestamp..
/// since:
/// 2.1.0
/// \param channelUrl Channel’s url
///
/// \param startingPoint A starting point timestamp to start the message list from
///
/// \param messageListParams <code>SBDMessageListParams</code> object to be used when loading messages.
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl startingPoint:(int64_t)startingPoint messageListParams:(SBDMessageListParams * _Nullable)messageListParams OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)setupAutolayout;
- (void)setupStyles;
- (void)updateStyles;
- (void)viewDidLayoutSubviews;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
/// This function is used to load channel information.
/// \param channelUrl channel url
///
/// \param messageListParams (Optional) The parameter to be used when getting channel information.
///
- (void)loadChannelWithChannelUrl:(NSString * _Nullable)channelUrl messageListParams:(SBDMessageListParams * _Nullable)messageListParams;
/// This function is used to add or delete reactions.
/// since:
/// 1.1.0
/// \param message <code>SBDBaseMessage</code> object to update
///
/// \param emojiKey set emoji key
///
/// \param didSelect set reaction state
///
- (void)setReactionWithMessage:(SBDBaseMessage * _Nonnull)message emojiKey:(NSString * _Nonnull)emojiKey didSelect:(BOOL)didSelect;
/// This function updates the messages in the list.
/// It is updated only if the messages already exist in the list, and if not, it is ignored.
/// And, after updating the messages, a function to sort the message list is called.
/// since:
/// 1.2.5
/// \param messages Message array to update
///
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)updateMessagesInListWithMessages:(NSArray<SBDBaseMessage *> * _Nullable)messages needReload:(BOOL)needReload;
/// This function increases the new message count.
- (void)increaseNewMessageCount;
/// If you want to use a custom channelSettingsViewController, override it and implement it.
- (void)showChannelSettings;
/// This function presents <code>SBUEmojiListViewController</code>
/// since:
/// 1.1.0
/// \param message <code>SBDBaseMessage</code> object
///
- (void)showEmojiListModalWithMessage:(SBDBaseMessage * _Nonnull)message;
/// Used to register a custom cell as a admin message cell based on <code>SBUBaseMessageCell</code>.
/// \param channelCell Customized admin message cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithAdminMessageCell:(SBUBaseMessageCell * _Nonnull)adminMessageCell nib:(UINib * _Nullable)nib;
/// Used to register a custom cell as a user message cell based on <code>SBUBaseMessageCell</code>.
/// \param channelCell Customized user message cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithUserMessageCell:(SBUBaseMessageCell * _Nonnull)userMessageCell nib:(UINib * _Nullable)nib;
/// Used to register a custom cell as a file message cell based on <code>SBUBaseMessageCell</code>.
/// \param channelCell Customized file message cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithFileMessageCell:(SBUBaseMessageCell * _Nonnull)fileMessageCell nib:(UINib * _Nullable)nib;
/// Used to register a custom cell as a additional message cell based on <code>SBUBaseMessageCell</code>.
/// \param channelCell Customized message cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithCustomMessageCell:(SBUBaseMessageCell * _Nullable)customMessageCell nib:(UINib * _Nullable)nib;
/// This function sets the cell’s tap gesture handling.
/// \param cell Message cell object
///
/// \param message Message object
///
- (void)setTapGestureHandler:(SBUBaseMessageCell * _Nonnull)cell message:(SBDBaseMessage * _Nonnull)message;
/// This function sets the cell’s long tap gesture handling.
/// \param cell Message cell object
///
/// \param message Message object
///
/// \param indexPath indexpath of cell
///
- (void)setLongTapGestureHandler:(SBUBaseMessageCell * _Nonnull)cell message:(SBDBaseMessage * _Nonnull)message indexPath:(NSIndexPath * _Nonnull)indexPath;
/// This function sets the cell’s tap emoji gesture handling.
/// since:
/// 1.1.0
/// \param cell Message cell object
///
/// \param emojiKey emoji key
///
- (void)setTapEmojiGestureHandler:(SBUBaseMessageCell * _Nonnull)cell emojiKey:(NSString * _Nonnull)emojiKey SWIFT_DEPRECATED_MSG("deprecated in 1.2.2", "setEmojiTapGestureHandler:emojiKey:");
/// This function sets the cell’s tap emoji gesture handling.
/// since:
/// 1.2.2
/// \param cell Message cell object
///
/// \param emojiKey emoji key
///
- (void)setEmojiTapGestureHandler:(SBUBaseMessageCell * _Nonnull)cell emojiKey:(NSString * _Nonnull)emojiKey;
/// This function sets the cell’s long tap emoji gesture handling.
/// since:
/// 1.1.0
/// \param cell Message cell object
///
/// \param emojiKey emoji key
///
- (void)setLongTapEmojiGestureHandler:(SBUBaseMessageCell * _Nonnull)cell emojiKey:(NSString * _Nonnull)emojiKey SWIFT_DEPRECATED_MSG("deprecated in 1.2.2", "setEmojiLongTapGestureHandler:emojiKey:");
/// This function sets the cell’s long tap emoji gesture handling.
/// since:
/// 1.2.2
/// \param cell Message cell object
///
/// \param emojiKey emoji key
///
- (void)setEmojiLongTapGestureHandler:(SBUBaseMessageCell * _Nonnull)cell emojiKey:(NSString * _Nonnull)emojiKey;
/// This is used to messageInputView state update.
/// since:
/// 1.2.0
- (void)updateMessageInputModeState;
/// This function checks if the current message and the next message date have the same day.
/// \param currentIndex Current message index
///
///
/// returns:
/// If <code>true</code>, the messages date is same day.
- (BOOL)checkSameDayAsNextMessageWithCurrentIndex:(NSInteger)currentIndex SWIFT_WARN_UNUSED_RESULT;
/// This is used to check the loading status and control loading indicator.
/// \param loadingState Set to true when the list is loading.
///
/// \param showIndicator If true, the loading indicator is started, and if false, the indicator is stopped.
///
- (void)setLoading:(BOOL)loadingState :(BOOL)showIndicator;
/// This is a function that gets the location of the message to be grouped.
/// Only successful messages can be grouped.
/// since:
/// 1.2.1
/// \param currentIndex Index of current message in the message list
///
///
/// returns:
/// Position of a message when grouped
- (enum MessageGroupPosition)getMessageGroupingPositionWithCurrentIndex:(NSInteger)currentIndex SWIFT_WARN_UNUSED_RESULT;
/// This function shows channel settings.
- (void)onClickSetting;
- (void)onClickScrollBottomWithSender:(UIButton * _Nullable)sender;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollToBottomWithAnimated:(BOOL)animated;
/// This function sets gestures in user message cell.
/// since:
/// 1.2.5
/// \param cell User message cell
///
/// \param userMessage User message object
///
/// \param indexPath Cell’s indexPath
///
- (void)setUserMessageCellGestures:(SBUUserMessageCell * _Nonnull)cell userMessage:(SBDUserMessage * _Nonnull)userMessage indexPath:(NSIndexPath * _Nonnull)indexPath;
/// This function sets gestures in file message cell.
/// since:
/// 1.2.5
/// \param cell File message cell
///
/// \param fileMessage File message object
///
/// \param indexPath Cell’s indexPath
///
- (void)setFileMessageCellGestures:(SBUFileMessageCell * _Nonnull)cell fileMessage:(SBDFileMessage * _Nonnull)fileMessage indexPath:(NSIndexPath * _Nonnull)indexPath;
/// This function sets gestures in unknown message cell.
/// since:
/// 1.2.5
/// \param cell Unknown message cell
///
/// \param unknownMessage message object
///
/// \param indexPath Cell’s indexPath
///
- (void)setUnkownMessageCellGestures:(SBUUnknownMessageCell * _Nonnull)cell unknownMessage:(SBDBaseMessage * _Nonnull)unknownMessage indexPath:(NSIndexPath * _Nonnull)indexPath;
/// This function calculates the point at which to draw the menu.
/// since:
/// 1.2.5
/// \param indexPath IndexPath
///
/// \param position Message position
///
///
/// returns:
/// <code>CGPoint</code> value
- (CGPoint)calculatorMenuPointWithIndexPath:(NSIndexPath * _Nonnull)indexPath position:(enum MessagePosition)position SWIFT_WARN_UNUSED_RESULT;
/// This function shows cell’s menu: retry, delete, cancel.
/// This is used when selected failed message.
/// since:
/// 2.1.12
/// \param message message object
///
- (void)showFailedMessageMenuWithMessage:(SBDBaseMessage * _Nonnull)message;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// This function generates cell’s identifier.
/// \param message Message object
///
///
/// returns:
/// Identifier
- (NSString * _Nonnull)generateCellIdentifierBy:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (void)messageInputViewDidEndTyping;
@end

@class UIDocumentInteractionController;

@interface SBUChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UIDocumentInteractionControllerDelegate>
- (UIViewController * _Nonnull)documentInteractionControllerViewControllerForPreview:(UIDocumentInteractionController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDReactionEvent;

@interface SBUChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBDChannelDelegate, SBDConnectionDelegate>
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didUpdateMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender messageWasDeleted:(int64_t)messageId;
- (void)channel:(SBDBaseChannel * _Nonnull)sender updatedReaction:(SBDReactionEvent * _Nonnull)reactionEvent;
- (void)channelDidUpdateReadReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateDeliveryReceipt:(SBDGroupChannel * _Nonnull)sender;
- (void)channelDidUpdateTypingStatus:(SBDGroupChannel * _Nonnull)sender;
- (void)channelWasChanged:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasFrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasUnfrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasMuted:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasUnmuted:(SBDUser * _Nonnull)user;
- (void)channelDidUpdateOperators:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasBanned:(SBDUser * _Nonnull)user;
- (void)didSucceedReconnection;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit11SBUColorSet")
@interface SBUColorSet : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primary100;)
+ (UIColor * _Nonnull)primary100 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimary100:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primary200;)
+ (UIColor * _Nonnull)primary200 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimary200:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primary300;)
+ (UIColor * _Nonnull)primary300 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimary300:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primary400;)
+ (UIColor * _Nonnull)primary400 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimary400:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primary500;)
+ (UIColor * _Nonnull)primary500 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimary500:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull secondary100;)
+ (UIColor * _Nonnull)secondary100 SWIFT_WARN_UNUSED_RESULT;
+ (void)setSecondary100:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull secondary200;)
+ (UIColor * _Nonnull)secondary200 SWIFT_WARN_UNUSED_RESULT;
+ (void)setSecondary200:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull secondary300;)
+ (UIColor * _Nonnull)secondary300 SWIFT_WARN_UNUSED_RESULT;
+ (void)setSecondary300:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull secondary400;)
+ (UIColor * _Nonnull)secondary400 SWIFT_WARN_UNUSED_RESULT;
+ (void)setSecondary400:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull secondary500;)
+ (UIColor * _Nonnull)secondary500 SWIFT_WARN_UNUSED_RESULT;
+ (void)setSecondary500:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull background50;)
+ (UIColor * _Nonnull)background50 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackground50:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull background100;)
+ (UIColor * _Nonnull)background100 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackground100:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull background200;)
+ (UIColor * _Nonnull)background200 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackground200:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull background300;)
+ (UIColor * _Nonnull)background300 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackground300:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull background400;)
+ (UIColor * _Nonnull)background400 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackground400:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull background500;)
+ (UIColor * _Nonnull)background500 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackground500:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull background600;)
+ (UIColor * _Nonnull)background600 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackground600:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull background700;)
+ (UIColor * _Nonnull)background700 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackground700:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull overlay01;)
+ (UIColor * _Nonnull)overlay01 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOverlay01:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull overlay02;)
+ (UIColor * _Nonnull)overlay02 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOverlay02:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull onlight01;)
+ (UIColor * _Nonnull)onlight01 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnlight01:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull onlight02;)
+ (UIColor * _Nonnull)onlight02 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnlight02:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull onlight03;)
+ (UIColor * _Nonnull)onlight03 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnlight03:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull onlight04;)
+ (UIColor * _Nonnull)onlight04 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnlight04:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull ondark01;)
+ (UIColor * _Nonnull)ondark01 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOndark01:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull ondark02;)
+ (UIColor * _Nonnull)ondark02 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOndark02:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull ondark03;)
+ (UIColor * _Nonnull)ondark03 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOndark03:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull ondark04;)
+ (UIColor * _Nonnull)ondark04 SWIFT_WARN_UNUSED_RESULT;
+ (void)setOndark04:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull error100;)
+ (UIColor * _Nonnull)error100 SWIFT_WARN_UNUSED_RESULT;
+ (void)setError100:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull error200;)
+ (UIColor * _Nonnull)error200 SWIFT_WARN_UNUSED_RESULT;
+ (void)setError200:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull error300;)
+ (UIColor * _Nonnull)error300 SWIFT_WARN_UNUSED_RESULT;
+ (void)setError300:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull error400;)
+ (UIColor * _Nonnull)error400 SWIFT_WARN_UNUSED_RESULT;
+ (void)setError400:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull error500;)
+ (UIColor * _Nonnull)error500 SWIFT_WARN_UNUSED_RESULT;
+ (void)setError500:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull information;)
+ (UIColor * _Nonnull)information SWIFT_WARN_UNUSED_RESULT;
+ (void)setInformation:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull highlight;)
+ (UIColor * _Nonnull)highlight SWIFT_WARN_UNUSED_RESULT;
+ (void)setHighlight:(UIColor * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC13SendBirdUIKit17SBUComponentTheme")
@interface SBUComponentTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUComponentTheme * _Nonnull light;)
+ (SBUComponentTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUComponentTheme * _Nonnull dark;)
+ (SBUComponentTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUComponentTheme * _Nonnull overlay;)
+ (SBUComponentTheme * _Nonnull)overlay SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithEmptyViewBackgroundColor:(UIColor * _Nonnull)emptyViewBackgroundColor emptyViewStatusFont:(UIFont * _Nonnull)emptyViewStatusFont emptyViewStatusTintColor:(UIColor * _Nonnull)emptyViewStatusTintColor emptyViewRetryButtonTintColor:(UIColor * _Nonnull)emptyViewRetryButtonTintColor emptyViewRetryButtonFont:(UIFont * _Nonnull)emptyViewRetryButtonFont overlayColor:(UIColor * _Nonnull)overlayColor backgroundColor:(UIColor * _Nonnull)backgroundColor highlightedColor:(UIColor * _Nonnull)highlightedColor buttonTextColor:(UIColor * _Nonnull)buttonTextColor separatorColor:(UIColor * _Nonnull)separatorColor shadowColor:(UIColor * _Nonnull)shadowColor closeBarButtonTintColor:(UIColor * _Nonnull)closeBarButtonTintColor alertTitleColor:(UIColor * _Nonnull)alertTitleColor alertTitleFont:(UIFont * _Nonnull)alertTitleFont alertDetailColor:(UIColor * _Nonnull)alertDetailColor alertDetailFont:(UIFont * _Nonnull)alertDetailFont alertPlaceholderColor:(UIColor * _Nonnull)alertPlaceholderColor alertButtonColor:(UIColor * _Nonnull)alertButtonColor alertErrorColor:(UIColor * _Nonnull)alertErrorColor alertButtonFont:(UIFont * _Nonnull)alertButtonFont alertTextFieldBackgroundColor:(UIColor * _Nonnull)alertTextFieldBackgroundColor alertTextFieldTintColor:(UIColor * _Nonnull)alertTextFieldTintColor alertTextFieldFont:(UIFont * _Nonnull)alertTextFieldFont actionSheetTextFont:(UIFont * _Nonnull)actionSheetTextFont actionSheetTextColor:(UIColor * _Nonnull)actionSheetTextColor actionSheetSubTextFont:(UIFont * _Nonnull)actionSheetSubTextFont actionSheetSubTextColor:(UIColor * _Nonnull)actionSheetSubTextColor actionSheetItemColor:(UIColor * _Nonnull)actionSheetItemColor actionSheetErrorColor:(UIColor * _Nonnull)actionSheetErrorColor actionSheetButtonFont:(UIFont * _Nonnull)actionSheetButtonFont newMessageFont:(UIFont * _Nonnull)newMessageFont newMessageTintColor:(UIColor * _Nonnull)newMessageTintColor newMessageBackground:(UIColor * _Nonnull)newMessageBackground newMessageHighlighted:(UIColor * _Nonnull)newMessageHighlighted newMessageButtonTintColor:(UIColor * _Nonnull)newMessageButtonTintColor newMessageButtonBackground:(UIColor * _Nonnull)newMessageButtonBackground newMessageButtonHighlighted:(UIColor * _Nonnull)newMessageButtonHighlighted scrollBottomButtonIconColor:(UIColor * _Nonnull)scrollBottomButtonIconColor scrollBottomButtonBackground:(UIColor * _Nonnull)scrollBottomButtonBackground scrollBottomButtonHighlighted:(UIColor * _Nonnull)scrollBottomButtonHighlighted titleOnlineStateColor:(UIColor * _Nonnull)titleOnlineStateColor titleColor:(UIColor * _Nonnull)titleColor titleFont:(UIFont * _Nonnull)titleFont titleStatusColor:(UIColor * _Nonnull)titleStatusColor titleStatusFont:(UIFont * _Nonnull)titleStatusFont menuTitleFont:(UIFont * _Nonnull)menuTitleFont userPlaceholderBackgroundColor:(UIColor * _Nonnull)userPlaceholderBackgroundColor userPlaceholderTintColor:(UIColor * _Nonnull)userPlaceholderTintColor reactionBoxBackgroundColor:(UIColor * _Nonnull)reactionBoxBackgroundColor reactionBoxBorderLineColor:(UIColor * _Nonnull)reactionBoxBorderLineColor reactionBoxEmojiCountColor:(UIColor * _Nonnull)reactionBoxEmojiCountColor reactionBoxEmojiBackgroundColor:(UIColor * _Nonnull)reactionBoxEmojiBackgroundColor reactionBoxSelectedEmojiBackgroundColor:(UIColor * _Nonnull)reactionBoxSelectedEmojiBackgroundColor reactionBoxEmojiCountFont:(UIFont * _Nonnull)reactionBoxEmojiCountFont emojiCountColor:(UIColor * _Nonnull)emojiCountColor emojiSelectedCountColor:(UIColor * _Nonnull)emojiSelectedCountColor emojiSelectedUnderlineColor:(UIColor * _Nonnull)emojiSelectedUnderlineColor emojiCountFont:(UIFont * _Nonnull)emojiCountFont reactionMenuLineColor:(UIColor * _Nonnull)reactionMenuLineColor emojiListSelectedBackgroundColor:(UIColor * _Nonnull)emojiListSelectedBackgroundColor addReactionTintColor:(UIColor * _Nonnull)addReactionTintColor channelTypeSelectorItemTintColor:(UIColor * _Nonnull)channelTypeSelectorItemTintColor channelTypeSelectorItemTextColor:(UIColor * _Nonnull)channelTypeSelectorItemTextColor channelTypeSelectorItemFont:(UIFont * _Nonnull)channelTypeSelectorItemFont broadcastIconBackgroundColor:(UIColor * _Nonnull)broadcastIconBackgroundColor broadcastIconTintColor:(UIColor * _Nonnull)broadcastIconTintColor barItemTintColor:(UIColor * _Nonnull)barItemTintColor loadingBackgroundColor:(UIColor * _Nonnull)loadingBackgroundColor loadingPopupBackgroundColor:(UIColor * _Nonnull)loadingPopupBackgroundColor loadingFont:(UIFont * _Nonnull)loadingFont loadingTextColor:(UIColor * _Nonnull)loadingTextColor loadingSpinnerColor:(UIColor * _Nonnull)loadingSpinnerColor OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nonnull emptyViewBackgroundColor;
@property (nonatomic, strong) UIFont * _Nonnull emptyViewStatusFont;
@property (nonatomic, strong) UIColor * _Nonnull emptyViewStatusTintColor;
@property (nonatomic, strong) UIColor * _Nonnull emptyViewRetryButtonTintColor;
@property (nonatomic, strong) UIFont * _Nonnull emptyViewRetryButtonFont;
@property (nonatomic, strong) UIColor * _Nonnull alertTitleColor;
@property (nonatomic, strong) UIFont * _Nonnull alertTitleFont;
@property (nonatomic, strong) UIColor * _Nonnull alertDetailColor;
@property (nonatomic, strong) UIFont * _Nonnull alertDetailFont;
@property (nonatomic, strong) UIColor * _Nonnull alertPlaceholderColor;
@property (nonatomic, strong) UIColor * _Nonnull alertButtonColor;
@property (nonatomic, strong) UIColor * _Nonnull alertErrorColor;
@property (nonatomic, strong) UIFont * _Nonnull alertButtonFont;
@property (nonatomic, strong) UIColor * _Nonnull alertTextFieldBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull alertTextFieldTintColor;
@property (nonatomic, strong) UIFont * _Nonnull alertTextFieldFont;
@property (nonatomic, strong) UIFont * _Nonnull actionSheetTextFont;
@property (nonatomic, strong) UIColor * _Nonnull actionSheetTextColor;
@property (nonatomic, strong) UIFont * _Nonnull actionSheetSubTextFont;
@property (nonatomic, strong) UIColor * _Nonnull actionSheetSubTextColor;
@property (nonatomic, strong) UIColor * _Nonnull actionSheetItemColor;
@property (nonatomic, strong) UIColor * _Nonnull actionSheetErrorColor;
@property (nonatomic, strong) UIFont * _Nonnull actionSheetButtonFont;
@property (nonatomic, strong) UIFont * _Nonnull newMessageFont;
@property (nonatomic, strong) UIColor * _Nonnull newMessageTintColor;
@property (nonatomic, strong) UIColor * _Nonnull newMessageBackground;
@property (nonatomic, strong) UIColor * _Nonnull newMessageHighlighted;
@property (nonatomic, strong) UIColor * _Nonnull newMessageButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull newMessageButtonBackground;
@property (nonatomic, strong) UIColor * _Nonnull newMessageButtonHighlighted;
@property (nonatomic, strong) UIColor * _Nonnull scrollBottomButtonIconColor;
@property (nonatomic, strong) UIColor * _Nonnull scrollBottomButtonBackground;
@property (nonatomic, strong) UIColor * _Nonnull scrollBottomButtonHighlighted;
@property (nonatomic, strong) UIColor * _Nonnull titleOnlineStateColor;
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
@property (nonatomic, strong) UIColor * _Nonnull titleStatusColor;
@property (nonatomic, strong) UIFont * _Nonnull titleStatusFont;
@property (nonatomic, strong) UIFont * _Nonnull menuTitleFont;
@property (nonatomic, strong) UIColor * _Nonnull overlayColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull highlightedColor;
@property (nonatomic, strong) UIColor * _Nonnull buttonTextColor;
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
@property (nonatomic, strong) UIColor * _Nonnull closeBarButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull userPlaceholderBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull userPlaceholderTintColor;
@property (nonatomic, strong) UIColor * _Nonnull reactionBoxBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull reactionBoxBorderLineColor;
@property (nonatomic, strong) UIColor * _Nonnull reactionBoxEmojiCountColor;
@property (nonatomic, strong) UIColor * _Nonnull reactionBoxEmojiBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull reactionBoxSelectedEmojiBackgroundColor;
@property (nonatomic, strong) UIFont * _Nonnull reactionBoxEmojiCountFont;
@property (nonatomic, strong) UIColor * _Nonnull emojiCountColor;
@property (nonatomic, strong) UIColor * _Nonnull emojiSelectedCountColor;
@property (nonatomic, strong) UIColor * _Nonnull emojiSelectedUnderlineColor;
@property (nonatomic, strong) UIFont * _Nonnull emojiCountFont;
@property (nonatomic, strong) UIColor * _Nonnull emojiListSelectedBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull reactionMenuLineColor;
@property (nonatomic, strong) UIColor * _Nonnull addReactionTintColor;
@property (nonatomic, strong) UIColor * _Nonnull channelTypeSelectorItemTintColor;
@property (nonatomic, strong) UIColor * _Nonnull channelTypeSelectorItemTextColor;
@property (nonatomic, strong) UIFont * _Nonnull channelTypeSelectorItemFont;
@property (nonatomic, strong) UIColor * _Nonnull broadcastIconBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull broadcastIconTintColor;
@property (nonatomic, strong) UIColor * _Nonnull barItemTintColor;
@property (nonatomic, strong) UIColor * _Nonnull loadingBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull loadingPopupBackgroundColor;
@property (nonatomic, strong) UIFont * _Nonnull loadingFont;
@property (nonatomic, strong) UIColor * _Nonnull loadingTextColor;
@property (nonatomic, strong) UIColor * _Nonnull loadingSpinnerColor;
@end

@class UIStackView;
@class UILongPressGestureRecognizer;
@class UITapGestureRecognizer;

/// It is a base class used in message cell with contents.
/// since:
/// 1.2.1
SWIFT_CLASS("_TtC13SendBirdUIKit25SBUContentBaseMessageCell")
@interface SBUContentBaseMessageCell : SBUBaseMessageCell
@property (nonatomic, strong) UIStackView * _Nonnull userNameStackView;
@property (nonatomic, strong) UIStackView * _Nonnull contentsStackView;
@property (nonatomic, strong) UIView * _Nonnull userNameView;
@property (nonatomic, strong) UIView * _Nonnull profileView;
@property (nonatomic, strong) UIView * _Nonnull stateView;
@property (nonatomic) BOOL useReaction;
- (void)setupViews;
- (void)setupAutolayout;
- (void)setupActions;
- (void)setupStyles;
- (void)setMessageGrouping;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)onLongPressContentViewWithSender:(UILongPressGestureRecognizer * _Nullable)sender;
- (void)onTapContentViewWithSender:(UITapGestureRecognizer * _Nonnull)sender;
- (void)onTapProfileImageViewWithSender:(UITapGestureRecognizer * _Nonnull)sender SWIFT_DEPRECATED_MSG("deprecated in 1.2.2", "onTapUserProfileViewWithSender:");
- (void)onTapUserProfileViewWithSender:(UITapGestureRecognizer * _Nonnull)sender;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit17SBUCoverImageView")
@interface SBUCoverImageView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end



/// This protocol is used to create a custom <code>CreateChannelTypeSelector</code>.
SWIFT_PROTOCOL("_TtP13SendBirdUIKit36SBUCreateChannelTypeSelectorProtocol_")
@protocol SBUCreateChannelTypeSelectorProtocol
/// This function shows selector view.
- (void)show;
/// This function dismisses selector view.
- (void)dismiss;
@end

@class SBUUserListTheme;
@class SBDApplicationUserListQuery;

SWIFT_CLASS("_TtC13SendBirdUIKit30SBUCreateChannelViewController")
@interface SBUCreateChannelViewController : SBUBaseViewController
@property (nonatomic, strong) UIView * _Nullable titleView;
@property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButton;
@property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButton;
@property (nonatomic, strong) UIView * _Nullable emptyView;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
@property (nonatomic, readonly, strong) UITableViewCell * _Nullable userCell;
@property (nonatomic, strong) SBUUserListTheme * _Nonnull theme;
@property (nonatomic, readonly) enum ChannelType channelType;
@property (nonatomic, readonly, copy) NSArray<SBUUser *> * _Nonnull userList;
@property (nonatomic, readonly, copy) NSSet<SBUUser *> * _Nonnull selectedUserList;
@property (nonatomic, readonly, strong) SBDApplicationUserListQuery * _Nullable userListQuery;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUCreateChannelViewController(type:)'");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'init'");
- (nonnull instancetype)init;
/// If you have user objects, use this initialize function.
/// \param users <code>SBUUser</code> array object
///
/// \param type The type of channel to create (default: <code>.group</code>)
///
- (nonnull instancetype)initWithUsers:(NSArray<SBUUser *> * _Nullable)users type:(enum ChannelType)type OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// This function handles the initialization of autolayouts.
- (void)setupAutolayout;
/// This function handles the initialization of styles.
- (void)setupStyles;
- (void)updateStyles;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
/// Load user list.
/// If want using your custom user list, filled users with your custom user list.
/// \param reset <code>true</code> is reset user list and load new list
///
/// \param users customized <code>SBUUser</code> array for add to user list
///
- (void)loadNextUserListWithReset:(BOOL)reset users:(NSArray<SBUUser *> * _Nullable)users;
/// When creating and using a user list directly, overriding this function and return the next user list.
/// since:
/// 1.1.1
///
/// returns:
/// [<code>SBUUser</code>] next user list
- (NSArray<SBUUser *> * _Nullable)nextUserList SWIFT_WARN_UNUSED_RESULT;
/// Creates the channel with userIds.
/// since:
/// 1.0.9
/// \param userIds User Ids to include
///
- (void)createChannelWithUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Creates the channel with channelParams.
/// You can create a channel by setting various properties of ChannelParams.
/// since:
/// 1.0.9
/// \param params <code>SBDGroupChannelParams</code> class object
///
/// \param messageListParams If there is a messageListParams set directly for use in Channel, set it up here
///
- (void)createChannelWithParams:(SBDGroupChannelParams * _Nonnull)params messageListParams:(SBDMessageListParams * _Nullable)messageListParams;
/// Used to register a custom cell as a base cell based on <code>UITableViewCell</code>.
/// \param userCell Customized channel cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithUserCell:(UITableViewCell * _Nonnull)userCell nib:(UINib * _Nullable)nib;
/// This function reloads user list.
/// since:
/// 1.2.5
- (void)reloadUserList SWIFT_DEPRECATED_MSG("deprecated in 2.1.11", "reloadData");
/// This function reloads the list.
/// since:
/// 2.1.11
- (void)reloadData;
/// This function shows loading indicator.
/// since:
/// 1.2.5
/// \param state If state is <code>true</code>, start loading indicator.
///
- (void)showLoadingWithState:(BOOL)state;
/// This function calls <code>createChannel:</code> function using the <code>selectedUserList</code>.
/// since:
/// 1.2.5
- (void)onClickCreate;
/// This function selects or deselects user.
/// since:
/// 1.2.5
/// \param user <code>SBUUser</code> object
///
- (void)selectUserWithUser:(SBUUser * _Nonnull)user;
@end


@interface SBUCreateChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUEmptyViewDelegate>
- (void)didSelectRetry;
@end


@interface SBUCreateChannelViewController (SWIFT_EXTENSION(SendBirdUIKit))
- (BOOL)shouldShowLoadingIndicator;
- (void)shouldDismissLoadingIndicator;
@end


@interface SBUCreateChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class SBDEmojiCategory;
@class SBDEmoji;

SWIFT_CLASS("_TtC13SendBirdUIKit15SBUEmojiManager")
@interface SBUEmojiManager : NSObject
/// This function gets a list of the emoji categories.
///
/// returns:
/// <code>SBDEmojiCategory</code> type array
+ (NSArray<SBDEmojiCategory *> * _Nonnull)getEmojiCategories SWIFT_WARN_UNUSED_RESULT;
/// This function gets a list of all emojis.
///
/// returns:
/// <code>SBDEmoji</code> type array
+ (NSArray<SBDEmoji *> * _Nonnull)getAllEmojis SWIFT_WARN_UNUSED_RESULT;
/// This function gets a list of emojis corresponding to category id.
///
/// returns:
/// <code>SBDEmoji</code> type array
+ (NSArray<SBDEmoji *> * _Nonnull)getEmojisWithEmojiCategoryId:(int64_t)emojiCategoryId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImageView;

SWIFT_CLASS("_TtC13SendBirdUIKit12SBUEmptyView")
@interface SBUEmptyView : UIView
@property (nonatomic) enum EmptyViewType type;
@property (nonatomic, weak) id <SBUEmptyViewDelegate> _Nullable delegate;
@property (nonatomic, strong) UIImageView * _Nonnull statusImageView;
@property (nonatomic, strong) UILabel * _Nonnull statusLabel;
@property (nonatomic, strong) SBUComponentTheme * _Nonnull theme;
@property (nonatomic, strong) SBUComponentTheme * _Nonnull overlayTheme;
@property (nonatomic, strong) UIButton * _Nonnull retryButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'initWithFrame:'");
- (void)setupViews;
- (void)setupAutolayout;
- (void)setupStyles;
- (void)layoutSubviews;
/// This function reloads emptyView.
/// \param type Empty view type
///
- (void)reloadData:(enum EmptyViewType)type;
/// Override this function to apply a custom type.
- (void)updateViews;
/// This function actions when the retry button click.
/// \param sender sender
///
- (void)onClickRetry:(id _Nonnull)sender;
@end



IB_DESIGNABLE
SWIFT_CLASS("_TtC13SendBirdUIKit18SBUFileMessageCell")
@interface SBUFileMessageCell : SBUContentBaseMessageCell
@property (nonatomic, readonly, strong) SBDFileMessage * _Nullable fileMessage;
- (void)setupViews;
- (void)setupAutolayout;
- (void)setupActions;
- (void)setupStyles;
- (void)configureWithHighlightInfo:(SBUHighlightMessageInfo * _Nullable)highlightInfo;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit10SBUFontSet")
@interface SBUFontSet : NSObject
/// Bold, 18pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull h1;)
+ (UIFont * _Nonnull)h1 SWIFT_WARN_UNUSED_RESULT;
+ (void)setH1:(UIFont * _Nonnull)value;
/// Medium, 18pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull h2;)
+ (UIFont * _Nonnull)h2 SWIFT_WARN_UNUSED_RESULT;
+ (void)setH2:(UIFont * _Nonnull)value;
/// Bold, 16pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull h3;)
+ (UIFont * _Nonnull)h3 SWIFT_WARN_UNUSED_RESULT;
+ (void)setH3:(UIFont * _Nonnull)value;
/// Regular, 16pt, Line height: 20pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull body1;)
+ (UIFont * _Nonnull)body1 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBody1:(UIFont * _Nonnull)value;
/// Semibold, 14pt, Line height: 16pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull body2;)
+ (UIFont * _Nonnull)body2 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBody2:(UIFont * _Nonnull)value;
/// Regular, 14pt, Line height: 16pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull body3;)
+ (UIFont * _Nonnull)body3 SWIFT_WARN_UNUSED_RESULT;
+ (void)setBody3:(UIFont * _Nonnull)value;
/// Semibold, 18pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull button1;)
+ (UIFont * _Nonnull)button1 SWIFT_WARN_UNUSED_RESULT;
+ (void)setButton1:(UIFont * _Nonnull)value;
/// Medium, 16pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull button2;)
+ (UIFont * _Nonnull)button2 SWIFT_WARN_UNUSED_RESULT;
+ (void)setButton2:(UIFont * _Nonnull)value;
/// Medium, 14pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull button3;)
+ (UIFont * _Nonnull)button3 SWIFT_WARN_UNUSED_RESULT;
+ (void)setButton3:(UIFont * _Nonnull)value;
/// Bold, 12pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull caption1;)
+ (UIFont * _Nonnull)caption1 SWIFT_WARN_UNUSED_RESULT;
+ (void)setCaption1:(UIFont * _Nonnull)value;
/// Regular, 12pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull caption2;)
+ (UIFont * _Nonnull)caption2 SWIFT_WARN_UNUSED_RESULT;
+ (void)setCaption2:(UIFont * _Nonnull)value;
/// Medium, 11pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull caption3;)
+ (UIFont * _Nonnull)caption3 SWIFT_WARN_UNUSED_RESULT;
+ (void)setCaption3:(UIFont * _Nonnull)value;
/// Regular, 11pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull caption4;)
+ (UIFont * _Nonnull)caption4 SWIFT_WARN_UNUSED_RESULT;
+ (void)setCaption4:(UIFont * _Nonnull)value;
/// Medium, 16pt, Line hieght 22pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull subtitle1;)
+ (UIFont * _Nonnull)subtitle1 SWIFT_WARN_UNUSED_RESULT;
+ (void)setSubtitle1:(UIFont * _Nonnull)value;
/// Regular, 16pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull subtitle2;)
+ (UIFont * _Nonnull)subtitle2 SWIFT_WARN_UNUSED_RESULT;
+ (void)setSubtitle2:(UIFont * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBDOpenChannelParams;

SWIFT_CLASS("_TtC13SendBirdUIKit21SBUGlobalCustomParams")
@interface SBUGlobalCustomParams : NSObject
/// This is a builder that allows you to predefined the global <code>SBDGroupChannelParams</code> processing to be used when creating a channel.
/// important:
///
/// This value is ignored if you set the parameter value directly through functions that receive the parameter inside the class.
/// See the example below for builder setting.
/// \code
/// SBUGlobalCustomParams.groupChannelParamsCreateBuilder = { params in
///     params?.isDistinct = true
///     ...
/// }
///
/// \endcodesince:
/// 1.2.2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable groupChannelParamsCreateBuilder)(SBDGroupChannelParams * _Nullable);)
+ (void (^ _Nullable)(SBDGroupChannelParams * _Nullable))groupChannelParamsCreateBuilder SWIFT_WARN_UNUSED_RESULT;
+ (void)setGroupChannelParamsCreateBuilder:(void (^ _Nullable)(SBDGroupChannelParams * _Nullable))value;
/// This is a builder that allows you to predefined the global <code>SBDGroupChannelParams</code> processing to be used when updating a channel.
/// important:
///
/// This value is ignored if you set the parameter value directly through functions that receive the parameter inside the class.
/// See the example below for builder setting.
/// \code
/// SBUGlobalCustomParams.groupChannelParamsUpdateBuilder = { params in
///     params?.coverUrl = <URL_PATH>
///     ...
/// }
///
/// \endcodesince:
/// 1.2.2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable groupChannelParamsUpdateBuilder)(SBDGroupChannelParams * _Nullable);)
+ (void (^ _Nullable)(SBDGroupChannelParams * _Nullable))groupChannelParamsUpdateBuilder SWIFT_WARN_UNUSED_RESULT;
+ (void)setGroupChannelParamsUpdateBuilder:(void (^ _Nullable)(SBDGroupChannelParams * _Nullable))value;
/// This is a builder that allows you to predefined the global <code>SBDOpenChannelParams</code> processing to be used when updating a channel.
/// important:
///
/// This value is ignored if you set the parameter value directly through functions that receive the parameter inside the class.
/// See the example below for builder setting.
/// \code
/// SBUGlobalCustomParams.openChannelParamsUpdateBuilder = { params in
///     params?.coverUrl = <URL_PATH>
///     ...
/// }
///
/// \endcodesince:
/// 1.2.2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable openChannelParamsUpdateBuilder)(SBDOpenChannelParams * _Nullable);)
+ (void (^ _Nullable)(SBDOpenChannelParams * _Nullable))openChannelParamsUpdateBuilder SWIFT_WARN_UNUSED_RESULT;
+ (void)setOpenChannelParamsUpdateBuilder:(void (^ _Nullable)(SBDOpenChannelParams * _Nullable))value;
/// This is a builder that allows you to predefined the global <code>SBDUserMessageParams</code> processing to be used when sending a user message.
/// important:
///
/// This value is ignored if you set the parameter value directly through functions that receive the parameter inside the class.
/// See the example below for builder setting.
/// \code
/// SBUGlobalCustomParams.userMessageParamsSendBuilder = { params in
///     params?.customType = <TYPE>
///     ...
/// }
///
/// \endcodesince:
/// 1.2.2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable userMessageParamsSendBuilder)(SBDUserMessageParams * _Nullable);)
+ (void (^ _Nullable)(SBDUserMessageParams * _Nullable))userMessageParamsSendBuilder SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserMessageParamsSendBuilder:(void (^ _Nullable)(SBDUserMessageParams * _Nullable))value;
/// This is a builder that allows you to predefined the global <code>SBDUserMessageParams</code> processing to be used when updating a user message.
/// important:
///
/// This value is ignored if you set the parameter value directly through functions that receive the parameter inside the class.
/// See the example below for builder setting.
/// \code
/// SBUGlobalCustomParams.userMessageParamsUpdateBuilder = { params in
///     params?.message = <MESSAGE>
///     ...
/// }
///
/// \endcodesince:
/// 1.2.2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable userMessageParamsUpdateBuilder)(SBDUserMessageParams * _Nullable);)
+ (void (^ _Nullable)(SBDUserMessageParams * _Nullable))userMessageParamsUpdateBuilder SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserMessageParamsUpdateBuilder:(void (^ _Nullable)(SBDUserMessageParams * _Nullable))value;
/// This is a builder that allows you to predefined the global <code>SBDFileMessageParams</code> processing to be used when sending a file message.
/// important:
///
/// This value is ignored if you set the parameter value directly through functions that receive the parameter inside the class.
/// See the example below for builder setting.
/// \code
/// SBUGlobalCustomParams.fileMessageParamsSendBuilder = { params in
///     params?.fileUrl = <FILE_URL>
///     ...
/// }
///
/// \endcodesince:
/// 1.2.2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable fileMessageParamsSendBuilder)(SBDFileMessageParams * _Nullable);)
+ (void (^ _Nullable)(SBDFileMessageParams * _Nullable))fileMessageParamsSendBuilder SWIFT_WARN_UNUSED_RESULT;
+ (void)setFileMessageParamsSendBuilder:(void (^ _Nullable)(SBDFileMessageParams * _Nullable))value;
/// This is a builder that allows you to predefined the global <code>SBDMessageListParams</code> processing to be used when loading message list.
/// important:
///
/// This value is ignored if you set the parameter value directly through functions that receive the parameter inside the class.
/// See the example below for builder setting.
/// \code
/// SBUGlobalCustomParams.messageListParamsBuilder = { params in
///     params?.includeReactions = true
///     params?.includeReplies = true
///     ...
/// }
///
/// \endcodesince:
/// 1.2.2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable messageListParamsBuilder)(SBDMessageListParams * _Nullable);)
+ (void (^ _Nullable)(SBDMessageListParams * _Nullable))messageListParamsBuilder SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessageListParamsBuilder:(void (^ _Nullable)(SBDMessageListParams * _Nullable))value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit10SBUGlobals")
@interface SBUGlobals : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable ApplicationId;)
+ (NSString * _Nullable)ApplicationId SWIFT_WARN_UNUSED_RESULT;
+ (void)setApplicationId:(NSString * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable AccessToken;)
+ (NSString * _Nullable)AccessToken SWIFT_WARN_UNUSED_RESULT;
+ (void)setAccessToken:(NSString * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUUser * _Nullable CurrentUser;)
+ (SBUUser * _Nullable)CurrentUser SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentUser:(SBUUser * _Nullable)value;
/// If this value is enabled, messages sent at similar times are grouped.
/// since:
/// 1.2.1
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL UsingMessageGrouping;)
+ (BOOL)UsingMessageGrouping SWIFT_WARN_UNUSED_RESULT;
+ (void)setUsingMessageGrouping:(BOOL)value;
/// If this value is enabled, when you click on a user image, the user profile screen is displayed.
/// since:
/// 1.2.2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL UsingUserProfile;)
+ (BOOL)UsingUserProfile SWIFT_WARN_UNUSED_RESULT;
+ (void)setUsingUserProfile:(BOOL)value;
/// If this value is enabled, when you click on a user image in open channel, the user profile screen is displayed.
/// since:
/// 2.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL UsingUserProfileInOpenChannel;)
+ (BOOL)UsingUserProfileInOpenChannel SWIFT_WARN_UNUSED_RESULT;
+ (void)setUsingUserProfileInOpenChannel:(BOOL)value;
/// if this value is enabled, image compression and resizing will be applied when sending a file message
/// since:
/// 2.0.1
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL UsingImageCompression;)
+ (BOOL)UsingImageCompression SWIFT_WARN_UNUSED_RESULT;
+ (void)setUsingImageCompression:(BOOL)value;
/// Image compression rate value that will be used when sending image. Default value is 0.85.
/// Typically this value will be used in <code>jpegData(compressionQuality:)</code>
/// since:
/// 2.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat imageCompressionRate;)
+ (CGFloat)imageCompressionRate SWIFT_WARN_UNUSED_RESULT;
+ (void)setImageCompressionRate:(CGFloat)value;
/// Image resizing size value that will be used when sending image. Default value is a device screen size.
/// since:
/// 2.0.0
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGSize imageResizingSize;)
+ (CGSize)imageResizingSize SWIFT_WARN_UNUSED_RESULT;
+ (void)setImageResizingSize:(CGSize)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit23SBUHighlightMessageInfo")
@interface SBUHighlightMessageInfo : NSObject
@property (nonatomic, readonly) int64_t messageId;
@property (nonatomic, readonly) int64_t updatedAt;
- (nonnull instancetype)initWithMessageId:(int64_t)messageId updatedAt:(int64_t)updatedAt OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13SendBirdUIKit10SBUIconSet")
@interface SBUIconSet : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconAdd;)
+ (UIImage * _Nonnull)iconAdd SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconAdd:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconBack;)
+ (UIImage * _Nonnull)iconBack SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconBack:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconBan;)
+ (UIImage * _Nonnull)iconBan SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconBan:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconBroadcast;)
+ (UIImage * _Nonnull)iconBroadcast SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconBroadcast:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconCamera;)
+ (UIImage * _Nonnull)iconCamera SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconCamera:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconChat;)
+ (UIImage * _Nonnull)iconChat SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconChat:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconCheckboxChecked;)
+ (UIImage * _Nonnull)iconCheckboxChecked SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconCheckboxChecked:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconCheckboxUnchecked;)
+ (UIImage * _Nonnull)iconCheckboxUnchecked SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconCheckboxUnchecked:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconChevronDown;)
+ (UIImage * _Nonnull)iconChevronDown SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconChevronDown:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconChevronRight;)
+ (UIImage * _Nonnull)iconChevronRight SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconChevronRight:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconClose;)
+ (UIImage * _Nonnull)iconClose SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconClose:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconCopy;)
+ (UIImage * _Nonnull)iconCopy SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconCopy:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconCreate;)
+ (UIImage * _Nonnull)iconCreate SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconCreate:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconDelete;)
+ (UIImage * _Nonnull)iconDelete SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconDelete:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconDocument;)
+ (UIImage * _Nonnull)iconDocument SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconDocument:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconDone;)
+ (UIImage * _Nonnull)iconDone SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconDone:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconDoneAll;)
+ (UIImage * _Nonnull)iconDoneAll SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconDoneAll:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconDownload;)
+ (UIImage * _Nonnull)iconDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconDownload:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconEdit;)
+ (UIImage * _Nonnull)iconEdit SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconEdit:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconEmojiMore;)
+ (UIImage * _Nonnull)iconEmojiMore SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconEmojiMore:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconError;)
+ (UIImage * _Nonnull)iconError SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconError:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconFileAudio;)
+ (UIImage * _Nonnull)iconFileAudio SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconFileAudio:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconFileDocument;)
+ (UIImage * _Nonnull)iconFileDocument SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconFileDocument:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconFreeze;)
+ (UIImage * _Nonnull)iconFreeze SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconFreeze:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconGif;)
+ (UIImage * _Nonnull)iconGif SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconGif:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconInfo;)
+ (UIImage * _Nonnull)iconInfo SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconInfo:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconLeave;)
+ (UIImage * _Nonnull)iconLeave SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconLeave:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconMembers;)
+ (UIImage * _Nonnull)iconMembers SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconMembers:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconMessage;)
+ (UIImage * _Nonnull)iconMessage SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconMessage:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconModerations;)
+ (UIImage * _Nonnull)iconModerations SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconModerations:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconMore;)
+ (UIImage * _Nonnull)iconMore SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconMore:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconMute;)
+ (UIImage * _Nonnull)iconMute SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconMute:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconNotificationFilled;)
+ (UIImage * _Nonnull)iconNotificationFilled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconNotificationFilled:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconNotificationOffFilled;)
+ (UIImage * _Nonnull)iconNotificationOffFilled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconNotificationOffFilled:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconNotifications;)
+ (UIImage * _Nonnull)iconNotifications SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconNotifications:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconOperator;)
+ (UIImage * _Nonnull)iconOperator SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconOperator:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconPhoto;)
+ (UIImage * _Nonnull)iconPhoto SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconPhoto:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconPlay;)
+ (UIImage * _Nonnull)iconPlay SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconPlay:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconPlus;)
+ (UIImage * _Nonnull)iconPlus SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconPlus:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconQuestion;)
+ (UIImage * _Nonnull)iconQuestion SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconQuestion:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconRefresh;)
+ (UIImage * _Nonnull)iconRefresh SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconRefresh:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconRemove;)
+ (UIImage * _Nonnull)iconRemove SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconRemove:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconSearch;)
+ (UIImage * _Nonnull)iconSearch SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconSearch:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconSend;)
+ (UIImage * _Nonnull)iconSend SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconSend:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconSpinner;)
+ (UIImage * _Nonnull)iconSpinner SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconSpinner:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconSupergroup;)
+ (UIImage * _Nonnull)iconSupergroup SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconSupergroup:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconThumbnailNone;)
+ (UIImage * _Nonnull)iconThumbnailNone SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconThumbnailNone:(UIImage * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nonnull iconUser;)
+ (UIImage * _Nonnull)iconUser SWIFT_WARN_UNUSED_RESULT;
+ (void)setIconUser:(UIImage * _Nonnull)value;
/// Restore all customized icons to SDK’s default icons.
/// since:
/// 2.1.0
+ (void)restoreDefaultIcons;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP13SendBirdUIKit27SBUInviteUserListDatasource_")
@protocol SBUInviteUserListDatasource <NSObject>
/// When creating and using a user list directly, overriding this function and return the next user list.
/// Make this function return the next list each time it is called.
/// since:
/// 1.1.1
///
/// returns:
/// next user list
- (NSArray<SBUUser *> * _Nullable)nextUserList SWIFT_WARN_UNUSED_RESULT;
@end

@class SBDGroupChannelMemberListQuery;

SWIFT_CLASS("_TtC13SendBirdUIKit27SBUInviteUserViewController")
@interface SBUInviteUserViewController : SBUBaseViewController
@property (nonatomic, strong) UIView * _Nullable titleView;
@property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButton;
@property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButton;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
@property (nonatomic, readonly, strong) UITableViewCell * _Nullable userCell;
@property (nonatomic, strong) SBUUserListTheme * _Nonnull theme;
@property (nonatomic, readonly) enum ChannelInviteListType inviteListType;
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nullable channel;
@property (nonatomic, readonly, copy) NSString * _Nullable channelUrl;
@property (nonatomic, readonly, copy) NSArray<SBUUser *> * _Nonnull userList;
@property (nonatomic, readonly, copy) NSSet<SBUUser *> * _Nonnull selectedUserList;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull joinedUserIds;
@property (nonatomic, readonly, strong) SBDApplicationUserListQuery * _Nullable userListQuery;
@property (nonatomic, readonly, strong) SBDGroupChannelMemberListQuery * _Nullable memberListQuery;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUInviteUserViewController.init(channelUrl:)'");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUInviteUserViewController.init(channelUrl:)'");
/// If you have channel object, use this initialize function.
/// \param channel Channel object
///
/// \param type Invite list type (default <code>.users</code>)
///
- (nonnull instancetype)initWithChannel:(SBDGroupChannel * _Nonnull)channel type:(enum ChannelInviteListType)type OBJC_DESIGNATED_INITIALIZER;
/// If you don’t have channel object and have channelUrl, use this initialize function.
/// \param channelUrl Channel url string
///
/// \param type Invite list type (default <code>.users</code>)
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl type:(enum ChannelInviteListType)type OBJC_DESIGNATED_INITIALIZER;
/// If you have channel and users objects, use this initialize function.
/// \param channel Channel object
///
/// \param users <code>SBUUser</code> object
///
/// \param type Invite list type (default <code>.users</code>)
///
- (nonnull instancetype)initWithChannel:(SBDGroupChannel * _Nonnull)channel users:(NSArray<SBUUser *> * _Nonnull)users type:(enum ChannelInviteListType)type OBJC_DESIGNATED_INITIALIZER;
/// If you have channelUrl and users objects, use this initialize function.
/// \param channelUrl Channel url string
///
/// \param users <code>SBUUser</code> object
///
/// \param type Invite list type (default <code>.users</code>)
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl users:(NSArray<SBUUser *> * _Nonnull)users type:(enum ChannelInviteListType)type OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// This function handles the initialization of autolayouts.
- (void)setupAutolayout;
/// This function handles the initialization of styles.
- (void)setupStyles;
- (void)updateStyles;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillAppear:(BOOL)animated;
/// This function is used to load channel information.
/// \param channelUrl channel url
///
- (void)loadChannelWithChannelUrl:(NSString * _Nullable)channelUrl;
/// Load user list.
/// If want using your custom user list, filled users with your custom user list.
/// \param reset <code>true</code> is reset user list and load new list
///
/// \param users customized <code>SBUUser</code> array for add to user list
///
- (void)loadNextUserListWithReset:(BOOL)reset users:(NSArray<SBUUser *> * _Nullable)users;
/// Invites users in the channel with selected userIds.
/// since:
/// 1.0.9
- (void)inviteUsers;
/// Invites users in the channel with directly generated userIds.
/// since:
/// 1.0.9
/// \param userIds User IDs to invite
///
- (void)inviteUsersWithUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Promotes members as operator with selected userIds.
/// since:
/// 1.2.0
- (void)promoteToOperators;
/// Promotes members as operator with directly generated memberIds.
/// since:
/// 1.2.0
/// \param userIds member IDs to invite
///
- (void)promoteToOperatorsWithMemberIds:(NSArray<NSString *> * _Nonnull)memberIds;
/// Used to register a custom cell as a base cell based on <code>UITableViewCell</code>.
/// \param userCell Customized channel cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithUserCell:(UITableViewCell * _Nonnull)userCell nib:(UINib * _Nullable)nib;
/// This function resets the user list.
/// If want to use your custom user list, add users object during this class initialization.
/// since:
/// 1.2.5
- (void)resetUserList;
/// This function reloads the list.
/// since:
/// 1.2.5
- (void)reloadData;
/// This function calls <code>inviteUsers</code> or <code>promoteToOperators</code> functions with <code>inviteListType</code>.
/// since:
/// 1.2.5
- (void)onClickInviteOrPromote;
/// This function selects or deselects user.
/// \param user <code>SBUUser</code> object
///
- (void)selectUserWithUser:(SBUUser * _Nonnull)user;
/// This function is used to pop to channelViewController.
- (void)popToChannel;
/// This function is used to pop to previous viewController.
- (void)popToPrevious;
@end


@interface SBUInviteUserViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUInviteUserListDatasource>
/// When creating and using a user list directly, overriding this function and return the next user list.
/// Make this function return the next list each time it is called.
/// important:
/// If you want to use this function, please set the <code>SBUInviteUserListDatasource</code> in your class.
/// since:
/// 1.1.1
///
/// returns:
/// next user list
- (NSArray<SBUUser *> * _Nullable)nextUserList SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBUInviteUserViewController (SWIFT_EXTENSION(SendBirdUIKit))
- (BOOL)shouldShowLoadingIndicator;
- (void)shouldDismissLoadingIndicator;
@end


@interface SBUInviteUserViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit10SBULoading")
@interface SBULoading : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDError;

SWIFT_CLASS("_TtC13SendBirdUIKit7SBUMain")
@interface SBUMain : NSObject
/// This function is used to initializes SDK with applicationId.
/// \param applicationId Application ID
///
+ (void)initializeWithApplicationId:(NSString * _Nonnull)applicationId;
/// This function is used to connect to the SendBird server.
/// Before invoking this function, <code>CurrentUser</code> object of <code>SBUGlobals</code> claas must be set.
/// \param completionHandler The handler block to execute.
///
+ (void)connectWithCompletionHandler:(void (^ _Nonnull)(SBDUser * _Nullable, SBDError * _Nullable))completionHandler;
/// This function is used to check the connection state.
/// if connected, returns the SBDUser object, otherwise, call the connect function from the inside.
/// \param completionHandler The handler block to execute.
///
+ (void)connectionCheckWithCompletionHandler:(void (^ _Nonnull)(SBDUser * _Nullable, SBDError * _Nullable))completionHandler;
/// This function is used to disconnect
/// \param completionHandler The handler block to execute.
///
+ (void)disconnectWithCompletionHandler:(void (^ _Nullable)(void))completionHandler;
/// This function is used to update user information.
/// \param nickname Nickname to use for update. If this value is nil, the nickname is not updated.
///
/// \param profileUrl Profile URL to use for update. If this value is nil, the profile is not updated.
///
/// \param completionHandler The handler block to execute.
///
+ (void)updateUserInfoWithNickname:(NSString * _Nullable)nickname profileUrl:(NSString * _Nullable)profileUrl completionHandler:(void (^ _Nullable)(SBDError * _Nullable))completionHandler;
/// This function is used to update user information.
/// \param nickname Nickname to use for update. If this value is nil, the nickname is not updated.
///
/// \param profileImage Profile image to use for update. If this value is nil, the profile is not updated.
///
/// \param completionHandler The handler block to execute.
///
+ (void)updateUserInfoWithNickname:(NSString * _Nullable)nickname profileImage:(NSData * _Nullable)profileImage completionHandler:(void (^ _Nullable)(SBDError * _Nullable))completionHandler;
+ (NSString * _Nonnull)getUIKitVersion SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "shortVersionString");
/// This function gets UIKit SDK’s version string.
///
/// returns:
/// version string
+ (NSString * _Nullable)versionString SWIFT_WARN_UNUSED_RESULT;
/// This function gets UIKit SDK’s short version string.
///
/// returns:
/// short version string
+ (NSString * _Nullable)shortVersionString SWIFT_WARN_UNUSED_RESULT;
/// This function is used to register push token for using push service on the SendBird server.
/// \param deviceToken Device token
///
/// \param completionHandler The handler block to execute.
///
+ (void)registerPushWithDeviceToken:(NSData * _Nonnull)deviceToken completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// This function is used to unregister push token on the SendBird server.
/// \param completionHandler The handler block to execute.
///
+ (void)unregisterPushTokenWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// This function is used to unregister all push token on the SendBird server.
/// \param completionHandler The handler block to execute.
///
+ (void)unregisterAllPushTokenWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
+ (void)openChannelWithChannelUrl:(NSString * _Nonnull)channelUrl basedOnChannelList:(BOOL)basedOnChannelList messageListParams:(SBDMessageListParams * _Nullable)messageListParams SWIFT_DEPRECATED_MSG("deprecated in 1.2.2", "moveToChannel(channelUrl:basedOnChannelList:messageListParams:)");
/// This is a function that moves the channel that can be called anywhere.
/// If you wish to open an open channel view controller, or any class that subclasses <code>SBUOpenChannelViewController</code>,
/// you must guarentee that a channel list’s view controller, subclass of <code>SBUBaseChannelListViewController</code>,
/// is present within the <code>UINavigationController.viewControllers</code> if you set the <code>basedOnChannelList</code> to <code>true</code>.
/// since:
/// 1.2.2
/// \param channelUrl channel url for use in channel.
///
/// \param basedOnChannelList <code>true</code> for services based on the channel list. Default value is <code>true</code>
///
/// \param messageListParams If there is a messageListParams set directly for use in Channel, set it up here
///
+ (void)moveToChannelWithChannelUrl:(NSString * _Nonnull)channelUrl basedOnChannelList:(BOOL)basedOnChannelList messageListParams:(SBDMessageListParams * _Nullable)messageListParams channelType:(enum ChannelType)channelType;
/// This is a function that creates and moves the channel that can be called anywhere.
/// since:
/// 1.2.2
/// \param userIds List of user ids
///
/// \param messageListParams If there is a messageListParams set directly for use in Channel, set it up here
///
+ (void)createAndMoveToChannelWithUserIds:(NSArray<NSString *> * _Nonnull)userIds messageListParams:(SBDMessageListParams * _Nullable)messageListParams;
/// This is a function that creates and moves the channel that can be called anywhere.
/// since:
/// 1.2.2
/// \param params <code>SBDGroupChannelParams</code> class object
///
/// \param messageListParams If there is a messageListParams set directly for use in Channel, set it up here
///
+ (void)createAndMoveToChannelWithParams:(SBDGroupChannelParams * _Nonnull)params messageListParams:(SBDMessageListParams * _Nullable)messageListParams;
/// You can activate log information for debugging.
/// <ul>
///   <li>
///     <code>Objective-C</code> uses bit masking. (e,g, <code>.error|.info</code>)
///   </li>
///   <li>
///     <code>Swift</code> uses a single type in this function.
///   </li>
///   <li>
///     default type: .none
///   </li>
/// </ul>
/// \param type LogType
///
+ (void)setLogLevel:(enum LogType)type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBDOperatorListQuery;
@class SBDBannedUserListQuery;
@class SBDParticipantListQuery;

SWIFT_CLASS("_TtC13SendBirdUIKit27SBUMemberListViewController")
@interface SBUMemberListViewController : SBUBaseViewController
@property (nonatomic, strong) UIView * _Nullable titleView;
@property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButton;
@property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButton;
@property (nonatomic, strong) UIView * _Nullable emptyView;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
/// To use the custom user profile view, set this to the custom view created using <code>SBUUserProfileViewProtocol</code>. And, if you do not want to use the user profile feature, please set this value to nil.
@property (nonatomic, strong) UIView * _Nullable userProfileView;
@property (nonatomic, readonly, strong) UITableViewCell * _Nullable userCell;
@property (nonatomic, strong) SBUUserListTheme * _Nonnull theme;
@property (nonatomic, strong) SBUComponentTheme * _Nonnull componentTheme;
@property (nonatomic, readonly) enum ChannelMemberListType memberListType;
@property (nonatomic, readonly, strong) SBDBaseChannel * _Nullable channel;
@property (nonatomic, readonly, copy) NSString * _Nullable channelUrl;
@property (nonatomic, readonly, copy) NSArray<SBUUser *> * _Nonnull memberList;
@property (nonatomic, readonly, strong) SBDGroupChannelMemberListQuery * _Nullable memberListQuery;
@property (nonatomic, readonly, strong) SBDOperatorListQuery * _Nullable operatorListQuery;
@property (nonatomic, readonly, strong) SBDGroupChannelMemberListQuery * _Nullable mutedMemberListQuery;
@property (nonatomic, readonly, strong) SBDBannedUserListQuery * _Nullable bannedMemberListQuery;
@property (nonatomic, readonly, strong) SBDParticipantListQuery * _Nullable participantListQuery;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUMemberListViewController(channelUrl:type:)'");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUMemberListViewController.init(channelUrl:)'");
/// If you have channel object, use this initialize function.
/// \param channel Channel object
///
/// \param type Channel member list type (default: <code>.channelMembers</code>)
///
- (nonnull instancetype)initWithChannel:(SBDBaseChannel * _Nonnull)channel type:(enum ChannelMemberListType)type OBJC_DESIGNATED_INITIALIZER;
/// If you don’t have channel object and have channelUrl, use this initialize function.
/// \param channelUrl Channel url string
///
/// \param type Channel member list type (default: <code>.channelMembers</code>)
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl type:(enum ChannelMemberListType)type OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("deprecated in 2.1.0", "initWithChannelUrl:channelType:memberListType:");
/// If you have channel and members objects, use this initialize function.
/// since:
/// 1.2.0
/// \param channel Channel object
///
/// \param members <code>SBUUser</code> array object
///
/// \param type Channel member list type (default: <code>.channelMembers</code>)
///
- (nonnull instancetype)initWithChannel:(SBDBaseChannel * _Nonnull)channel members:(NSArray<SBUUser *> * _Nonnull)members type:(enum ChannelMemberListType)type OBJC_DESIGNATED_INITIALIZER;
/// If you have channelUrl and members objects, use this initialize function.
/// since:
/// 1.2.0
/// \param channelUrl Channel url string
///
/// \param members <code>SBUUser</code> array object
///
/// \param type Channel member list type (default: <code>.channelMembers</code>)
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl members:(NSArray<SBUUser *> * _Nonnull)members type:(enum ChannelMemberListType)type OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("deprecated in 2.1.0", "initWithChannelUrl:channelType:members:memberListType:");
/// If you don’t have channel object and have channelUrl, use this initialize function.
/// \param channelUrl Channel url string
///
/// \param type Channel member list type (default: <code>.channelMembers</code>)
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl channelType:(SBDChannelType)channelType memberListType:(enum ChannelMemberListType)memberListType OBJC_DESIGNATED_INITIALIZER;
/// If you have channelUrl and members objects, use this initialize function.
/// since:
/// 1.2.0
/// \param channelUrl Channel url string
///
/// \param members <code>SBUUser</code> array object
///
/// \param type Channel member list type (default: <code>.channelMembers</code>)
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl channelType:(SBDChannelType)channelType members:(NSArray<SBUUser *> * _Nonnull)members memberListType:(enum ChannelMemberListType)memberListType OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// This function handles the initialization of autolayouts.
- (void)setupAutolayout;
/// This function handles the initialization of styles
- (void)setupStyles;
- (void)updateStyles;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
/// This function is used to load channel information.
/// \param channelUrl channel url
///
- (void)loadChannelWithChannelUrl:(NSString * _Nullable)channelUrl;
/// This function to load the member list.
/// This requests the required list according to <code>memberListType</code>.
/// If you want using your custom member list, filled members with your custom member list.
/// since:
/// 1.2.0
/// \param reset <code>true</code> is reset member list and load new list
///
/// \param members customized <code>SBUUser</code> array for add to member list
///
- (void)loadNextMemberListWithReset:(BOOL)reset members:(NSArray<SBUUser *> * _Nullable)members;
/// When creating and using a member list directly, overriding this function and return the next member list.
/// Make this function return the next list each time it is called.
/// since:
/// 1.2.0
///
/// returns:
/// next member list
- (NSArray<SBUUser *> * _Nullable)nextMemberList SWIFT_WARN_UNUSED_RESULT;
/// This function to get member information directly from the channel in the case of GroupChannel.
/// If you use it in SuperGroup, Broadcast channel, only some member information can be loaded.
/// since:
/// 1.2.0
- (void)loadMembers;
/// This function promotes the member as an operator.
/// since:
/// 1.2.0
/// \param member A member to be promoted
///
- (void)promoteToOperatorWithMember:(SBUUser * _Nonnull)member;
/// This function dismiss the operator as a member.
/// since:
/// 1.2.0
/// \param member A member to be dismissed
///
- (void)dismissOperatorWithMember:(SBUUser * _Nonnull)member;
/// This function mutes the member in the case of Group/SuperGroup/Broadcast channel.
/// since:
/// 1.2.0
/// \param member A member to be muted
///
- (void)muteWithMember:(SBUUser * _Nonnull)member;
/// This function unmutes the member in the case of Group/SuperGroup/Broadcast channel.
/// since:
/// 1.2.0
/// \param member A member to be unmuted
///
- (void)unmuteWithMember:(SBUUser * _Nonnull)member;
/// This function bans the member in the case of Group/SuperGroup/Broadcast channel.
/// since:
/// 1.2.0
/// \param member A member to be banned
///
- (void)banWithMember:(SBUUser * _Nonnull)member;
/// This function unbans the member.
/// since:
/// 1.2.0
/// \param member A member to be unbanned
///
- (void)unbanWithMember:(SBUUser * _Nonnull)member;
/// If you want to use a custom inviteChannelViewController, override it and implement it.
- (void)showInviteUser;
/// Used to register a custom cell as a base cell based on <code>UITableViewCell</code>.
/// \param userCell Customized channel cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithUserCell:(UITableViewCell * _Nonnull)userCell nib:(UINib * _Nullable)nib;
/// This function resets the member list.
/// since:
/// 1.2.0
- (void)reloadMemberList SWIFT_DEPRECATED_MSG("deprecated in 1.2.5", "resetMemberList");
/// This function resets the member list.
/// since:
/// 1.2.5
- (void)resetMemberList;
/// This function reloads the list.
/// since:
/// 1.2.5
- (void)reloadData;
/// This function shows inviteChannelViewController.
- (void)onClickInviteUser;
/// This function sets the cell’s more menu button action handling. (GroupChannel only)
/// since:
/// 1.2.0
/// \param member <code>SBUUser</code> obejct
///
- (void)setMoreMenuActionHandler:(SBUUser * _Nonnull)member;
/// This function sets the user profile tap gesture handling.
/// If you do not want to use the user profile function, override this function and leave it empty.
/// since:
/// 1.2.2
/// \param user <code>SBUUser</code> object used for user profile configuration
///
- (void)setUserProfileTapGestureHandler:(SBUUser * _Nonnull)user;
@end


@interface SBUMemberListViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUEmptyViewDelegate>
- (void)didSelectRetry;
@end


@interface SBUMemberListViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUUserProfileViewDelegate>
- (void)didSelectMessageWithUserId:(NSString * _Nullable)userId;
- (void)didSelectClose;
@end


@interface SBUMemberListViewController (SWIFT_EXTENSION(SendBirdUIKit))
- (BOOL)shouldShowLoadingIndicator;
- (void)shouldDismissLoadingIndicator;
@end


@interface SBUMemberListViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface SBUMemberListViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBDChannelDelegate>
- (void)channelDidUpdateOperators:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidJoin:(SBDUser * _Nonnull)user;
- (void)channel:(SBDGroupChannel * _Nonnull)sender userDidLeave:(SBDUser * _Nonnull)user;
- (void)channel:(SBDOpenChannel * _Nonnull)sender userDidExit:(SBDUser * _Nonnull)user;
- (void)channel:(SBDOpenChannel * _Nonnull)sender userDidEnter:(SBDUser * _Nonnull)user;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit19SBUMessageCellTheme")
@interface SBUMessageCellTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageCellTheme * _Nonnull light;)
+ (SBUMessageCellTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageCellTheme * _Nonnull dark;)
+ (SBUMessageCellTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageCellTheme * _Nonnull overlay;)
+ (SBUMessageCellTheme * _Nonnull)overlay SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor leftBackgroundColor:(UIColor * _Nonnull)leftBackgroundColor leftPressedBackgroundColor:(UIColor * _Nonnull)leftPressedBackgroundColor rightBackgroundColor:(UIColor * _Nonnull)rightBackgroundColor rightPressedBackgroundColor:(UIColor * _Nonnull)rightPressedBackgroundColor openChannelBackgroundColor:(UIColor * _Nonnull)openChannelBackgroundColor openChannelPressedBackgroundColor:(UIColor * _Nonnull)openChannelPressedBackgroundColor dateFont:(UIFont * _Nonnull)dateFont dateTextColor:(UIColor * _Nonnull)dateTextColor dateBackgroundColor:(UIColor * _Nonnull)dateBackgroundColor userPlaceholderBackgroundColor:(UIColor * _Nonnull)userPlaceholderBackgroundColor userPlaceholderTintColor:(UIColor * _Nonnull)userPlaceholderTintColor userNameFont:(UIFont * _Nonnull)userNameFont userNameTextColor:(UIColor * _Nonnull)userNameTextColor currentUserNameTextColor:(UIColor * _Nonnull)currentUserNameTextColor timeFont:(UIFont * _Nonnull)timeFont timeTextColor:(UIColor * _Nonnull)timeTextColor pendingStateColor:(UIColor * _Nonnull)pendingStateColor failedStateColor:(UIColor * _Nonnull)failedStateColor succeededStateColor:(UIColor * _Nonnull)succeededStateColor readReceiptStateColor:(UIColor * _Nonnull)readReceiptStateColor deliveryReceiptStateColor:(UIColor * _Nonnull)deliveryReceiptStateColor userMessageFont:(UIFont * _Nonnull)userMessageFont userMessageLeftTextColor:(UIColor * _Nonnull)userMessageLeftTextColor userMessageLeftEditTextColor:(UIColor * _Nonnull)userMessageLeftEditTextColor userMessageLeftHighlightTextColor:(UIColor * _Nonnull)userMessageLeftHighlightTextColor userMessageRightTextColor:(UIColor * _Nonnull)userMessageRightTextColor userMessageRightEditTextColor:(UIColor * _Nonnull)userMessageRightEditTextColor userMessageRightHighlightTextColor:(UIColor * _Nonnull)userMessageRightHighlightTextColor fileIconBackgroundColor:(UIColor * _Nonnull)fileIconBackgroundColor fileImageBackgroundColor:(UIColor * _Nonnull)fileImageBackgroundColor fileImageIconColor:(UIColor * _Nonnull)fileImageIconColor fileIconColor:(UIColor * _Nonnull)fileIconColor fileMessageNameFont:(UIFont * _Nonnull)fileMessageNameFont fileMessageLeftTextColor:(UIColor * _Nonnull)fileMessageLeftTextColor fileMessageRightTextColor:(UIColor * _Nonnull)fileMessageRightTextColor fileMessagePlaceholderColor:(UIColor * _Nonnull)fileMessagePlaceholderColor adminMessageFont:(UIFont * _Nonnull)adminMessageFont adminMessageTextColor:(UIColor * _Nonnull)adminMessageTextColor unknownMessageDescFont:(UIFont * _Nonnull)unknownMessageDescFont unknownMessageDescTextColor:(UIColor * _Nonnull)unknownMessageDescTextColor ogTitleFont:(UIFont * _Nonnull)ogTitleFont ogTitleColor:(UIColor * _Nonnull)ogTitleColor ogDescriptionFont:(UIFont * _Nonnull)ogDescriptionFont ogDescriptionColor:(UIColor * _Nonnull)ogDescriptionColor ogURLAddressFont:(UIFont * _Nonnull)ogURLAddressFont ogURLAddressColor:(UIColor * _Nonnull)ogURLAddressColor linkColor:(UIColor * _Nonnull)linkColor contentBackgroundColor:(UIColor * _Nonnull)contentBackgroundColor pressedContentBackgroundColor:(UIColor * _Nonnull)pressedContentBackgroundColor OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull leftBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull leftPressedBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull rightBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull rightPressedBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull openChannelBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull openChannelPressedBackgroundColor;
@property (nonatomic, strong) UIFont * _Nonnull dateFont;
@property (nonatomic, strong) UIColor * _Nonnull dateTextColor;
@property (nonatomic, strong) UIColor * _Nonnull dateBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull userPlaceholderBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull userPlaceholderTintColor;
@property (nonatomic, strong) UIFont * _Nonnull userNameFont;
@property (nonatomic, strong) UIColor * _Nonnull userNameTextColor;
@property (nonatomic, strong) UIColor * _Nonnull currentUserNameTextColor;
@property (nonatomic, strong) UIFont * _Nonnull timeFont;
@property (nonatomic, strong) UIColor * _Nonnull timeTextColor;
@property (nonatomic, strong) UIColor * _Nonnull pendingStateColor;
@property (nonatomic, strong) UIColor * _Nonnull failedStateColor;
@property (nonatomic, strong) UIColor * _Nonnull succeededStateColor;
@property (nonatomic, strong) UIColor * _Nonnull readReceiptStateColor;
@property (nonatomic, strong) UIColor * _Nonnull deliveryReceiptStateColor;
@property (nonatomic, strong) UIColor * _Nonnull contentBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull pressedContentBackgroundColor;
@property (nonatomic, strong) UIFont * _Nonnull userMessageFont;
@property (nonatomic, strong) UIColor * _Nonnull userMessageLeftTextColor;
@property (nonatomic, strong) UIColor * _Nonnull userMessageLeftEditTextColor;
@property (nonatomic, strong) UIColor * _Nonnull userMessageRightTextColor;
@property (nonatomic, strong) UIColor * _Nonnull userMessageRightEditTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fileIconBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull fileIconColor;
@property (nonatomic, strong) UIColor * _Nonnull fileImageBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull fileImageIconColor;
@property (nonatomic, strong) UIFont * _Nonnull fileMessageNameFont;
@property (nonatomic, strong) UIColor * _Nonnull fileMessageLeftTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fileMessageRightTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fileMessagePlaceholderColor;
@property (nonatomic, strong) UIFont * _Nonnull adminMessageFont;
@property (nonatomic, strong) UIColor * _Nonnull adminMessageTextColor;
@property (nonatomic, strong) UIFont * _Nonnull unknownMessageDescFont;
@property (nonatomic, strong) UIColor * _Nonnull unknownMessageDescTextColor;
@property (nonatomic, strong) UIColor * _Nonnull messageLeftHighlightTextColor;
@property (nonatomic, strong) UIColor * _Nonnull messageRightHighlightTextColor;
@property (nonatomic, strong) UIFont * _Nonnull ogTitleFont;
@property (nonatomic, strong) UIColor * _Nonnull ogTitleColor;
@property (nonatomic, strong) UIFont * _Nonnull ogDescriptionFont;
@property (nonatomic, strong) UIColor * _Nonnull ogDescriptionColor;
@property (nonatomic, strong) UIFont * _Nonnull ogURLAddressFont;
@property (nonatomic, strong) UIColor * _Nonnull ogURLAddressColor;
@property (nonatomic, strong) UIColor * _Nonnull linkColor;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit20SBUMessageInputTheme")
@interface SBUMessageInputTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageInputTheme * _Nonnull light;)
+ (SBUMessageInputTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageInputTheme * _Nonnull dark;)
+ (SBUMessageInputTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageInputTheme * _Nonnull overlay;)
+ (SBUMessageInputTheme * _Nonnull)overlay SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor textFieldBackgroundColor:(UIColor * _Nonnull)textFieldBackgroundColor textFieldPlaceholderColor:(UIColor * _Nonnull)textFieldPlaceholderColor textFieldPlaceholderFont:(UIFont * _Nonnull)textFieldPlaceholderFont textFieldDisabledColor:(UIColor * _Nonnull)textFieldDisabledColor textFieldTintColor:(UIColor * _Nonnull)textFieldTintColor textFieldTextColor:(UIColor * _Nonnull)textFieldTextColor textFieldBorderColor:(UIColor * _Nonnull)textFieldBorderColor buttonTintColor:(UIColor * _Nonnull)buttonTintColor buttonDisabledTintColor:(UIColor * _Nonnull)buttonDisabledTintColor cancelButtonFont:(UIFont * _Nonnull)cancelButtonFont saveButtonFont:(UIFont * _Nonnull)saveButtonFont saveButtonTextColor:(UIColor * _Nonnull)saveButtonTextColor OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull textFieldBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull textFieldPlaceholderColor;
@property (nonatomic, strong) UIFont * _Nonnull textFieldPlaceholderFont;
@property (nonatomic, strong) UIColor * _Nonnull textFieldDisabledColor;
@property (nonatomic, strong) UIColor * _Nonnull textFieldTintColor;
@property (nonatomic, strong) UIColor * _Nonnull textFieldTextColor;
@property (nonatomic, strong) UIColor * _Nonnull textFieldBorderColor;
@property (nonatomic, strong) UIColor * _Nonnull buttonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull buttonDisabledTintColor;
@property (nonatomic, strong) UIFont * _Nonnull cancelButtonFont;
@property (nonatomic, strong) UIFont * _Nonnull saveButtonFont;
@property (nonatomic, strong) UIColor * _Nonnull saveButtonTextColor;
@end

@class UITextView;

SWIFT_CLASS("_TtC13SendBirdUIKit19SBUMessageInputView")
@interface SBUMessageInputView : UIView <SBUActionSheetDelegate, UITextViewDelegate>
@property (nonatomic, strong) UIButton * _Nullable addButton;
@property (nonatomic, strong) UILabel * _Nonnull placeholderLabel;
@property (nonatomic, strong) UITextView * _Nullable textView;
@property (nonatomic, strong) UIButton * _Nullable sendButton;
@property (nonatomic, strong) UIView * _Nonnull editView;
@property (nonatomic, strong) UIButton * _Nullable cancelButton;
@property (nonatomic, strong) UIButton * _Nullable saveButton;
/// Input area - horizontal stack (add button, text view, send button)
/// since:
/// 2.1.11
@property (nonatomic, strong) UIStackView * _Nonnull inputHStackView;
/// Textview’s minimum height value.
@property (nonatomic) CGFloat textViewMinHeight;
/// Textview’s maximum height value.
@property (nonatomic) CGFloat textViewMaxHeight;
/// Whether to always show the send button. Default is <code>false</code>.
@property (nonatomic) BOOL showsSendButton;
/// Leading spacing value for <code>textView</code>.
/// If <code>addButton</code> is available, this will be spacing between the <code>addButton</code> and the <code>textView</code>.
@property (nonatomic) CGFloat textViewLeadingSpacing;
/// Trailing spacing value for <code>textView</code>.
/// If <code>sendButton</code> is available, this will be spacing between the <code>textView</code> and the <code>sendButton</code>.
@property (nonatomic) CGFloat textViewTrailingSpacing;
/// The padding values for the input view.
/// This value will be relative to the <code>safeAreaLayoutGuide</code> if available.
@property (nonatomic) UIEdgeInsets layoutInsets;
@property (nonatomic, strong) SBUMessageInputTheme * _Nonnull overlayTheme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUMessageInputView()'");
/// This function handles the initialization of views.
- (void)setupViews;
/// This function handles the initialization of autolayouts.
- (void)setupAutolayout;
/// This function handles the initialization of styles.
- (void)setupStyles;
- (void)layoutSubviews;
- (void)startEditModeWithText:(NSString * _Nonnull)text;
- (void)endEditMode;
/// Sets frozen mode state.
/// \param isFrozen <code>true</code> is frozen mode, <code>false</code> is unfrozen mode
///
- (void)setFrozenModeState:(BOOL)isFrozen;
/// Sets frozen mode state.
/// \param isMuted <code>true</code> is muted mode, <code>false</code> is unmuted mode
///
- (void)setMutedModeState:(BOOL)isMuted;
/// Sets error state. Disable all
- (void)setErrorState;
- (void)endTypingMode;
/// Setup textview’s initial height.
/// The initial height will be set to the <code>textViewMinHeight</code> value.
/// since:
/// 2.1.1
/// \param textView Your input text view.
///
- (void)setupTextViewHeightWithTextView:(UIView * _Nonnull)textView;
/// Updates textview’s height depending on the content size..
/// <code>setupTextViewHeight(textView:)</code> must be called prior to this for this to work.
/// The min/max height of the text view can be modified by changing <code>textViewMinHeight</code> and <code>textViewMaxHeight</code> values.
- (void)updateTextViewHeight;
- (void)onClickAddButton:(id _Nonnull)sender;
- (void)onClickSendButton:(id _Nonnull)sender;
- (void)onClickCancelButton:(id _Nonnull)sender;
- (void)onClickSaveButton:(id _Nonnull)sender;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)didSelectActionSheetItemWithIndex:(NSInteger)index identifier:(NSInteger)identifier;
@end



/// This is an enumeration to message receipt state.
typedef SWIFT_ENUM(NSInteger, SBUMessageReceiptState, open) {
  SBUMessageReceiptStateNone = 0,
  SBUMessageReceiptStateReadReceipt = 1,
  SBUMessageReceiptStateDeliveryReceipt = 2,
};

@class SBUMessageSearchResultCellTheme;

SWIFT_CLASS("_TtC13SendBirdUIKit26SBUMessageSearchResultCell")
@interface SBUMessageSearchResultCell : UITableViewCell
@property (nonatomic, readonly, strong) SBUCoverImageView * _Nonnull coverImage;
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull messageLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull fileMessageLabel;
@property (nonatomic, readonly, strong) UIImageView * _Nonnull fileMessageIcon;
@property (nonatomic, readonly, strong) UIStackView * _Nonnull fileStackView;
@property (nonatomic, readonly, strong) UILabel * _Nonnull createdAtLabel;
@property (nonatomic, readonly, strong) UIView * _Nonnull separatorLine;
@property (nonatomic, strong) SBUMessageSearchResultCellTheme * _Nonnull theme;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// This function handles the initialization of views.
- (void)setupViews;
/// This function handles the initialization of actions.
- (void)setupActions;
/// This function handles the initialization of autolayouts.
- (void)setupAutolayout;
/// This function handles the initialization of styles.
- (void)setupStyles;
- (void)layoutSubviews;
/// This function configure a cell using <code>SBDBaseMessage</code> information.
/// \param channel <code>SBDBaseMessage</code> object
///
- (void)configureWithMessage:(SBDBaseMessage * _Nonnull)message;
/// Sets file message icon depending on the message’s file type using <code>SBUUtils.getFileType(by: fileMessage)</code>.
- (void)setupFileIcon;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit31SBUMessageSearchResultCellTheme")
@interface SBUMessageSearchResultCellTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageSearchResultCellTheme * _Nonnull light;)
+ (SBUMessageSearchResultCellTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageSearchResultCellTheme * _Nonnull dark;)
+ (SBUMessageSearchResultCellTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
@property (nonatomic, strong) UIColor * _Nonnull titleTextColor;
@property (nonatomic, strong) UIFont * _Nonnull descriptionFont;
@property (nonatomic, strong) UIColor * _Nonnull descriptionTextColor;
@property (nonatomic, strong) UIFont * _Nonnull updatedAtFont;
@property (nonatomic, strong) UIColor * _Nonnull updatedAtTextColor;
@property (nonatomic, strong) UIFont * _Nonnull fileMessageFont;
@property (nonatomic, strong) UIColor * _Nonnull fileMessageTextColor;
@property (nonatomic, strong) UIColor * _Nonnull fileMessageIconBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull fileMessageIconTintColor;
@property (nonatomic, strong) UIColor * _Nonnull separatorLineColor;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor titleFont:(UIFont * _Nonnull)titleFont titleTextColor:(UIColor * _Nonnull)titleTextColor descriptionFont:(UIFont * _Nonnull)descriptionFont descriptionTextColor:(UIColor * _Nonnull)descriptionTextColor updatedAtFont:(UIFont * _Nonnull)updatedAtFont updatedAtTextColor:(UIColor * _Nonnull)updatedAtTextColor fileMessageFont:(UIFont * _Nonnull)fileMessageFont fileMessageTextColor:(UIColor * _Nonnull)fileMessageTextColor fileMessageIconBackgroundColor:(UIColor * _Nonnull)fileMessageIconBackgroundColor fileMessageIconTinkColor:(UIColor * _Nonnull)fileMessageIconTinkColor separatorLineColor:(UIColor * _Nonnull)separatorLineColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13SendBirdUIKit21SBUMessageSearchTheme")
@interface SBUMessageSearchTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageSearchTheme * _Nonnull light;)
+ (SBUMessageSearchTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUMessageSearchTheme * _Nonnull dark;)
+ (SBUMessageSearchTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@property (nonatomic) UIBarStyle navigationBarStyle;
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
@property (nonatomic, strong) UIColor * _Nonnull navigationBarShadowColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull searchTextColor;
@property (nonatomic, strong) UIFont * _Nonnull searchTextFont;
@property (nonatomic, strong) UIColor * _Nonnull searchTextBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull searchPlaceholderColor;
@property (nonatomic, strong) UIColor * _Nonnull searchIconTintColor;
@property (nonatomic, strong) UIColor * _Nonnull clearIconTintColor;
@property (nonatomic, strong) UIColor * _Nonnull cancelButtonTintColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatusBarStyle:(UIStatusBarStyle)statusBarStyle navigationBarStyle:(UIBarStyle)navigationBarStyle navigationBarTintColor:(UIColor * _Nonnull)navigationBarTintColor navigationBarShadowColor:(UIColor * _Nonnull)navigationBarShadowColor backgroundColor:(UIColor * _Nonnull)backgroundColor searchTextColor:(UIColor * _Nonnull)searchTextColor searchTextFont:(UIFont * _Nonnull)searchTextFont searchTextBackgroundColor:(UIColor * _Nonnull)searchTextBackgroundColor searchPlaceholderColor:(UIColor * _Nonnull)searchPlaceholderColor searchIconTintColor:(UIColor * _Nonnull)searchIconTintColor clearIconTintColor:(UIColor * _Nonnull)clearIconTintColor cancelButtonTintColor:(UIColor * _Nonnull)cancelButtonTintColor OBJC_DESIGNATED_INITIALIZER;
@end

@class SBDMessageSearchQueryBuilder;
@class UISearchBar;

/// ViewController handling a message search.
/// since:
/// 2.1.0
SWIFT_CLASS("_TtC13SendBirdUIKit30SBUMessageSearchViewController")
@interface SBUMessageSearchViewController : SBUBaseViewController
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, strong) SBUMessageSearchTheme * _Nonnull theme;
@property (nonatomic, strong) SBDBaseChannel * _Nullable channel;
/// This param will be used on entering a channel from selecting an item from the search results.
@property (nonatomic, strong) SBDMessageListParams * _Nullable messageListParams;
/// You can set custom query params for message search.
/// <code>keyword</code>, <code>channelUrl</code>, <code>order</code> is reserved in SDK. (The SDK value will override the custom values)
/// <code>messageFromTs</code> is set to user’s channel joined ts as a default. You can set this value to <code>0</code> to search for all previous messages as well.
/// <code>limit</code> will be set to default value of <code>defaultSearchLimit</code> in case if it’s set to 0 or smaller value.
@property (nonatomic, copy) void (^ _Nullable customMessageSearchQueryBuilder)(SBDMessageSearchQueryBuilder * _Nonnull);
/// The search result list. Use this list to locate the <code>SBDBaseMessage</code> object from the <code>tableView</code>.
@property (nonatomic, readonly, copy) NSArray<SBDBaseMessage *> * _Nonnull searchResultList;
/// Message search result’s cell.
@property (nonatomic, strong) SBUMessageSearchResultCell * _Nullable messageSearchResultCell;
@property (nonatomic, readonly, strong) UIView * _Null_unspecified searchBar;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
@property (nonatomic, readonly, strong) UIView * _Nullable emptyView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUMessageSearchViewController(channel:)'");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUMessageSearchViewController(channel:)'");
- (nonnull instancetype)initWithChannel:(SBDBaseChannel * _Nonnull)channel OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)loadView;
- (void)viewDidLayoutSubviews;
/// Used to register a custom cell as a search result cell based on <code>SBUMessageSearchResultCell</code>.
/// \param messageSearchResultCell Customized search result cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithMessageSearchResultCell:(SBUMessageSearchResultCell * _Nonnull)messageSearchResultCell nib:(UINib * _Nullable)nib;
/// Performs keyword search
/// <ul>
///   <li>
///     Parameters: keyword: A keyword to search for.
///   </li>
/// </ul>
///
/// returns:
/// A <code>SBDMessageSearchQuery</code> with the params set.
- (void)searchWithKeyword:(NSString * _Nonnull)keyword;
/// This is to pop or dismiss (depending on current view controller) the search view controller.
- (void)onClickBack;
- (void)setupStyles;
- (void)setupAutolayout;
- (void)setupSearchBarStyleWithSearchBar:(UISearchBar * _Nonnull)searchBar;
/// Retrives the <code>SBDBaseMessage</code> object from the given <code>IndexPath</code> of the tableView.
/// since:
/// 2.1.5
/// \param indexPath <code>IndexPath</code> of which you want to retrieve the <code>SBDMessage</code> object.
///
///
/// returns:
/// <code>SBDBaseMessage</code> object of the corresponding <code>IndexPath</code>, or <code>nil</code> if the message can’t be found.
- (SBDBaseMessage * _Nullable)messageAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Enters a <code>SBUChannelViewController</code> with the selected message.
/// \param message A <code>SBDBaseMessage</code> object to load channel from.
///
/// \param highlightInfo An  optional<code>SBUHighlightInfo</code> class to have message highlighted.
///
/// \param messageListParams An optional <code>SBDMessageListParams</code> params to be used in loading messages.
///
- (void)enterChannelWith:(SBDBaseMessage * _Nonnull)message highlightInfo:(SBUHighlightMessageInfo * _Nullable)highlightInfo messageListParams:(SBDMessageListParams * _Nullable)messageListParams;
@end


@interface SBUMessageSearchViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUEmptyViewDelegate>
- (void)didSelectRetry;
@end


@interface SBUMessageSearchViewController (SWIFT_EXTENSION(SendBirdUIKit))
- (BOOL)shouldShowLoadingIndicator;
- (void)shouldDismissLoadingIndicator;
@end


@interface SBUMessageSearchViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UISearchBarDelegate>
- (void)searchBarTextDidEndEditing:(UISearchBar * _Nonnull)searchBar;
- (void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)searchBar;
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
@end


@interface SBUMessageSearchViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC13SendBirdUIKit28SBUModerationsViewController")
@interface SBUModerationsViewController : SBUBaseViewController
@property (nonatomic, strong) UIView * _Nullable titleView;
@property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButton;
@property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButton;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
@property (nonatomic, strong) SBUChannelSettingsTheme * _Nonnull theme;
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nullable channel;
@property (nonatomic, readonly, copy) NSString * _Nullable channelUrl;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUModerationsViewController(channel:)'");
/// If you have channel object, use this initialize function.
/// \param channel Channel object
///
- (nonnull instancetype)initWithChannel:(SBDGroupChannel * _Nonnull)channel OBJC_DESIGNATED_INITIALIZER;
/// If you don’t have channel object and have channelUrl, use this initialize function.
/// \param channelUrl Channel url string
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// This function handles the initialization of autolayouts.
- (void)setupAutolayout;
/// This function handles the initialization of styles.
- (void)setupStyles;
- (void)updateStyles;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
/// This function is used to load channel information.
/// \param channelUrl channel url
///
- (void)loadChannelWithChannelUrl:(NSString * _Nullable)channelUrl;
/// This function freezes the channel.
/// \param completionHandler completion handler of freeze status change
///
- (void)freezeChannelWithCompletionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// This function unfreezes the channel.
/// \param completionHandler completion handler of freeze status change
///
- (void)unfreezeChannelWithCompletionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// This is a function that shows the operator List.
/// If you want to use a custom MemberListViewController, override it and implement it.
- (void)showOperatorList;
- (void)showMutedMeberList SWIFT_DEPRECATED_MSG("deprecated in 2.1.9", "showMutedMemberList");
/// This is a function that shows the muted member List.
/// If you want to use a custom MemberListViewController, override it and implement it.
- (void)showMutedMemberList;
- (void)showBannedMeberList SWIFT_DEPRECATED_MSG("deprecated in 2.1.9", "showMutedMemberList");
/// This is a function that shows the banned member List.
/// If you want to use a custom MemberListViewController, override it and implement it.
- (void)showBannedMemberList;
/// Changes freeze status on channel.
/// \param freeze freeze status
///
/// \param completionHandler completion handler of freeze status change
///
- (void)changeFreeze:(BOOL)freeze :(void (^ _Nullable)(BOOL))completionHandler;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface SBUModerationsViewController (SWIFT_EXTENSION(SendBirdUIKit))
- (BOOL)shouldShowLoadingIndicator;
- (void)shouldDismissLoadingIndicator;
@end


@interface SBUModerationsViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UITableViewDataSource, UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit22SBUNavigationTitleView")
@interface SBUNavigationTitleView : UIView
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic) NSTextAlignment textAlignment;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'initWithFrame:'");
- (void)setupViews;
- (void)setupAutolayout;
- (void)setupStyles;
- (void)drawRect:(CGRect)rect;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit17SBUNewMessageInfo")
@interface SBUNewMessageInfo : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'initWithFrame:'");
- (void)drawRect:(CGRect)rect;
- (void)layoutSubviews;
- (void)onClickNewMessageInfo;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC13SendBirdUIKit29SBUOpenChannelBaseMessageCell")
@interface SBUOpenChannelBaseMessageCell : UITableViewCell
@property (nonatomic, strong) SBDBaseMessage * _Nonnull message;
@property (nonatomic) enum MessageGroupPosition groupPosition;
@property (nonatomic, strong) UIView * _Nonnull dateView;
@property (nonatomic, strong) UIView * _Nonnull messageContentView;
@property (nonatomic, strong) SBUMessageCellTheme * _Nonnull theme;
@property (nonatomic, strong) SBUMessageCellTheme * _Nonnull overlayTheme;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// This function handles the initialization of views.
- (void)setupViews;
/// This function handles the initialization of actions.
- (void)setupActions;
/// This function handles the initialization of autolayouts.
- (void)setupAutolayout;
/// This function handles the initialization of styles.
- (void)setupStyles;
- (void)layoutSubviews;
/// This function configure a cell using informations.
/// \param message Message object
///
/// \param hideDateView Hide or expose date information
///
/// \param isOverlay Whether to use in overlay
///
- (void)configureWithMessage:(SBDBaseMessage * _Nonnull)message hideDateView:(BOOL)hideDateView groupPosition:(enum MessageGroupPosition)groupPosition isOverlay:(BOOL)isOverlay;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)prepareForReuse;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit30SBUOpenChannelAdminMessageCell")
@interface SBUOpenChannelAdminMessageCell : SBUOpenChannelBaseMessageCell
@property (nonatomic, strong) UIView * _Nonnull baseView;
@property (nonatomic, strong) UILabel * _Nonnull messageLabel;
- (void)setupViews;
- (void)setupAutolayout;
- (void)setupStyles;
- (void)layoutSubviews;
- (void)configure:(SBDAdminMessage * _Nonnull)message hideDateView:(BOOL)hideDateView isOverlay:(BOOL)isOverlay;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// It is a base class used in message cell with contents.
/// since:
/// 2.0.0
SWIFT_CLASS("_TtC13SendBirdUIKit36SBUOpenChannelContentBaseMessageCell")
@interface SBUOpenChannelContentBaseMessageCell : SBUOpenChannelBaseMessageCell
@property (nonatomic, strong) UIStackView * _Nonnull baseStackView;
@property (nonatomic, strong) UIView * _Nonnull profileView;
@property (nonatomic, strong) UIStackView * _Nonnull contentsStackView;
@property (nonatomic, strong) UIStackView * _Nonnull infoStackView;
@property (nonatomic, strong) UIView * _Nonnull userNameView;
@property (nonatomic, strong) UILabel * _Nonnull messageTimeLabel;
@property (nonatomic, strong) UIView * _Nonnull mainContainerView;
@property (nonatomic, strong) UIImageView * _Nonnull stateImageView;
@property (nonatomic) BOOL isFileType;
@property (nonatomic) BOOL isWebType;
- (void)setupViews;
- (void)setupAutolayout;
- (void)setupActions;
- (void)setupStyles;
- (void)configure:(SBDBaseMessage * _Nonnull)message hideDateView:(BOOL)hideDateView groupPosition:(enum MessageGroupPosition)groupPosition isOverlay:(BOOL)isOverlay;
- (void)setMessageGrouping;
- (void)setUsernameColor:(UIColor * _Nonnull)color;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)onLongPressContentViewWithSender:(UILongPressGestureRecognizer * _Nullable)sender;
- (void)onTapContentViewWithSender:(UITapGestureRecognizer * _Nonnull)sender;
- (void)onTapUserProfileViewWithSender:(UITapGestureRecognizer * _Nonnull)sender;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC13SendBirdUIKit29SBUOpenChannelFileMessageCell")
@interface SBUOpenChannelFileMessageCell : SBUOpenChannelContentBaseMessageCell
@property (nonatomic, readonly, strong) SBDFileMessage * _Nullable fileMessage;
- (void)setupViews;
- (void)setupAutolayout;
- (void)setupActions;
- (void)setupStyles;
- (void)configure:(SBDFileMessage * _Nonnull)message hideDateView:(BOOL)hideDateView groupPosition:(enum MessageGroupPosition)groupPosition fileType:(enum MessageFileType)fileType isOverlay:(BOOL)isOverlay;
- (void)prepareForReuse;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit36SBUOpenChannelSettingsViewController")
@interface SBUOpenChannelSettingsViewController : SBUBaseChannelSettingViewController
@property (nonatomic, readonly, strong) SBDOpenChannel * _Nullable channel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUOpenChannelSettingsViewController(channelUrl:)'");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUOpenChannelSettingsViewController(channelUrl:)'");
/// If you have channel object, use this initialize function.
/// \param channel Channel object
///
- (nonnull instancetype)initWithChannel:(SBDOpenChannel * _Nonnull)channel OBJC_DESIGNATED_INITIALIZER;
/// If you don’t have channel object and have channelUrl, use this initialize function.
/// \param channelUrl Channel url string
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// This function is used to load channel information.
/// \param channelUrl channel url
///
- (void)loadChannelWithChannelUrl:(NSString * _Nullable)channelUrl;
/// Used to update the channel name or cover image. <code>channelName</code> and<code> coverImage</code> are used for updating only the set values.
/// \param channelName Channel name to update
///
/// \param coverImage Cover image to update
///
- (void)updateChannelWithChannelName:(NSString * _Nullable)channelName coverImage:(UIImage * _Nullable)coverImage;
/// Updates the channel with channelParams.
/// You can update a channel by setting various properties of ChannelParams.
/// \param params <code>SBDOpenChannelParams</code> class object
///
- (void)updateChannelWithParams:(SBDOpenChannelParams * _Nonnull)params;
/// Deletes the channel.
- (void)deleteChannel;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC13SendBirdUIKit29SBUOpenChannelUserMessageCell")
@interface SBUOpenChannelUserMessageCell : SBUOpenChannelContentBaseMessageCell
@property (nonatomic, strong) UIView * _Nonnull messageTextView;
@property (nonatomic, readonly, strong) SBDUserMessage * _Nullable userMessage;
- (void)setupViews;
- (void)setupAutolayout;
- (void)setupActions;
- (void)setupStyles;
- (void)configure:(SBDBaseMessage * _Nonnull)message hideDateView:(BOOL)hideDateView groupPosition:(enum MessageGroupPosition)groupPosition withTextView:(BOOL)withTextView isOverlay:(BOOL)isOverlay;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit32SBUOpenChannelUnknownMessageCell")
@interface SBUOpenChannelUnknownMessageCell : SBUOpenChannelUserMessageCell
- (void)configure:(SBDBaseMessage * _Nonnull)message hideDateView:(BOOL)hideDateView groupPosition:(enum MessageGroupPosition)groupPosition isOverlay:(BOOL)isOverlay;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC13SendBirdUIKit28SBUOpenChannelViewController")
@interface SBUOpenChannelViewController : SBUBaseChannelViewController
@property (nonatomic, strong) SBUChannelTheme * _Nonnull overlayTheme;
/// You can use the customized view and a view that inherits <code>SBUNewMessageInfo</code>.
/// If you use a view that inherits SBUNewMessageInfo, you can change the button and their action.
@property (nonatomic, strong) UIView * _Nullable newMessageInfoView;
@property (nonatomic, strong) UIView * _Nullable titleView;
@property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButton;
@property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButton;
@property (nonatomic, strong) UIView * _Nullable channelStateBanner;
@property (nonatomic, strong) SBUChannelInfoHeaderView * _Nonnull channelInfoView;
@property (nonatomic, readonly, strong) SBUOpenChannelBaseMessageCell * _Nullable adminMessageCell;
@property (nonatomic, readonly, strong) SBUOpenChannelBaseMessageCell * _Nullable userMessageCell;
@property (nonatomic, readonly, strong) SBUOpenChannelBaseMessageCell * _Nullable fileMessageCell;
@property (nonatomic, readonly, strong) SBUOpenChannelBaseMessageCell * _Nullable customMessageCell;
@property (nonatomic, readonly, strong) SBUOpenChannelBaseMessageCell * _Nullable unknownMessageCell;
/// If it’s <code>true</code>, the navigation bar will be hidden.
@property (nonatomic) BOOL hideNavigationBar;
/// If it’s <code>true</code>, the channel info view will be hidden.
@property (nonatomic) BOOL hideChannelInfoView;
/// Sets text in <code>channelInfoView.descriptionLabel</code>
@property (nonatomic, copy) NSString * _Nullable channelDescription;
/// The internal view provided for media such as photo or video. If you want to use <code>mediaView</code>, please call <code>enableMediaView(_:)</code> to enable and set its ratio through <code>updateMessageListRatio(to ratio:)</code>. If you want to overlay, use <code>overlayMediaView(_:messageListRatio:)</code> method.
@property (nonatomic, strong) UIView * _Nonnull mediaView;
/// A boolean value whether the media view is enabled or not. The default value is <code>false</code>.
/// note:
///
/// Use <code>enableMediaView(_:)</code> to set value.
/// \code
/// self.enableMediaView(true)
/// self.print(isMediaViewEnabled) // true
///
/// \endcode
@property (nonatomic, readonly) BOOL isMediaViewEnabled;
/// A relative ratio value of <code>mediaView</code>to entire screen. The default value is <code>0</code>.
/// note:
///
/// Use <code>updateMessageListRatio(to ratio:)</code> to set value.
@property (nonatomic, readonly) CGFloat mediaViewRatio;
/// A relative ratio value of messaging view to entire screen. The default value is <code>1</code>
/// note:
///
/// Use <code>updateMessageListRatio(to ratio:)</code> to set value.
@property (nonatomic, readonly) CGFloat messageListRatio;
/// A boolean value whether <code>mediaView</code> is overlay or not. The default value is <code>false</code>.
/// note:
///
/// Use <code>overlayMediaView(_:messageListRatio:)</code> to set value.
@property (nonatomic, readonly) BOOL isMediaViewOverlaying;
/// If the media view area extends outside the screen’s safe areas, it’s <code>true</code>. The default value is <code>true</code>.
/// note:
///
/// Use <code>mediaViewIgnoringSafeArea(_:)</code> to set value.
@property (nonatomic, readonly) BOOL isMediaViewIgnoringSafeArea;
/// Enable the internal media view.
/// \code
/// self.enableMediaView(true)
/// self.updateMessageListRatio(to: 0.7)
///
/// \endcode\param enabled If it’s <code>true</code> It uses the media view.
///
- (void)enableMediaView:(BOOL)enabled;
/// Updates a relative ratio value of the message list with  <code>ratio</code> to entire screen.
/// The mediaView will have it’s ratio accordingly, meaning
/// important:
///
/// The ratio must be in range of <code>0...1</code>.
/// <ul>
///   <li>
///     normal mode : mediaView’s ratio = (1 - message list’s ratio). Media view & message list is side by side in landscape mode, top to bottom in portrait mode.
///   </li>
///   <li>
///     overlay mode : mediaView’s ratio = 1 (fills the whole screen). Media view fills the whole screen & message list is above the media view with transparent background.
///     After this method, You might need to call <code>setupStyles</code> or <code>updateComponentStyle</code>.
///   </li>
/// </ul>
/// \code
/// self.updateMessageListRatio(to: 0.7)
///
/// \endcode\param ratio A relative ratio value of message list to entire screen. If it’s <code>nil</code> or it’s not in range from 0 to 1 inclusive, the value won’t be set.
///
- (void)updateMessageListRatioTo:(CGFloat)ratio;
/// Overlays the media view.
/// \code
/// // Enable overlay mode
/// self.overlayMediaView(true, messageListRatio: 0.4)
///
/// // Disable overlay mode
/// self.overlayMediaView(false, messageListRatio: 0.3)    // mediaViewRatio is 0.7
///
/// \endcode\param overlaying If it’s <code>true</code>, <code>mediaViewRatio</code> will be set to <code>1.0</code>. If it’s <code>false</code>, <code>mediaViewRatio</code> will be set to <code>1 - messageListRatio</code>.
///
/// \param messageListRatio A relative ratio value of  message list to entire screen.
///
- (void)overlayMediaView:(BOOL)overlaying messageListRatio:(CGFloat)messageListRatio;
/// Changes the media view area to extend outside the screen’s safe areas.
/// note:
///
/// <ul>
///   <li>
///     Ignores top edge when it’s on portrait mode.
///   </li>
///   <li>
///     Ignores leading edge when it’s on landscape mode.
///   </li>
/// </ul>
/// \code
/// self.mediaViewIgnoringSafeArea(true)
///
/// \endcode\param enabled A boolean value whther the media view ignores safe area or not.
///
- (void)mediaViewIgnoringSafeArea:(BOOL)enabled;
@property (nonatomic) UIDeviceOrientation currentOrientation;
/// This object is used to import a list of messages, send messages, modify messages, and so on, and is created during initialization.
@property (nonatomic, readonly, strong) SBDOpenChannel * _Nullable channel;
@property (nonatomic, copy) NSString * _Nullable channelName;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUOpenChannelViewController(channelUrl:)'");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("'init' has been renamed to 'SBUOpenChannelViewController(channelUrl:)'");
/// If you have channel object, use this initialize function. And, if you have own message list params, please set it. If not set, it is used as the default value.
/// See the example below for params generation.
/// \code
///     let params = SBDMessageListParams()
///     params.includeMetaArray = true
///     params.includeReplies = true
///     ...
///
/// \endcodenote:
/// The <code>reverse</code> and the <code>previousResultSize</code> properties in the <code>SBDMessageListParams</code> are set in the UIKit. Even though you set that property it will be ignored.
/// \param channel Channel object
///
- (nonnull instancetype)initWithChannel:(SBDOpenChannel * _Nonnull)channel messageListParams:(SBDMessageListParams * _Nullable)messageListParams OBJC_DESIGNATED_INITIALIZER;
/// If you don’t have channel object and have channelUrl, use this initialize function. And, if you have own message list params, please set it. If not set, it is used as the default value.
/// See the example below for params generation.
/// \code
///     let params = SBDMessageListParams()
///     params.includeMetaArray = true
///     params.includeReplies = true
///     ...
///
/// \endcodenote:
/// The <code>reverse</code> and the <code>previousResultSize</code> properties in the <code>SBDMessageListParams</code> are set in the UIKit. Even though you set that property it will be ignored.
/// \param channelUrl Channel url string
///
- (nonnull instancetype)initWithChannelUrl:(NSString * _Nonnull)channelUrl messageListParams:(SBDMessageListParams * _Nullable)messageListParams OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)setupAutolayout;
- (void)setupStyles;
- (void)updateStyles;
- (void)updateAutolayout;
- (void)viewDidLayoutSubviews;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillDisappear:(BOOL)animated;
/// Deletes a message with message object.
/// \param message <code>SBDBaseMessage</code> based class object
///
- (void)deleteMessageWithMessage:(SBDBaseMessage * _Nonnull)message;
/// This function is used to load channel information.
/// \param channelUrl channel url
///
/// \param messageListParams (Optional) The parameter to be used when getting channel information.
///
- (void)loadChannelWithChannelUrl:(NSString * _Nullable)channelUrl messageListParams:(SBDMessageListParams * _Nullable)messageListParams;
/// This function updates the messages in the list.
/// It is updated only if the messages already exist in the list, and if not, it is ignored.
/// And, after updating the messages, a function to sort the message list is called.
/// \param messages Message array to update
///
/// \param needReload If set to <code>true</code>, the tableview will be call reloadData.
///
- (void)updateMessagesInListWithMessages:(NSArray<SBDBaseMessage *> * _Nullable)messages needReload:(BOOL)needReload;
/// If you want to use a custom channelSettingsViewController, override it and implement it.
- (void)showChannelSettings;
- (void)showParticipantsList;
/// Used to register a custom cell as a admin message cell based on <code>SBUOpenChannelBaseMessageCell</code>.
/// \param channelCell Customized admin message cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithAdminMessageCell:(SBUOpenChannelBaseMessageCell * _Nonnull)adminMessageCell nib:(UINib * _Nullable)nib;
/// Used to register a custom cell as a user message cell based on <code>SBUOpenChannelBaseMessageCell</code>.
/// \param channelCell Customized user message cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithUserMessageCell:(SBUOpenChannelBaseMessageCell * _Nonnull)userMessageCell nib:(UINib * _Nullable)nib;
/// Used to register a custom cell as a file message cell based on <code>SBUOpenChannelBaseMessageCell</code>.
/// \param channelCell Customized file message cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithFileMessageCell:(SBUOpenChannelBaseMessageCell * _Nonnull)fileMessageCell nib:(UINib * _Nullable)nib;
/// Used to register a custom cell as a additional message cell based on <code>SBUOpenChannelBaseMessageCell</code>.
/// \param channelCell Customized message cell
///
/// \param nib nib information. If the value is nil, the nib file is not used.
///
- (void)registerWithCustomMessageCell:(SBUOpenChannelBaseMessageCell * _Nullable)customMessageCell nib:(UINib * _Nullable)nib;
/// This function sets the cell’s tap gesture handling.
/// \param cell Message cell object
///
/// \param message Message object
///
- (void)setTapGestureHandler:(SBUOpenChannelBaseMessageCell * _Nonnull)cell message:(SBDBaseMessage * _Nonnull)message;
/// This function sets the cell’s long tap gesture handling.
/// \param cell Message cell object
///
/// \param message Message object
///
/// \param indexPath indexpath of cell
///
- (void)setLongTapGestureHandler:(SBUOpenChannelBaseMessageCell * _Nonnull)cell message:(SBDBaseMessage * _Nonnull)message indexPath:(NSIndexPath * _Nonnull)indexPath;
/// This function sets the user profile tap gesture handling.
/// If you do not want to use the user profile function, override this function and leave it empty.
/// \param user <code>SBUUser</code> object used for user profile configuration
///
- (void)setUserProfileTapGestureHandler:(SBUUser * _Nonnull)user;
- (void)updateBarButton;
/// This is used to messageInputView state update.
- (void)updateMessageInputModeState;
/// This function checks if the current message and the next message date have the same day.
/// \param currentIndex Current message index
///
///
/// returns:
/// If <code>true</code>, the messages date is same day.
- (BOOL)checkSameDayAsNextMessageWithCurrentIndex:(NSInteger)currentIndex SWIFT_WARN_UNUSED_RESULT;
- (void)configureOffset;
/// This is used to check the loading status and control loading indicator.
/// \param loadingState Set to true when the list is loading.
///
/// \param showIndicator If true, the loading indicator is started, and if false, the indicator is stopped.
///
- (void)setLoading:(BOOL)loadingState :(BOOL)showIndicator;
/// This is a function that gets the location of the message to be grouped.
/// Only successful messages can be grouped.
/// \param currentIndex Index of current message in the message list
///
///
/// returns:
/// Position of a message when grouped
- (enum MessageGroupPosition)getMessageGroupingPositionWithCurrentIndex:(NSInteger)currentIndex SWIFT_WARN_UNUSED_RESULT;
/// This function actions to pop or dismiss.
- (void)onClickBack;
/// This function shows channel settings.
- (void)onClickSetting;
- (void)onClickParticipantsList;
- (void)onClickScrollBottomWithSender:(UIButton * _Nullable)sender;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// This function sets gestures in user message cell.
/// \param cell User message cell
///
/// \param userMessage User message object
///
/// \param indexPath Cell’s indexPath
///
- (void)setUserMessageCellGestures:(SBUOpenChannelUserMessageCell * _Nonnull)cell userMessage:(SBDUserMessage * _Nonnull)userMessage indexPath:(NSIndexPath * _Nonnull)indexPath;
/// This function sets gestures in file message cell.
/// \param cell File message cell
///
/// \param fileMessage File message object
///
/// \param indexPath Cell’s indexPath
///
- (void)setFileMessageCellGestures:(SBUOpenChannelFileMessageCell * _Nonnull)cell fileMessage:(SBDFileMessage * _Nonnull)fileMessage indexPath:(NSIndexPath * _Nonnull)indexPath;
/// This function sets gestures in unknown message cell.
/// \param cell Unknown message cell
///
/// \param unknownMessage message object
///
/// \param indexPath Cell’s indexPath
///
- (void)setUnkownMessageCellGestures:(SBUOpenChannelUnknownMessageCell * _Nonnull)cell unknownMessage:(SBDBaseMessage * _Nonnull)unknownMessage indexPath:(NSIndexPath * _Nonnull)indexPath;
/// This function calculates the point at which to draw the menu.
/// \param indexPath IndexPath
///
/// \param position Message position
///
///
/// returns:
/// <code>CGPoint</code> value
- (CGPoint)calculatorMenuPointWithIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// This function shows cell’s menu: retry, delete, cancel.
/// This is used when selected failed message.
/// since:
/// 2.1.12
/// \param message message object
///
- (void)showFailedMessageMenuWithMessage:(SBDBaseMessage * _Nonnull)message;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// This function generates cell’s identifier.
/// \param message Message object
///
///
/// returns:
/// Identifier
- (NSString * _Nonnull)generateCellIdentifierBy:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBUOpenChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <UIDocumentInteractionControllerDelegate>
- (UIViewController * _Nonnull)documentInteractionControllerViewControllerForPreview:(UIDocumentInteractionController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBUOpenChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBUChannelInfoHeaderViewDelegate>
- (void)didSelectChannelInfo;
- (void)didSelectChannelParticipants;
@end


@interface SBUOpenChannelViewController (SWIFT_EXTENSION(SendBirdUIKit)) <SBDChannelDelegate, SBDConnectionDelegate>
- (void)channel:(SBDBaseChannel * _Nonnull)sender didReceiveMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender didUpdateMessage:(SBDBaseMessage * _Nonnull)message;
- (void)channel:(SBDBaseChannel * _Nonnull)sender messageWasDeleted:(int64_t)messageId;
- (void)channelWasChanged:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasFrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channelWasUnfrozen:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasMuted:(SBDUser * _Nonnull)user;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasUnmuted:(SBDUser * _Nonnull)user;
- (void)channelDidUpdateOperators:(SBDBaseChannel * _Nonnull)sender;
- (void)channel:(SBDBaseChannel * _Nonnull)sender userWasBanned:(SBDUser * _Nonnull)user;
- (void)channel:(SBDOpenChannel * _Nonnull)sender userDidEnter:(SBDUser * _Nonnull)user;
- (void)channel:(SBDOpenChannel * _Nonnull)sender userDidExit:(SBDUser * _Nonnull)user;
- (void)channelWasDeleted:(NSString * _Nonnull)channelUrl channelType:(SBDChannelType)channelType;
- (void)didSucceedReconnection;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit15SBUOverlayTheme")
@interface SBUOverlayTheme : NSObject
- (nonnull instancetype)initWithChannelTheme:(SBUChannelTheme * _Nonnull)channelTheme messageInputTheme:(SBUMessageInputTheme * _Nonnull)messageInputTheme messageCellTheme:(SBUMessageCellTheme * _Nonnull)messageCellTheme componentTheme:(SBUComponentTheme * _Nonnull)componentTheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, strong) SBUChannelTheme * _Nonnull channelTheme;
@property (nonatomic, strong) SBUMessageInputTheme * _Nonnull messageInputTheme;
@property (nonatomic, strong) SBUMessageCellTheme * _Nonnull messageCellTheme;
@property (nonatomic, strong) SBUComponentTheme * _Nonnull componentTheme;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit24SBUPendingMessageManager")
@interface SBUPendingMessageManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUPendingMessageManager * _Nonnull shared;)
+ (SBUPendingMessageManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)addFileInfoWithRequestId:(NSString * _Nullable)requestId params:(SBDFileMessageParams * _Nullable)params;
- (SBDFileMessageParams * _Nullable)getFileInfoWithRequestId:(NSString * _Nullable)requestId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit12SBUStringSet")
@interface SBUStringSet : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Cancel;)
+ (NSString * _Nonnull)Cancel SWIFT_WARN_UNUSED_RESULT;
+ (void)setCancel:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull OK;)
+ (NSString * _Nonnull)OK SWIFT_WARN_UNUSED_RESULT;
+ (void)setOK:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Retry;)
+ (NSString * _Nonnull)Retry SWIFT_WARN_UNUSED_RESULT;
+ (void)setRetry:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Save;)
+ (NSString * _Nonnull)Save SWIFT_WARN_UNUSED_RESULT;
+ (void)setSave:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Copy;)
+ (NSString * _Nonnull)Copy SWIFT_WARN_UNUSED_RESULT;
+ (void)setCopy:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Delete;)
+ (NSString * _Nonnull)Delete SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelete:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Edit;)
+ (NSString * _Nonnull)Edit SWIFT_WARN_UNUSED_RESULT;
+ (void)setEdit:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Remove;)
+ (NSString * _Nonnull)Remove SWIFT_WARN_UNUSED_RESULT;
+ (void)setRemove:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Camera;)
+ (NSString * _Nonnull)Camera SWIFT_WARN_UNUSED_RESULT;
+ (void)setCamera:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull PhotoVideoLibrary;)
+ (NSString * _Nonnull)PhotoVideoLibrary SWIFT_WARN_UNUSED_RESULT;
+ (void)setPhotoVideoLibrary:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Document;)
+ (NSString * _Nonnull)Document SWIFT_WARN_UNUSED_RESULT;
+ (void)setDocument:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Loading;)
+ (NSString * _Nonnull)Loading SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoading:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Invite;)
+ (NSString * _Nonnull)Invite SWIFT_WARN_UNUSED_RESULT;
+ (void)setInvite:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull TakePhoto;)
+ (NSString * _Nonnull)TakePhoto SWIFT_WARN_UNUSED_RESULT;
+ (void)setTakePhoto:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChoosePhoto;)
+ (NSString * _Nonnull)ChoosePhoto SWIFT_WARN_UNUSED_RESULT;
+ (void)setChoosePhoto:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull RemovePhoto;)
+ (NSString * _Nonnull)RemovePhoto SWIFT_WARN_UNUSED_RESULT;
+ (void)setRemovePhoto:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Search;)
+ (NSString * _Nonnull)Search SWIFT_WARN_UNUSED_RESULT;
+ (void)setSearch:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Alert_Delete;)
+ (NSString * _Nonnull)Alert_Delete SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlert_Delete:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Date_Yesterday;)
+ (NSString * _Nonnull)Date_Yesterday SWIFT_WARN_UNUSED_RESULT;
+ (void)setDate_Yesterday:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull Date_Year)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))Date_Year SWIFT_WARN_UNUSED_RESULT;
+ (void)setDate_Year:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull Date_Day)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))Date_Day SWIFT_WARN_UNUSED_RESULT;
+ (void)setDate_Day:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull Date_Month)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))Date_Month SWIFT_WARN_UNUSED_RESULT;
+ (void)setDate_Month:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull Date_Hour)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))Date_Hour SWIFT_WARN_UNUSED_RESULT;
+ (void)setDate_Hour:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull Date_Min)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))Date_Min SWIFT_WARN_UNUSED_RESULT;
+ (void)setDate_Min:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Date_Ago;)
+ (NSString * _Nonnull)Date_Ago SWIFT_WARN_UNUSED_RESULT;
+ (void)setDate_Ago:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Date_On;)
+ (NSString * _Nonnull)Date_On SWIFT_WARN_UNUSED_RESULT;
+ (void)setDate_On:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelList_Header_Title;)
+ (NSString * _Nonnull)ChannelList_Header_Title SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelList_Header_Title:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelList_Last_File_Message;)
+ (NSString * _Nonnull)ChannelList_Last_File_Message SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelList_Last_File_Message:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Channel_Name_Default;)
+ (NSString * _Nonnull)Channel_Name_Default SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_Name_Default:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Channel_Name_No_Members;)
+ (NSString * _Nonnull)Channel_Name_No_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_Name_No_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Channel_Header_LastSeen;)
+ (NSString * _Nonnull)Channel_Header_LastSeen SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_Header_LastSeen:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull Channel_Header_Typing)(NSArray<SBDUser *> * _Nonnull);)
+ (NSString * _Nonnull (^ _Nonnull)(NSArray<SBDUser *> * _Nonnull))Channel_Header_Typing SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_Header_Typing:(NSString * _Nonnull (^ _Nonnull)(NSArray<SBDUser *> * _Nonnull))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Channel_Success_Download_file;)
+ (NSString * _Nonnull)Channel_Success_Download_file SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_Success_Download_file:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Channel_Failure_Download_file;)
+ (NSString * _Nonnull)Channel_Failure_Download_file SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_Failure_Download_file:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Channel_Failure_Open_file;)
+ (NSString * _Nonnull)Channel_Failure_Open_file SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_Failure_Open_file:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Channel_New_Message_File;)
+ (NSString * _Nonnull)Channel_New_Message_File SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_New_Message_File:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull Channel_New_Message)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))Channel_New_Message SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_New_Message:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Channel_State_Banner_Frozen;)
+ (NSString * _Nonnull)Channel_State_Banner_Frozen SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannel_State_Banner_Frozen:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Open_Channel_Name_Default;)
+ (NSString * _Nonnull)Open_Channel_Name_Default SWIFT_WARN_UNUSED_RESULT;
+ (void)setOpen_Channel_Name_Default:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Open_Channel_Participants;)
+ (NSString * _Nonnull)Open_Channel_Participants SWIFT_WARN_UNUSED_RESULT;
+ (void)setOpen_Channel_Participants:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull Open_Channel_Participants_Count)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))Open_Channel_Participants_Count SWIFT_WARN_UNUSED_RESULT;
+ (void)setOpen_Channel_Participants_Count:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Header_Title;)
+ (NSString * _Nonnull)ChannelSettings_Header_Title SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Header_Title:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Change_Name;)
+ (NSString * _Nonnull)ChannelSettings_Change_Name SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Change_Name:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Change_Image;)
+ (NSString * _Nonnull)ChannelSettings_Change_Image SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Change_Image:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Enter_New_Name;)
+ (NSString * _Nonnull)ChannelSettings_Enter_New_Name SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Enter_New_Name:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Enter_New_Channel_Name;)
+ (NSString * _Nonnull)ChannelSettings_Enter_New_Channel_Name SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Enter_New_Channel_Name:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Notifications;)
+ (NSString * _Nonnull)ChannelSettings_Notifications SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Notifications:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Members_Title;)
+ (NSString * _Nonnull)ChannelSettings_Members_Title SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Members_Title:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Participants_Title;)
+ (NSString * _Nonnull)ChannelSettings_Participants_Title SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Participants_Title:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull ChannelSettings_Members)(NSUInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSUInteger))ChannelSettings_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Members:(NSString * _Nonnull (^ _Nonnull)(NSUInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Leave;)
+ (NSString * _Nonnull)ChannelSettings_Leave SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Leave:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Delete;)
+ (NSString * _Nonnull)ChannelSettings_Delete SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Delete:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Search;)
+ (NSString * _Nonnull)ChannelSettings_Search SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Search:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Moderations;)
+ (NSString * _Nonnull)ChannelSettings_Moderations SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Moderations:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Operators;)
+ (NSString * _Nonnull)ChannelSettings_Operators SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Operators:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Muted_Members;)
+ (NSString * _Nonnull)ChannelSettings_Muted_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Muted_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Banned_Members;)
+ (NSString * _Nonnull)ChannelSettings_Banned_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Banned_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_Freeze_Channel;)
+ (NSString * _Nonnull)ChannelSettings_Freeze_Channel SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_Freeze_Channel:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelSettings_URL;)
+ (NSString * _Nonnull)ChannelSettings_URL SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettings_URL:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MessageInput_Text_Placeholder;)
+ (NSString * _Nonnull)MessageInput_Text_Placeholder SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessageInput_Text_Placeholder:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MessageInput_Text_Unavailable;)
+ (NSString * _Nonnull)MessageInput_Text_Unavailable SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessageInput_Text_Unavailable:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MessageInput_Text_Muted;)
+ (NSString * _Nonnull)MessageInput_Text_Muted SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessageInput_Text_Muted:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Message_Edited;)
+ (NSString * _Nonnull)Message_Edited SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessage_Edited:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Message_System;)
+ (NSString * _Nonnull)Message_System SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessage_System:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Message_Unknown_Title;)
+ (NSString * _Nonnull)Message_Unknown_Title SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessage_Unknown_Title:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Message_Unknown_Desctiption;)
+ (NSString * _Nonnull)Message_Unknown_Desctiption SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessage_Unknown_Desctiption:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Empty_No_Channels;)
+ (NSString * _Nonnull)Empty_No_Channels SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmpty_No_Channels:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Empty_No_Messages;)
+ (NSString * _Nonnull)Empty_No_Messages SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmpty_No_Messages:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Empty_No_Users;)
+ (NSString * _Nonnull)Empty_No_Users SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmpty_No_Users:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Empty_No_Muted_Members;)
+ (NSString * _Nonnull)Empty_No_Muted_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmpty_No_Muted_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Empty_No_Banned_Members;)
+ (NSString * _Nonnull)Empty_No_Banned_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmpty_No_Banned_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Empty_Search_Result;)
+ (NSString * _Nonnull)Empty_Search_Result SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmpty_Search_Result:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull Empty_Wrong;)
+ (NSString * _Nonnull)Empty_Wrong SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmpty_Wrong:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull CreateChannel_Create)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))CreateChannel_Create SWIFT_WARN_UNUSED_RESULT;
+ (void)setCreateChannel_Create:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull CreateChannel_Header_Title;)
+ (NSString * _Nonnull)CreateChannel_Header_Title SWIFT_WARN_UNUSED_RESULT;
+ (void)setCreateChannel_Header_Title:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull CreateChannel_Header_Select_Members;)
+ (NSString * _Nonnull)CreateChannel_Header_Select_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setCreateChannel_Header_Select_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull CreateChannel_Header_Title_Profile;)
+ (NSString * _Nonnull)CreateChannel_Header_Title_Profile SWIFT_WARN_UNUSED_RESULT;
+ (void)setCreateChannel_Header_Title_Profile:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull InviteChannel_Header_Title;)
+ (NSString * _Nonnull)InviteChannel_Header_Title SWIFT_WARN_UNUSED_RESULT;
+ (void)setInviteChannel_Header_Title:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull InviteChannel_Header_Select_Members;)
+ (NSString * _Nonnull)InviteChannel_Header_Select_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setInviteChannel_Header_Select_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull InviteChannel_Invite)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))InviteChannel_Invite SWIFT_WARN_UNUSED_RESULT;
+ (void)setInviteChannel_Invite:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull (^ _Nonnull InviteChannel_Add)(NSInteger);)
+ (NSString * _Nonnull (^ _Nonnull)(NSInteger))InviteChannel_Add SWIFT_WARN_UNUSED_RESULT;
+ (void)setInviteChannel_Add:(NSString * _Nonnull (^ _Nonnull)(NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Header_Title;)
+ (NSString * _Nonnull)MemberList_Header_Title SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Header_Title:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Me;)
+ (NSString * _Nonnull)MemberList_Me SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Me:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Ban;)
+ (NSString * _Nonnull)MemberList_Ban SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Ban:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Unban;)
+ (NSString * _Nonnull)MemberList_Unban SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Unban:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Mute;)
+ (NSString * _Nonnull)MemberList_Mute SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Mute:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Unmute;)
+ (NSString * _Nonnull)MemberList_Unmute SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Unmute:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Dismiss_Operator;)
+ (NSString * _Nonnull)MemberList_Dismiss_Operator SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Dismiss_Operator:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Promote_Operator;)
+ (NSString * _Nonnull)MemberList_Promote_Operator SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Promote_Operator:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Title_Members;)
+ (NSString * _Nonnull)MemberList_Title_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Title_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Title_Operators;)
+ (NSString * _Nonnull)MemberList_Title_Operators SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Title_Operators:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Title_Muted_Members;)
+ (NSString * _Nonnull)MemberList_Title_Muted_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Title_Muted_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Title_Banned_Members;)
+ (NSString * _Nonnull)MemberList_Title_Banned_Members SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Title_Banned_Members:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull MemberList_Title_Participants;)
+ (NSString * _Nonnull)MemberList_Title_Participants SWIFT_WARN_UNUSED_RESULT;
+ (void)setMemberList_Title_Participants:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull User_No_Name;)
+ (NSString * _Nonnull)User_No_Name SWIFT_WARN_UNUSED_RESULT;
+ (void)setUser_No_Name:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull User_Operator;)
+ (NSString * _Nonnull)User_Operator SWIFT_WARN_UNUSED_RESULT;
+ (void)setUser_Operator:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull UserProfile_Role_Operator;)
+ (NSString * _Nonnull)UserProfile_Role_Operator SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfile_Role_Operator:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull UserProfile_Role_Member;)
+ (NSString * _Nonnull)UserProfile_Role_Member SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfile_Role_Member:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull UserProfile_UserID;)
+ (NSString * _Nonnull)UserProfile_UserID SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfile_UserID:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull UserProfile_Message;)
+ (NSString * _Nonnull)UserProfile_Message SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfile_Message:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull UserProfile_Promote;)
+ (NSString * _Nonnull)UserProfile_Promote SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfile_Promote:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull UserProfile_Dismiss;)
+ (NSString * _Nonnull)UserProfile_Dismiss SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfile_Dismiss:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull UserProfile_Mute;)
+ (NSString * _Nonnull)UserProfile_Mute SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfile_Mute:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull UserProfile_Unmute;)
+ (NSString * _Nonnull)UserProfile_Unmute SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfile_Unmute:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull UserProfile_Ban;)
+ (NSString * _Nonnull)UserProfile_Ban SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfile_Ban:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelType_Group;)
+ (NSString * _Nonnull)ChannelType_Group SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelType_Group:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelType_SuperGroup;)
+ (NSString * _Nonnull)ChannelType_SuperGroup SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelType_SuperGroup:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull ChannelType_Broadcast;)
+ (NSString * _Nonnull)ChannelType_Broadcast SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelType_Broadcast:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBUUserCellTheme;
@class SBUUserProfileTheme;

SWIFT_CLASS("_TtC13SendBirdUIKit8SBUTheme")
@interface SBUTheme : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithChannelListTheme:(SBUChannelListTheme * _Nonnull)channelListTheme channelCellTheme:(SBUChannelCellTheme * _Nonnull)channelCellTheme channelTheme:(SBUChannelTheme * _Nonnull)channelTheme messageInputTheme:(SBUMessageInputTheme * _Nonnull)messageInputTheme messageCellTheme:(SBUMessageCellTheme * _Nonnull)messageCellTheme userListTheme:(SBUUserListTheme * _Nonnull)userListTheme userCellTheme:(SBUUserCellTheme * _Nonnull)userCellTheme channelSettingsTheme:(SBUChannelSettingsTheme * _Nonnull)channelSettingsTheme userProfileTheme:(SBUUserProfileTheme * _Nonnull)userProfileTheme componentTheme:(SBUComponentTheme * _Nonnull)componentTheme overlayTheme:(SBUOverlayTheme * _Nonnull)overlayTheme messageSearchTheme:(SBUMessageSearchTheme * _Nonnull)messageSearchTheme messageSearchResultCellTheme:(SBUMessageSearchResultCellTheme * _Nonnull)messageSearchResultCellTheme OBJC_DESIGNATED_INITIALIZER;
+ (void)setWithTheme:(SBUTheme * _Nonnull)theme;
+ (void)setChannelListWithChannelListTheme:(SBUChannelListTheme * _Nonnull)channelListTheme channelCellTheme:(SBUChannelCellTheme * _Nonnull)channelCellTheme;
+ (void)setChannelWithChannelTheme:(SBUChannelTheme * _Nonnull)channelTheme messageCellTheme:(SBUMessageCellTheme * _Nonnull)messageCellTheme messageInputTheme:(SBUMessageInputTheme * _Nonnull)messageInputTheme componentTheme:(SBUComponentTheme * _Nonnull)componentTheme;
+ (void)setUserListWithUserListTheme:(SBUUserListTheme * _Nonnull)userListTheme userCellTheme:(SBUUserCellTheme * _Nonnull)userCellTheme;
+ (void)setChannelSettingsWithChannelSettingsTheme:(SBUChannelSettingsTheme * _Nonnull)channelSettingsTheme;
+ (void)setUserProfileWithUserProfileTheme:(SBUUserProfileTheme * _Nonnull)userProfileTheme;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUTheme * _Nonnull dark;)
+ (SBUTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUTheme * _Nonnull light;)
+ (SBUTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUChannelListTheme * _Nonnull channelListTheme;)
+ (SBUChannelListTheme * _Nonnull)channelListTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelListTheme:(SBUChannelListTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUChannelCellTheme * _Nonnull channelCellTheme;)
+ (SBUChannelCellTheme * _Nonnull)channelCellTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelCellTheme:(SBUChannelCellTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUChannelTheme * _Nonnull channelTheme;)
+ (SBUChannelTheme * _Nonnull)channelTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelTheme:(SBUChannelTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUMessageInputTheme * _Nonnull messageInputTheme;)
+ (SBUMessageInputTheme * _Nonnull)messageInputTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessageInputTheme:(SBUMessageInputTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUMessageCellTheme * _Nonnull messageCellTheme;)
+ (SBUMessageCellTheme * _Nonnull)messageCellTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessageCellTheme:(SBUMessageCellTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUUserListTheme * _Nonnull userListTheme;)
+ (SBUUserListTheme * _Nonnull)userListTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserListTheme:(SBUUserListTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUUserCellTheme * _Nonnull userCellTheme;)
+ (SBUUserCellTheme * _Nonnull)userCellTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserCellTheme:(SBUUserCellTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUChannelSettingsTheme * _Nonnull channelSettingsTheme;)
+ (SBUChannelSettingsTheme * _Nonnull)channelSettingsTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelSettingsTheme:(SBUChannelSettingsTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUUserProfileTheme * _Nonnull userProfileTheme;)
+ (SBUUserProfileTheme * _Nonnull)userProfileTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserProfileTheme:(SBUUserProfileTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUComponentTheme * _Nonnull componentTheme;)
+ (SBUComponentTheme * _Nonnull)componentTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setComponentTheme:(SBUComponentTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUOverlayTheme * _Nonnull overlayTheme;)
+ (SBUOverlayTheme * _Nonnull)overlayTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setOverlayTheme:(SBUOverlayTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUMessageSearchTheme * _Nonnull messageSearchTheme;)
+ (SBUMessageSearchTheme * _Nonnull)messageSearchTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessageSearchTheme:(SBUMessageSearchTheme * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SBUMessageSearchResultCellTheme * _Nonnull messageSearchResultCellTheme;)
+ (SBUMessageSearchResultCellTheme * _Nonnull)messageSearchResultCellTheme SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessageSearchResultCellTheme:(SBUMessageSearchResultCellTheme * _Nonnull)newValue;
@end



IB_DESIGNABLE
SWIFT_CLASS("_TtC13SendBirdUIKit18SBUUserMessageCell")
@interface SBUUserMessageCell : SBUContentBaseMessageCell
@property (nonatomic, strong) UIView * _Nonnull messageTextView;
@property (nonatomic, readonly, strong) SBDUserMessage * _Nullable userMessage;
- (void)setupViews;
- (void)setupActions;
- (void)setupStyles;
/// Adds highlight attribute to the message
- (void)configureWithHighlightInfo:(SBUHighlightMessageInfo * _Nullable)highlightInfo;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit21SBUUnknownMessageCell")
@interface SBUUnknownMessageCell : SBUUserMessageCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class SBDMember;
@class SBDSender;

SWIFT_CLASS("_TtC13SendBirdUIKit7SBUUser")
@interface SBUUser : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nullable nickname;
@property (nonatomic, readonly, copy) NSString * _Nullable profileUrl;
/// This is an operator state property.
/// since:
/// 1.2.0
@property (nonatomic, readonly) BOOL isOperator;
/// This is a muted state property.
/// since:
/// 1.2.0
@property (nonatomic, readonly) BOOL isMuted;
/// This function initializes using the userId, nickname, and profileUrl.
/// \param userId userId
///
/// \param nickname nickname (default: nil), If not set this value, sets with userId.
///
/// \param profileUrl profileUrl (default: nil)
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId nickname:(NSString * _Nullable)nickname profileUrl:(NSString * _Nullable)profileUrl OBJC_DESIGNATED_INITIALIZER;
/// This function initializes using the user object.
/// \param user User obejct
///
- (nonnull instancetype)initWithUser:(SBDUser * _Nonnull)user OBJC_DESIGNATED_INITIALIZER;
/// This function initializes using the user object, operator state, and muted state.
/// \param user <code>SBUUser</code> object
///
/// \param isOperator If the user is the operator, sets the value to <code>true</code>.
///
/// \param isMuted If the user is the muted, sets the value to <code>true</code>.
///
- (nonnull instancetype)initWithUser:(SBUUser * _Nonnull)user isOperator:(BOOL)isOperator isMuted:(BOOL)isMuted OBJC_DESIGNATED_INITIALIZER;
/// This function initializes using the member object.
/// \param member <code>SBDMember</code> obejct
///
- (nonnull instancetype)initWithMember:(SBDMember * _Nonnull)member OBJC_DESIGNATED_INITIALIZER;
/// This function initializes using the sender object.
/// \param sender <code>SBDSender</code> obejct
///
- (nonnull instancetype)initWithSender:(SBDSender * _Nonnull)sender OBJC_DESIGNATED_INITIALIZER;
/// This method returns the default value if there is no alias value.
/// since:
/// 1.0.1
- (NSString * _Nonnull)refinedNickname SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13SendBirdUIKit11SBUUserCell")
@interface SBUUserCell : UITableViewCell
- (void)awakeFromNib;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// This function is used when more menu tap
- (void)onClickMoreMenu;
/// This function is used when a user profile tap.
/// \param sender sender
///
- (void)onTapUserProfileViewWithSender:(UITapGestureRecognizer * _Nonnull)sender;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)prepareForReuse;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit16SBUUserCellTheme")
@interface SBUUserCellTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUUserCellTheme * _Nonnull light;)
+ (SBUUserCellTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUUserCellTheme * _Nonnull dark;)
+ (SBUUserCellTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor checkboxOnColor:(UIColor * _Nonnull)checkboxOnColor checkboxOffColor:(UIColor * _Nonnull)checkboxOffColor userNameTextColor:(UIColor * _Nonnull)userNameTextColor userNameFont:(UIFont * _Nonnull)userNameFont userPlaceholderBackgroundColor:(UIColor * _Nonnull)userPlaceholderBackgroundColor userPlaceholderTintColor:(UIColor * _Nonnull)userPlaceholderTintColor mutedStateBackgroundColor:(UIColor * _Nonnull)mutedStateBackgroundColor mutedStateIconColor:(UIColor * _Nonnull)mutedStateIconColor subInfoTextColor:(UIColor * _Nonnull)subInfoTextColor subInfoFont:(UIFont * _Nonnull)subInfoFont moreButtonColor:(UIColor * _Nonnull)moreButtonColor moreButtonDisabledColor:(UIColor * _Nonnull)moreButtonDisabledColor separateColor:(UIColor * _Nonnull)separateColor OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull checkboxOnColor;
@property (nonatomic, strong) UIColor * _Nonnull checkboxOffColor;
@property (nonatomic, strong) UIColor * _Nonnull userNameTextColor;
@property (nonatomic, strong) UIFont * _Nonnull userNameFont;
@property (nonatomic, strong) UIColor * _Nonnull userPlaceholderBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull userPlaceholderTintColor;
@property (nonatomic, strong) UIColor * _Nonnull mutedStateBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull mutedStateIconColor;
@property (nonatomic, strong) UIColor * _Nonnull subInfoTextColor;
@property (nonatomic, strong) UIFont * _Nonnull subInfoFont;
@property (nonatomic, strong) UIColor * _Nonnull moreButtonColor;
@property (nonatomic, strong) UIColor * _Nonnull moreButtonDisabledColor;
@property (nonatomic, strong) UIColor * _Nonnull separateColor;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit16SBUUserListTheme")
@interface SBUUserListTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUUserListTheme * _Nonnull light;)
+ (SBUUserListTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUUserListTheme * _Nonnull dark;)
+ (SBUUserListTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatusBarStyle:(UIStatusBarStyle)statusBarStyle navigationBarTintColor:(UIColor * _Nonnull)navigationBarTintColor navigationShadowColor:(UIColor * _Nonnull)navigationShadowColor leftBarButtonTintColor:(UIColor * _Nonnull)leftBarButtonTintColor rightBarButtonTintColor:(UIColor * _Nonnull)rightBarButtonTintColor rightBarButtonSelectedTintColor:(UIColor * _Nonnull)rightBarButtonSelectedTintColor barButtonTintColor:(UIColor * _Nonnull)barButtonTintColor barButtonDisabledTintColor:(UIColor * _Nonnull)barButtonDisabledTintColor backgroundColor:(UIColor * _Nonnull)backgroundColor coverImageTintColor:(UIColor * _Nonnull)coverImageTintColor coverImageBackgroundColor:(UIColor * _Nonnull)coverImageBackgroundColor itemTextColor:(UIColor * _Nonnull)itemTextColor itemColor:(UIColor * _Nonnull)itemColor removeColor:(UIColor * _Nonnull)removeColor placeholderTintColor:(UIColor * _Nonnull)placeholderTintColor textfieldTextColor:(UIColor * _Nonnull)textfieldTextColor OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
@property (nonatomic, strong) UIColor * _Nonnull navigationShadowColor;
@property (nonatomic, strong) UIColor * _Nonnull leftBarButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull rightBarButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull rightBarButtonSelectedTintColor;
@property (nonatomic, strong) UIColor * _Nonnull barButtonTintColor;
@property (nonatomic, strong) UIColor * _Nonnull barButtonDisabledTintColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull coverImageTintColor;
@property (nonatomic, strong) UIColor * _Nonnull coverImageBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull itemTextColor;
@property (nonatomic, strong) UIColor * _Nonnull itemColor;
@property (nonatomic, strong) UIColor * _Nonnull removeColor;
@property (nonatomic, strong) UIColor * _Nonnull placeholderTintColor;
@property (nonatomic, strong) UIColor * _Nonnull textfieldTextColor;
@end



SWIFT_CLASS("_TtC13SendBirdUIKit15SBUUserNameView")
@interface SBUUserNameView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit19SBUUserProfileTheme")
@interface SBUUserProfileTheme : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUUserProfileTheme * _Nonnull light;)
+ (SBUUserProfileTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBUUserProfileTheme * _Nonnull dark;)
+ (SBUUserProfileTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatusBarStyle:(UIStatusBarStyle)statusBarStyle overlayColor:(UIColor * _Nonnull)overlayColor backgroundColor:(UIColor * _Nonnull)backgroundColor userPlaceholderBackgroundColor:(UIColor * _Nonnull)userPlaceholderBackgroundColor userPlaceholderTintColor:(UIColor * _Nonnull)userPlaceholderTintColor usernameTextColor:(UIColor * _Nonnull)usernameTextColor usernameFont:(UIFont * _Nonnull)usernameFont userRoleTextColor:(UIColor * _Nonnull)userRoleTextColor userRoleFont:(UIFont * _Nonnull)userRoleFont largeItemTintColor:(UIColor * _Nonnull)largeItemTintColor largeItemFont:(UIFont * _Nonnull)largeItemFont largeItemBackgroundColor:(UIColor * _Nonnull)largeItemBackgroundColor largeItemHighlightedColor:(UIColor * _Nonnull)largeItemHighlightedColor itemFont:(UIFont * _Nonnull)itemFont itemBackgroundColor:(UIColor * _Nonnull)itemBackgroundColor itemSelectedBackgroundColor:(UIColor * _Nonnull)itemSelectedBackgroundColor itemTintColor:(UIColor * _Nonnull)itemTintColor itemSelectedTintColor:(UIColor * _Nonnull)itemSelectedTintColor itemHighlightedTintColor:(UIColor * _Nonnull)itemHighlightedTintColor separatorColor:(UIColor * _Nonnull)separatorColor informationTitleColor:(UIColor * _Nonnull)informationTitleColor informationTitleFont:(UIFont * _Nonnull)informationTitleFont informationDesctiptionColor:(UIColor * _Nonnull)informationDesctiptionColor informationDesctiptionFont:(UIFont * _Nonnull)informationDesctiptionFont OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@property (nonatomic, strong) UIColor * _Nonnull overlayColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull userPlaceholderBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull userPlaceholderTintColor;
@property (nonatomic, strong) UIColor * _Nonnull usernameTextColor;
@property (nonatomic, strong) UIFont * _Nonnull usernameFont;
@property (nonatomic, strong) UIColor * _Nonnull userRoleTextColor;
@property (nonatomic, strong) UIFont * _Nonnull userRoleFont;
@property (nonatomic, strong) UIColor * _Nonnull largeItemTintColor;
@property (nonatomic, strong) UIFont * _Nonnull largeItemFont;
@property (nonatomic, strong) UIColor * _Nonnull largeItemBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull largeItemHighlightedColor;
@property (nonatomic, strong) UIFont * _Nonnull itemFont;
@property (nonatomic, strong) UIColor * _Nonnull itemBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull itemSelectedBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull itemTintColor;
@property (nonatomic, strong) UIColor * _Nonnull itemSelectedTintColor;
@property (nonatomic, strong) UIColor * _Nonnull itemHighlightedTintColor;
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
@property (nonatomic, strong) UIColor * _Nonnull informationTitleColor;
@property (nonatomic, strong) UIFont * _Nonnull informationTitleFont;
@property (nonatomic, strong) UIColor * _Nonnull informationDesctiptionColor;
@property (nonatomic, strong) UIFont * _Nonnull informationDesctiptionFont;
@end



/// This protocol is used to create a custom <code>UserView</code>.
SWIFT_PROTOCOL("_TtP13SendBirdUIKit26SBUUserProfileViewProtocol_")
@protocol SBUUserProfileViewProtocol
/// This function shows selector view.
- (void)showWithBaseView:(UIView * _Nonnull)baseView user:(SBUUser * _Nullable)user;
- (void)showWithBaseView:(UIView * _Nonnull)baseView user:(SBUUser * _Nullable)user isOpenChannel:(BOOL)isOpenChannel;
/// This function dismisses selector view.
- (void)dismiss;
@end


SWIFT_CLASS("_TtC13SendBirdUIKit8SBUUtils")
@interface SBUUtils : NSObject
/// This function gets the message file type of the file message.
/// \param fileMessage <code>SBDFileMessage</code> object
///
///
/// returns:
/// <code>MessageFileType</code>
+ (enum MessageFileType)getFileTypeByFileMessage:(SBDFileMessage * _Nonnull)fileMessage SWIFT_WARN_UNUSED_RESULT;
/// This function gets the message file type string as the type.
/// \param type File type string
///
///
/// returns:
/// <code>MessageFileType</code>
+ (enum MessageFileType)getFileTypeByType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// This is a function that creates a channel name.
/// If the channel name is not entered after creating the channel or channel name is empty,
/// the channel name is generated by combining the nicknames of the members in the channel.
/// \param channel <code>SBDGroupChannel</code> object
///
///
/// returns:
/// Generated channel name
+ (NSString * _Nonnull)generateChannelNameWithChannel:(SBDGroupChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
/// This function gets the MIME type from the URL.
/// \param url url
///
///
/// returns:
/// MIME type string
+ (NSString * _Nullable)getMimeTypeWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// This function gets the receipt state of the message on the channel.
/// \param channel <code>SBDGroupChannel</code> object
///
/// \param message <code>SBDBaseMessage</code> object
///
///
/// returns:
/// <code>SBUMessageReceiptState</code>
+ (enum SBUMessageReceiptState)getReceiptStateWithChannel:(SBDGroupChannel * _Nonnull)channel message:(SBDBaseMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("deprecated in 2.0.5", "getReceiptStateIfExists");
/// This function checks the validity of coverUrl.
/// \param coverUrl Cover url string
///
///
/// returns:
/// If corverUrl is valid, return <code>true</code>.
+ (BOOL)isValidWithCoverUrl:(NSString * _Nonnull)coverUrl SWIFT_WARN_UNUSED_RESULT;
/// This function checks the validity of channel name.
/// \param channelName Channel name string
///
/// \param type Channel type
///
///
/// returns:
/// If channel name is valid, return <code>true</code>.
+ (BOOL)isValidWithChannelName:(NSString * _Nonnull)channelName type:(enum ChannelType)type SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)emptyTitleForRowEditActionFor:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@interface UIImage (SWIFT_EXTENSION(SendBirdUIKit))
/// This applies the tint color to the <code>UIImage</code>.
/// \param tintColor tint color
///
///
/// returns:
/// <code>Uiimage</code> objects with tint color
- (UIImage * _Nonnull)sbu_withTintColor:(UIColor * _Nullable)tintColor SWIFT_WARN_UNUSED_RESULT;
@end






@interface UINavigationController (SWIFT_EXTENSION(SendBirdUIKit))
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// Set up navigation bar with tint color. This method sets up <code>standardAppearance</code> and <code>scrollEdgeAppearance</code> with the tint color.
/// since:
/// 2.1.14
/// \param tintColor <code>UIColor</code> value. It’s recommended that you use <code>SBUTheme navigationBarTintColor</code>.
///
- (void)sbu_setupNavigationBarAppearanceWithTintColor:(UIColor * _Nonnull)tintColor;
@end




@interface UIView (SWIFT_EXTENSION(SendBirdUIKit))
/// This loads the nib file from the SendBird UIKit bundle.
///
/// returns:
/// nib object
+ (UINib * _Nonnull)sbu_loadNib SWIFT_WARN_UNUSED_RESULT;
/// This loads the view with the nib in the SendBird UIKit bundle.
///
/// returns:
/// Loaded <code>UIView</code> object
+ (UIView * _Nonnull)sbu_loadViewFromNib SWIFT_WARN_UNUSED_RESULT;
@end



/// This is an enumeration used to display <code>UserCell</code> by type.
/// since:
/// 1.2.0
typedef SWIFT_ENUM(NSInteger, UserListType, open) {
  UserListTypeNone = 0,
  UserListTypeCreateChannel = 1,
  UserListTypeChannelMembers = 2,
  UserListTypeInviteUser = 3,
  UserListTypeReaction = 4,
  UserListTypeOperators = 5,
  UserListTypeMutedMembers = 6,
  UserListTypeBannedMembers = 7,
  UserListTypeParticipants = 8,
};


SWIFT_CLASS("_TtC13SendBirdUIKit12UserNameView") SWIFT_DEPRECATED_MSG("deprecated in 2.0.0", "_TtC13SendBirdUIKit15SBUUserNameView")
@interface UserNameView : SBUUserNameView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
